
SensorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008db4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08008fb4  08008fb4  00018fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009124  08009124  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009124  08009124  00019124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800912c  0800912c  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009130  08009130  00019130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  080091a8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08009248  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004270  200001b4  080092e8  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20004424  080092e8  00024424  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a432  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a7c  00000000  00000000  0003a614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001450  00000000  00000000  0003e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012c8  00000000  00000000  0003f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b47c  00000000  00000000  000407a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018c1c  00000000  00000000  0006bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010393e  00000000  00000000  00084840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018817e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005dcc  00000000  00000000  001881d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08008f9c 	.word	0x08008f9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08008f9c 	.word	0x08008f9c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <UART_Init>:

uint8_t DebugBuf[MAX_USART_BUF_SIZE];
/* Private Prototypes */


void UART_Init(DAT_USART_Handle_t * handle){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    assert(handle);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d105      	bne.n	800060e <UART_Init+0x1a>
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <UART_Init+0xc8>)
 8000604:	4a2e      	ldr	r2, [pc, #184]	; (80006c0 <UART_Init+0xcc>)
 8000606:	2129      	movs	r1, #41	; 0x29
 8000608:	482e      	ldr	r0, [pc, #184]	; (80006c4 <UART_Init+0xd0>)
 800060a:	f007 faaf 	bl	8007b6c <__assert_func>
    handle->uart_h = huart3;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <UART_Init+0xd4>)
 8000612:	4618      	mov	r0, r3
 8000614:	4611      	mov	r1, r2
 8000616:	2388      	movs	r3, #136	; 0x88
 8000618:	461a      	mov	r2, r3
 800061a:	f007 fb01 	bl	8007c20 <memcpy>
    handle->uart_h.gState = HAL_UART_STATE_READY;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2220      	movs	r2, #32
 8000622:	67da      	str	r2, [r3, #124]	; 0x7c
    
    // Check if the handle has already been initialized
    if (handle->init){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800062a:	2b00      	cmp	r3, #0
 800062c:	d142      	bne.n	80006b4 <UART_Init+0xc0>
   

    else {

    // Configure the HAL handle
    huart3.Instance = USART3;
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <UART_Init+0xd4>)
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <UART_Init+0xd8>)
 8000632:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <UART_Init+0xd4>)
 8000636:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063a:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <UART_Init+0xd4>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <UART_Init+0xd4>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <UART_Init+0xd4>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <UART_Init+0xd4>)
 8000650:	220c      	movs	r2, #12
 8000652:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <UART_Init+0xd4>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <UART_Init+0xd4>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <UART_Init+0xd4>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <UART_Init+0xd4>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800066c:	4816      	ldr	r0, [pc, #88]	; (80006c8 <UART_Init+0xd4>)
 800066e:	f003 fd3f 	bl	80040f0 <HAL_UART_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <UART_Init+0x88>
  {
    Error_Handler();
 8000678:	f000 fae6 	bl	8000c48 <Error_Handler>
  }
    //not updating in the stm debugger
    handle->init = true;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2201      	movs	r2, #1
 8000680:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

    // Configure the RTOS Resources 
    handle->sem_rx = xSemaphoreCreateMutex();
 8000684:	2001      	movs	r0, #1
 8000686:	f005 fa5e 	bl	8005b46 <xQueueCreateMutex>
 800068a:	4602      	mov	r2, r0
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    handle->sem_tx = xSemaphoreCreateMutex();
 8000692:	2001      	movs	r0, #1
 8000694:	f005 fa57 	bl	8005b46 <xQueueCreateMutex>
 8000698:	4602      	mov	r2, r0
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    handle->queue_h = xQueueCreate(MAX_USART_QUEUE_SIZE, MAX_USART_BUF_SIZE);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2132      	movs	r1, #50	; 0x32
 80006a4:	2050      	movs	r0, #80	; 0x50
 80006a6:	f005 f9d3 	bl	8005a50 <xQueueGenericCreate>
 80006aa:	4602      	mov	r2, r0
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80006b2:	e000      	b.n	80006b6 <UART_Init+0xc2>
        return HAL_OK;
 80006b4:	bf00      	nop
    /* Configuration of the RTOS resources does seem to be successfully occuring. However 
    Attempting to change the other values of the handle members is not, uncertain of the cause..*/
    }
    

}
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	08008fb4 	.word	0x08008fb4
 80006c0:	0800902c 	.word	0x0800902c
 80006c4:	08008fbc 	.word	0x08008fbc
 80006c8:	200001d0 	.word	0x200001d0
 80006cc:	40004800 	.word	0x40004800

080006d0 <HAL_UART_RxCpltCallback>:

}

/* Rx ISR Callback */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    
    BaseType_t xStatus ={0};
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
    
    //sanity check pin toggle to see if Callback is running will flash red light
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); 
 80006dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <HAL_UART_RxCpltCallback+0x48>)
 80006e2:	f001 fcd0 	bl	8002086 <HAL_GPIO_TogglePin>

    if(huart == &huart3){
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a0c      	ldr	r2, [pc, #48]	; (800071c <HAL_UART_RxCpltCallback+0x4c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d10a      	bne.n	8000704 <HAL_UART_RxCpltCallback+0x34>
        //This line doesn't work, the program freezes
        xStatus = xQueueSendToBackFromISR(uart3.queue_h,DebugBuf,NULL); 
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_UART_RxCpltCallback+0x50>)
 80006f0:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80006f4:	2300      	movs	r3, #0
 80006f6:	2200      	movs	r2, #0
 80006f8:	490a      	ldr	r1, [pc, #40]	; (8000724 <HAL_UART_RxCpltCallback+0x54>)
 80006fa:	f005 fb43 	bl	8005d84 <xQueueGenericSendFromISR>
 80006fe:	60f8      	str	r0, [r7, #12]

        
        //xStatus = xQueueSendToBackFromISR(DebugQueue,DebugBuf,NULL);

        Request_Debug_Read();
 8000700:	f000 f812 	bl	8000728 <Request_Debug_Read>
    }
    if(xStatus == pdPASS){
        
    }
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); 
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <HAL_UART_RxCpltCallback+0x48>)
 800070a:	f001 fcbc 	bl	8002086 <HAL_GPIO_TogglePin>
    return;
 800070e:	bf00      	nop
}
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40020400 	.word	0x40020400
 800071c:	200001d0 	.word	0x200001d0
 8000720:	20000258 	.word	0x20000258
 8000724:	200002f0 	.word	0x200002f0

08000728 <Request_Debug_Read>:

/* Exported Implemtations */
void Request_Debug_Read(void){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    
    HAL_UART_Receive_IT(&huart3,DebugBuf,1);
 800072c:	2201      	movs	r2, #1
 800072e:	4903      	ldr	r1, [pc, #12]	; (800073c <Request_Debug_Read+0x14>)
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <Request_Debug_Read+0x18>)
 8000732:	f003 fdae 	bl	8004292 <HAL_UART_Receive_IT>
    return;
 8000736:	bf00      	nop

}
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200002f0 	.word	0x200002f0
 8000740:	200001d0 	.word	0x200001d0

08000744 <EnableDebug>:

void EnableDebug(void){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    
	//DAT_USART_Handle_t uart3;
    //DebugQueue = xQueueCreate(MAX_USART_QUEUE_SIZE, sizeof(uint8_t));

    //DebugMutex = xSemaphoreCreateMutex();
	UART_Init(&uart3);
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <EnableDebug+0x14>)
 800074a:	f7ff ff53 	bl	80005f4 <UART_Init>
    Request_Debug_Read();
 800074e:	f7ff ffeb 	bl	8000728 <Request_Debug_Read>

    return;
 8000752:	bf00      	nop

}
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000258 	.word	0x20000258

0800075c <DebugWrite>:

void DebugWrite(const char * format, ...){
 800075c:	b40f      	push	{r0, r1, r2, r3}
 800075e:	b580      	push	{r7, lr}
 8000760:	b08e      	sub	sp, #56	; 0x38
 8000762:	af00      	add	r7, sp, #0
    
    char buffer[50];
    va_list args;
    // Get Format and parse it
    va_start(args, format);
 8000764:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000768:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer,sizeof(buffer),format, args);
 800076a:	1d38      	adds	r0, r7, #4
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000770:	2132      	movs	r1, #50	; 0x32
 8000772:	f007 fd85 	bl	8008280 <vsniprintf>
    va_end(args);
    // Take the Debug Lock
    xSemaphoreTake(uart3.sem_tx, portMAX_DELAY);
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <DebugWrite+0x60>)
 8000778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	4618      	mov	r0, r3
 8000782:	f005 fb9f 	bl	8005ec4 <xQueueSemaphoreTake>
    //HAL_UART_Transmit(&huart3,(uint8_t*)buffer,
    //    strlen(buffer), HAL_MAX_DELAY);

    // Alternate Transmit via DAT USART
     HAL_UART_Transmit(&uart3.uart_h,(uint8_t*)buffer,
        strlen(buffer), HAL_MAX_DELAY);
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd59 	bl	8000240 <strlen>
 800078e:	4603      	mov	r3, r0
     HAL_UART_Transmit(&uart3.uart_h,(uint8_t*)buffer,
 8000790:	b29a      	uxth	r2, r3
 8000792:	1d39      	adds	r1, r7, #4
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <DebugWrite+0x60>)
 800079a:	f003 fcf7 	bl	800418c <HAL_UART_Transmit>
    // Give the lock 

    xSemaphoreGive(uart3.sem_tx);
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <DebugWrite+0x60>)
 80007a0:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 80007a4:	2300      	movs	r3, #0
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	f005 f9e5 	bl	8005b78 <xQueueGenericSend>

    return;
 80007ae:	bf00      	nop
}
 80007b0:	3738      	adds	r7, #56	; 0x38
 80007b2:	46bd      	mov	sp, r7
 80007b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007b8:	b004      	add	sp, #16
 80007ba:	4770      	bx	lr
 80007bc:	20000258 	.word	0x20000258

080007c0 <SysTask_Init>:
#include "Peripherals/usart.h"
#include "System/TaskCtrl.h"

static void TASKHeartBeat(void);

uint8_t SysTask_Init(void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af02      	add	r7, sp, #8
	/* Added task to Kernel List */
	/*if(pdPASS != xTaskCreate(TASKDebugParser,"DebugParse",
			configMINIMAL_STACK_SIZE + 150,NULL, tskIDLE_PRIORITY +2,NULL)){
		return -1;
	}*/
	if(pdPASS != xTaskCreate(TASKHeartBeat,"HeartBeat",
 80007c6:	2300      	movs	r3, #0
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	2301      	movs	r3, #1
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2300      	movs	r3, #0
 80007d0:	22e4      	movs	r2, #228	; 0xe4
 80007d2:	4906      	ldr	r1, [pc, #24]	; (80007ec <SysTask_Init+0x2c>)
 80007d4:	4806      	ldr	r0, [pc, #24]	; (80007f0 <SysTask_Init+0x30>)
 80007d6:	f005 fdee 	bl	80063b6 <xTaskCreate>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d001      	beq.n	80007e4 <SysTask_Init+0x24>
			configMINIMAL_STACK_SIZE + 100, NULL, tskIDLE_PRIORITY +1, NULL)){
		return -1;
 80007e0:	23ff      	movs	r3, #255	; 0xff
 80007e2:	e000      	b.n	80007e6 <SysTask_Init+0x26>
	}

	return 0;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08008fe0 	.word	0x08008fe0
 80007f0:	080007f5 	.word	0x080007f5

080007f4 <TASKHeartBeat>:

static void TASKHeartBeat(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

    uint8_t counter = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	71fb      	strb	r3, [r7, #7]

    while(1){
        DebugWrite("HeartBeat: %X\n\r",counter++);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	71fa      	strb	r2, [r7, #7]
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <TASKHeartBeat+0x2c>)
 8000808:	f7ff ffa8 	bl	800075c <DebugWrite>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <TASKHeartBeat+0x30>)
 8000810:	f001 fc39 	bl	8002086 <HAL_GPIO_TogglePin>

        if(counter == 1000) counter = 0;

        vTaskDelay(1000);
 8000814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000818:	f005 ff06 	bl	8006628 <vTaskDelay>
        DebugWrite("HeartBeat: %X\n\r",counter++);
 800081c:	e7ef      	b.n	80007fe <TASKHeartBeat+0xa>
 800081e:	bf00      	nop
 8000820:	08008fec 	.word	0x08008fec
 8000824:	40020400 	.word	0x40020400

08000828 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <vApplicationGetIdleTaskMemory+0x2c>)
 8000838:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4a06      	ldr	r2, [pc, #24]	; (8000858 <vApplicationGetIdleTaskMemory+0x30>)
 800083e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000324 	.word	0x20000324
 8000858:	20000378 	.word	0x20000378

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f000 fcf2 	bl	800124a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 f825 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 f923 	bl	8000ab4 <MX_GPIO_Init>
  MX_ETH_Init();
 800086e:	f000 f893 	bl	8000998 <MX_ETH_Init>
  //MX_USART3_UART_Init();
  
  MX_I2C1_Init();
 8000872:	f000 f8df 	bl	8000a34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  EnableDebug();
 8000876:	f7ff ff65 	bl	8000744 <EnableDebug>
  SysTask_Init();
 800087a:	f7ff ffa1 	bl	80007c0 <SysTask_Init>
  vTaskStartScheduler();
 800087e:	f005 ff09 	bl	8006694 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <main+0x50>)
 8000884:	1d3c      	adds	r4, r7, #4
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f004 ff5a 	bl	8005752 <osThreadCreate>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a03      	ldr	r2, [pc, #12]	; (80008b0 <main+0x54>)
 80008a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008a4:	f004 ff4e 	bl	8005744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <main+0x4c>
 80008aa:	bf00      	nop
 80008ac:	08009008 	.word	0x08009008
 80008b0:	200006b4 	.word	0x200006b4

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2234      	movs	r2, #52	; 0x34
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f007 f9ba 	bl	8007c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d8:	f002 faae 	bl	8002e38 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <SystemClock_Config+0xdc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a2b      	ldr	r2, [pc, #172]	; (8000990 <SystemClock_Config+0xdc>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b29      	ldr	r3, [pc, #164]	; (8000990 <SystemClock_Config+0xdc>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <SystemClock_Config+0xe0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008fc:	4a25      	ldr	r2, [pc, #148]	; (8000994 <SystemClock_Config+0xe0>)
 80008fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <SystemClock_Config+0xe0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000914:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000918:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fadb 	bl	8002ef8 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000948:	f000 f97e 	bl	8000c48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800094c:	f002 fa84 	bl	8002e58 <HAL_PWREx_EnableOverDrive>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000956:	f000 f977 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2302      	movs	r3, #2
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2103      	movs	r1, #3
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fd6c 	bl	8003454 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000982:	f000 f961 	bl	8000c48 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	; 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_ETH_Init+0x84>)
 800099e:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <MX_ETH_Init+0x88>)
 80009a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <MX_ETH_Init+0x8c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_ETH_Init+0x8c>)
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_ETH_Init+0x8c>)
 80009b0:	22e1      	movs	r2, #225	; 0xe1
 80009b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_ETH_Init+0x8c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_ETH_Init+0x8c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_ETH_Init+0x8c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_ETH_Init+0x84>)
 80009c8:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <MX_ETH_Init+0x8c>)
 80009ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_ETH_Init+0x84>)
 80009ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_ETH_Init+0x84>)
 80009d6:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <MX_ETH_Init+0x90>)
 80009d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_ETH_Init+0x84>)
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <MX_ETH_Init+0x94>)
 80009de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_ETH_Init+0x84>)
 80009e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_ETH_Init+0x84>)
 80009ea:	f000 fe61 	bl	80016b0 <HAL_ETH_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009f4:	f000 f928 	bl	8000c48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009f8:	2238      	movs	r2, #56	; 0x38
 80009fa:	2100      	movs	r1, #0
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_ETH_Init+0x98>)
 80009fe:	f007 f91d 	bl	8007c3c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_ETH_Init+0x98>)
 8000a04:	2221      	movs	r2, #33	; 0x21
 8000a06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_ETH_Init+0x98>)
 8000a0a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_ETH_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200005b0 	.word	0x200005b0
 8000a20:	40028000 	.word	0x40028000
 8000a24:	200006b8 	.word	0x200006b8
 8000a28:	20000114 	.word	0x20000114
 8000a2c:	20000074 	.word	0x20000074
 8000a30:	20000578 	.word	0x20000578

08000a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_I2C1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <MX_I2C1_Init+0x7c>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a70:	f001 fb24 	bl	80020bc <HAL_I2C_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a7a:	f000 f8e5 	bl	8000c48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a82:	f002 f942 	bl	8002d0a <HAL_I2CEx_ConfigAnalogFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f000 f8dc 	bl	8000c48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_I2C1_Init+0x74>)
 8000a94:	f002 f984 	bl	8002da0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f8d3 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000660 	.word	0x20000660
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	20303e5d 	.word	0x20303e5d

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b56      	ldr	r3, [pc, #344]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a55      	ldr	r2, [pc, #340]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b53      	ldr	r3, [pc, #332]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a4f      	ldr	r2, [pc, #316]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b4a      	ldr	r3, [pc, #296]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a49      	ldr	r2, [pc, #292]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b47      	ldr	r3, [pc, #284]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b44      	ldr	r3, [pc, #272]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a43      	ldr	r2, [pc, #268]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a3d      	ldr	r2, [pc, #244]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b3b      	ldr	r3, [pc, #236]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <MX_GPIO_Init+0x170>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b60:	4831      	ldr	r0, [pc, #196]	; (8000c28 <MX_GPIO_Init+0x174>)
 8000b62:	f001 fa77 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2140      	movs	r1, #64	; 0x40
 8000b6a:	4830      	ldr	r0, [pc, #192]	; (8000c2c <MX_GPIO_Init+0x178>)
 8000b6c:	f001 fa72 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	482a      	ldr	r0, [pc, #168]	; (8000c30 <MX_GPIO_Init+0x17c>)
 8000b88:	f001 f8b8 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b8c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4820      	ldr	r0, [pc, #128]	; (8000c28 <MX_GPIO_Init+0x174>)
 8000ba6:	f001 f8a9 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	481a      	ldr	r0, [pc, #104]	; (8000c2c <MX_GPIO_Init+0x178>)
 8000bc2:	f001 f89b 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_GPIO_Init+0x178>)
 8000bda:	f001 f88f 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bde:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000bfc:	f001 f87e 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000c16:	f001 f871 	bl	8001cfc <HAL_GPIO_Init>

}
 8000c1a:	bf00      	nop
 8000c1c:	3730      	adds	r7, #48	; 0x30
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020000 	.word	0x40020000

08000c38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f004 fdd2 	bl	80057ea <osDelay>
 8000c46:	e7fb      	b.n	8000c40 <StartDefaultTask+0x8>

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	f06f 0001 	mvn.w	r0, #1
 8000c92:	f000 fc36 	bl	8001502 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	; 0x38
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a4e      	ldr	r2, [pc, #312]	; (8000dfc <HAL_ETH_MspInit+0x158>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	f040 8096 	bne.w	8000df4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cc8:	4b4d      	ldr	r3, [pc, #308]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a4c      	ldr	r2, [pc, #304]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b4a      	ldr	r3, [pc, #296]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cdc:	623b      	str	r3, [r7, #32]
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a46      	ldr	r2, [pc, #280]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000ce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cea:	6313      	str	r3, [r2, #48]	; 0x30
 8000cec:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a40      	ldr	r2, [pc, #256]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000cfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b3e      	ldr	r3, [pc, #248]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	4b3b      	ldr	r3, [pc, #236]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a3a      	ldr	r2, [pc, #232]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1c:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	4a34      	ldr	r2, [pc, #208]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6313      	str	r3, [r2, #48]	; 0x30
 8000d34:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d40:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a2e      	ldr	r2, [pc, #184]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a28      	ldr	r2, [pc, #160]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <HAL_ETH_MspInit+0x15c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d70:	2332      	movs	r3, #50	; 0x32
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d80:	230b      	movs	r3, #11
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	481e      	ldr	r0, [pc, #120]	; (8000e04 <HAL_ETH_MspInit+0x160>)
 8000d8c:	f000 ffb6 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d90:	2386      	movs	r3, #134	; 0x86
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da0:	230b      	movs	r3, #11
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4817      	ldr	r0, [pc, #92]	; (8000e08 <HAL_ETH_MspInit+0x164>)
 8000dac:	f000 ffa6 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480f      	ldr	r0, [pc, #60]	; (8000e0c <HAL_ETH_MspInit+0x168>)
 8000dce:	f000 ff95 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de4:	230b      	movs	r3, #11
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4808      	ldr	r0, [pc, #32]	; (8000e10 <HAL_ETH_MspInit+0x16c>)
 8000df0:	f000 ff84 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3738      	adds	r7, #56	; 0x38
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40028000 	.word	0x40028000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40021800 	.word	0x40021800

08000e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0ae      	sub	sp, #184	; 0xb8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2290      	movs	r2, #144	; 0x90
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f006 ff01 	bl	8007c3c <memset>
  if(hi2c->Instance==I2C1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <HAL_I2C_MspInit+0xd4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d14c      	bne.n	8000ede <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fd24 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e5e:	f7ff fef3 	bl	8000c48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a21      	ldr	r2, [pc, #132]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000e7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e82:	2312      	movs	r3, #18
 8000e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e94:	2304      	movs	r3, #4
 8000e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <HAL_I2C_MspInit+0xdc>)
 8000ea2:	f000 ff2b 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	201f      	movs	r0, #31
 8000ec4:	f000 fb1d 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ec8:	201f      	movs	r0, #31
 8000eca:	f000 fb36 	bl	800153a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	2020      	movs	r0, #32
 8000ed4:	f000 fb15 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ed8:	2020      	movs	r0, #32
 8000eda:	f000 fb2e 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	37b8      	adds	r7, #184	; 0xb8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0ae      	sub	sp, #184	; 0xb8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2290      	movs	r2, #144	; 0x90
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 fe91 	bl	8007c3c <memset>
  if(huart->Instance==USART3)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_UART_MspInit+0xc4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d144      	bne.n	8000fae <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fcb4 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f3e:	f7ff fe83 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_UART_MspInit+0xc8>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <HAL_UART_MspInit+0xc8>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_UART_MspInit+0xc8>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_UART_MspInit+0xc8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0xc8>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0xc8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_UART_MspInit+0xcc>)
 8000f9a:	f000 feaf 	bl	8001cfc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	2027      	movs	r0, #39	; 0x27
 8000fa4:	f000 faad 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fa8:	2027      	movs	r0, #39	; 0x27
 8000faa:	f000 fac6 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	37b8      	adds	r7, #184	; 0xb8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020c00 	.word	0x40020c00

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 f966 	bl	80012c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ff8:	f005 ff5e 	bl	8006eb8 <xTaskGetSchedulerState>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d001      	beq.n	8001006 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001002:	f006 fb39 	bl	8007678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <I2C1_EV_IRQHandler+0x10>)
 8001012:	f001 f8e3 	bl	80021dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000660 	.word	0x20000660

08001020 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <I2C1_ER_IRQHandler+0x10>)
 8001026:	f001 f8f3 	bl	8002210 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000660 	.word	0x20000660

08001034 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <USART3_IRQHandler+0x10>)
 800103a:	f003 f96f 	bl	800431c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001d0 	.word	0x200001d0

08001048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	return 1;
 800104c:	2301      	movs	r3, #1
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_kill>:

int _kill(int pid, int sig)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001062:	f006 fda1 	bl	8007ba8 <__errno>
 8001066:	4603      	mov	r3, r0
 8001068:	2216      	movs	r2, #22
 800106a:	601a      	str	r2, [r3, #0]
	return -1;
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_exit>:

void _exit (int status)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ffe7 	bl	8001058 <_kill>
	while (1) {}		/* Make sure we hang here */
 800108a:	e7fe      	b.n	800108a <_exit+0x12>

0800108c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e00a      	b.n	80010b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800109e:	f3af 8000 	nop.w
 80010a2:	4601      	mov	r1, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	60ba      	str	r2, [r7, #8]
 80010aa:	b2ca      	uxtb	r2, r1
 80010ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbf0      	blt.n	800109e <_read+0x12>
	}

return len;
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e009      	b.n	80010ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	60ba      	str	r2, [r7, #8]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf1      	blt.n	80010d8 <_write+0x12>
	}
	return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_close>:

int _close(int file)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	return -1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001126:	605a      	str	r2, [r3, #4]
	return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_isatty>:

int _isatty(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	return 1;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001198:	f006 fd06 	bl	8007ba8 <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20080000 	.word	0x20080000
 80011c8:	00000400 	.word	0x00000400
 80011cc:	200006c0 	.word	0x200006c0
 80011d0:	20004428 	.word	0x20004428

080011d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011fe:	490e      	ldr	r1, [pc, #56]	; (8001238 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001214:	4c0b      	ldr	r4, [pc, #44]	; (8001244 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001222:	f7ff ffd7 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001226:	f006 fcd7 	bl	8007bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fb17 	bl	800085c <main>
  bx  lr    
 800122e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800123c:	08009134 	.word	0x08009134
  ldr r2, =_sbss
 8001240:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001244:	20004424 	.word	0x20004424

08001248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>

0800124a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124e:	2003      	movs	r0, #3
 8001250:	f000 f94c 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001254:	200f      	movs	r0, #15
 8001256:	f000 f805 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125a:	f7ff fcfb 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f967 	bl	8001556 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f92f 	bl	8001502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	200006c4 	.word	0x200006c4

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200006c4 	.word	0x200006c4

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <__NVIC_SetPriorityGrouping+0x40>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	4313      	orrs	r3, r2
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x40>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00
 8001390:	05fa0000 	.word	0x05fa0000

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f7ff ff8e 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff29 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff3e 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff8e 	bl	8001440 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5d 	bl	80013ec <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff31 	bl	80013b0 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa2 	bl	80014a8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff feb6 	bl	80012ec <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d008      	beq.n	80015a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e052      	b.n	8001646 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0216 	bic.w	r2, r2, #22
 80015ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d103      	bne.n	80015d0 <HAL_DMA_Abort+0x62>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0208 	bic.w	r2, r2, #8
 80015de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f0:	e013      	b.n	800161a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015f2:	f7ff fe7b 	bl	80012ec <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d90c      	bls.n	800161a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2220      	movs	r2, #32
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e015      	b.n	8001646 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e4      	bne.n	80015f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	223f      	movs	r2, #63	; 0x3f
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d004      	beq.n	800166c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e00c      	b.n	8001686 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2205      	movs	r2, #5
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a0:	b2db      	uxtb	r3, r3
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e06a      	b.n	8001798 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d106      	bne.n	80016da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2223      	movs	r2, #35	; 0x23
 80016d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fae5 	bl	8000ca4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_ETH_Init+0xf0>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <HAL_ETH_Init+0xf0>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_ETH_Init+0xf0>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016f2:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <HAL_ETH_Init+0xf4>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a2b      	ldr	r2, [pc, #172]	; (80017a4 <HAL_ETH_Init+0xf4>)
 80016f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016fc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016fe:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_ETH_Init+0xf4>)
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4927      	ldr	r1, [pc, #156]	; (80017a4 <HAL_ETH_Init+0xf4>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_ETH_Init+0xf4>)
 800170e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001726:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001728:	f7ff fde0 	bl	80012ec <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800172e:	e011      	b.n	8001754 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001730:	f7ff fddc 	bl	80012ec <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800173e:	d909      	bls.n	8001754 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2204      	movs	r2, #4
 8001744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	22e0      	movs	r2, #224	; 0xe0
 800174c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e021      	b.n	8001798 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1e4      	bne.n	8001730 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f958 	bl	8001a1c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f9ff 	bl	8001b70 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fa55 	bl	8001c22 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	461a      	mov	r2, r3
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f9bd 	bl	8001b00 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2210      	movs	r2, #16
 8001792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40013800 	.word	0x40013800

080017a8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4b51      	ldr	r3, [pc, #324]	; (8001904 <ETH_SetMACConfig+0x15c>)
 80017be:	4013      	ands	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	7c1b      	ldrb	r3, [r3, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <ETH_SetMACConfig+0x28>
 80017ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017ce:	e000      	b.n	80017d2 <ETH_SetMACConfig+0x2a>
 80017d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	7c5b      	ldrb	r3, [r3, #17]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <ETH_SetMACConfig+0x38>
 80017da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017de:	e000      	b.n	80017e2 <ETH_SetMACConfig+0x3a>
 80017e0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017e2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	7fdb      	ldrb	r3, [r3, #31]
 80017ee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017f0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	7f92      	ldrb	r2, [r2, #30]
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d102      	bne.n	8001806 <ETH_SetMACConfig+0x5e>
 8001800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001804:	e000      	b.n	8001808 <ETH_SetMACConfig+0x60>
 8001806:	2200      	movs	r2, #0
                        macconf->Speed |
 8001808:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	7f1b      	ldrb	r3, [r3, #28]
 800180e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001810:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001816:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800181e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001826:	2a00      	cmp	r2, #0
 8001828:	d102      	bne.n	8001830 <ETH_SetMACConfig+0x88>
 800182a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182e:	e000      	b.n	8001832 <ETH_SetMACConfig+0x8a>
 8001830:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001832:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	7bdb      	ldrb	r3, [r3, #15]
 8001838:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800183a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001840:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001848:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800184a:	4313      	orrs	r3, r2
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff fd4e 	bl	8001304 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800187e:	4013      	ands	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001886:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800188e:	2a00      	cmp	r2, #0
 8001890:	d101      	bne.n	8001896 <ETH_SetMACConfig+0xee>
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	e000      	b.n	8001898 <ETH_SetMACConfig+0xf0>
 8001896:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001898:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800189e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80018a6:	2a01      	cmp	r2, #1
 80018a8:	d101      	bne.n	80018ae <ETH_SetMACConfig+0x106>
 80018aa:	2208      	movs	r2, #8
 80018ac:	e000      	b.n	80018b0 <ETH_SetMACConfig+0x108>
 80018ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80018b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d101      	bne.n	80018c0 <ETH_SetMACConfig+0x118>
 80018bc:	2204      	movs	r2, #4
 80018be:	e000      	b.n	80018c2 <ETH_SetMACConfig+0x11a>
 80018c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80018ca:	2a01      	cmp	r2, #1
 80018cc:	d101      	bne.n	80018d2 <ETH_SetMACConfig+0x12a>
 80018ce:	2202      	movs	r2, #2
 80018d0:	e000      	b.n	80018d4 <ETH_SetMACConfig+0x12c>
 80018d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018d4:	4313      	orrs	r3, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fd09 	bl	8001304 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	ff20810f 	.word	0xff20810f

08001908 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <ETH_SetDMAConfig+0x110>)
 8001922:	4013      	ands	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	7b1b      	ldrb	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <ETH_SetDMAConfig+0x2c>
 800192e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001932:	e000      	b.n	8001936 <ETH_SetDMAConfig+0x2e>
 8001934:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	7b5b      	ldrb	r3, [r3, #13]
 800193a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800193c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	7f52      	ldrb	r2, [r2, #29]
 8001942:	2a00      	cmp	r2, #0
 8001944:	d102      	bne.n	800194c <ETH_SetDMAConfig+0x44>
 8001946:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800194a:	e000      	b.n	800194e <ETH_SetDMAConfig+0x46>
 800194c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800194e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	7b9b      	ldrb	r3, [r3, #14]
 8001954:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001956:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800195c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	7f1b      	ldrb	r3, [r3, #28]
 8001962:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001964:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	7f9b      	ldrb	r3, [r3, #30]
 800196a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800196c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001972:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800197a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800197c:	4313      	orrs	r3, r2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198c:	461a      	mov	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fcb0 	bl	8001304 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ac:	461a      	mov	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80019c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80019d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff fc81 	bl	8001304 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	f8de3f23 	.word	0xf8de3f23

08001a1c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0a6      	sub	sp, #152	; 0x98
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fe86 	bl	80017a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001adc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff08 	bl	8001908 <ETH_SetDMAConfig>
}
 8001af8:	bf00      	nop
 8001afa:	3798      	adds	r7, #152	; 0x98
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3305      	adds	r3, #5
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	3204      	adds	r2, #4
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <ETH_MACAddressConfig+0x68>)
 8001b22:	4413      	add	r3, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	061a      	lsls	r2, r3, #24
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3302      	adds	r3, #2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <ETH_MACAddressConfig+0x6c>)
 8001b52:	4413      	add	r3, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	6013      	str	r3, [r2, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40028040 	.word	0x40028040
 8001b6c:	40028044 	.word	0x40028044

08001b70 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e03e      	b.n	8001bfc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68d9      	ldr	r1, [r3, #12]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	3206      	adds	r2, #6
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d80c      	bhi.n	8001be0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68d9      	ldr	r1, [r3, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	e004      	b.n	8001bea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d9bd      	bls.n	8001b7e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	611a      	str	r2, [r3, #16]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e046      	b.n	8001cbe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6919      	ldr	r1, [r3, #16]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c74:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	3212      	adds	r2, #18
 8001c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d80c      	bhi.n	8001cae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6919      	ldr	r1, [r3, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	e004      	b.n	8001cb8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d9b5      	bls.n	8001c30 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cee:	60da      	str	r2, [r3, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e175      	b.n	8002008 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8164 	bne.w	8002002 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d005      	beq.n	8001d52 <HAL_GPIO_Init+0x56>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d130      	bne.n	8001db4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 0201 	and.w	r2, r3, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d017      	beq.n	8001df0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d123      	bne.n	8001e44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80be 	beq.w	8002002 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	4b66      	ldr	r3, [pc, #408]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a65      	ldr	r2, [pc, #404]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e9e:	4a61      	ldr	r2, [pc, #388]	; (8002024 <HAL_GPIO_Init+0x328>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_GPIO_Init+0x32c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d037      	beq.n	8001f3a <HAL_GPIO_Init+0x23e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a57      	ldr	r2, [pc, #348]	; (800202c <HAL_GPIO_Init+0x330>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d031      	beq.n	8001f36 <HAL_GPIO_Init+0x23a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a56      	ldr	r2, [pc, #344]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d02b      	beq.n	8001f32 <HAL_GPIO_Init+0x236>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a55      	ldr	r2, [pc, #340]	; (8002034 <HAL_GPIO_Init+0x338>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d025      	beq.n	8001f2e <HAL_GPIO_Init+0x232>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a54      	ldr	r2, [pc, #336]	; (8002038 <HAL_GPIO_Init+0x33c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01f      	beq.n	8001f2a <HAL_GPIO_Init+0x22e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a53      	ldr	r2, [pc, #332]	; (800203c <HAL_GPIO_Init+0x340>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d019      	beq.n	8001f26 <HAL_GPIO_Init+0x22a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_GPIO_Init+0x344>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a51      	ldr	r2, [pc, #324]	; (8002044 <HAL_GPIO_Init+0x348>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00d      	beq.n	8001f1e <HAL_GPIO_Init+0x222>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a50      	ldr	r2, [pc, #320]	; (8002048 <HAL_GPIO_Init+0x34c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_GPIO_Init+0x21e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4f      	ldr	r2, [pc, #316]	; (800204c <HAL_GPIO_Init+0x350>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_GPIO_Init+0x21a>
 8001f12:	2309      	movs	r3, #9
 8001f14:	e012      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f16:	230a      	movs	r3, #10
 8001f18:	e010      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	e00e      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e00c      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f22:	2306      	movs	r3, #6
 8001f24:	e00a      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f26:	2305      	movs	r3, #5
 8001f28:	e008      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e004      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x240>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	f002 0203 	and.w	r2, r2, #3
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	4093      	lsls	r3, r2
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f4c:	4935      	ldr	r1, [pc, #212]	; (8002024 <HAL_GPIO_Init+0x328>)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f7e:	4a34      	ldr	r2, [pc, #208]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa8:	4a29      	ldr	r2, [pc, #164]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_GPIO_Init+0x354>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3301      	adds	r3, #1
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	2b0f      	cmp	r3, #15
 800200c:	f67f ae86 	bls.w	8001d1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	40013800 	.word	0x40013800
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40021000 	.word	0x40021000
 800203c:	40021400 	.word	0x40021400
 8002040:	40021800 	.word	0x40021800
 8002044:	40021c00 	.word	0x40021c00
 8002048:	40022000 	.word	0x40022000
 800204c:	40022400 	.word	0x40022400
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002098:	887a      	ldrh	r2, [r7, #2]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	041a      	lsls	r2, r3, #16
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	400b      	ands	r3, r1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	619a      	str	r2, [r3, #24]
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07f      	b.n	80021ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fe96 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2224      	movs	r2, #36	; 0x24
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800210c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800211c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e006      	b.n	8002144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d104      	bne.n	8002156 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_I2C_Init+0x11c>)
 8002162:	430b      	orrs	r3, r1
 8002164:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002174:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69d9      	ldr	r1, [r3, #28]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	02008000 	.word	0x02008000

080021dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
  }
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	09db      	lsrs	r3, r3, #7
 8002238:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002254:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	0a9b      	lsrs	r3, r3, #10
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	09db      	lsrs	r3, r3, #7
 8002266:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f043 0208 	orr.w	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002282:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	0a5b      	lsrs	r3, r3, #9
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	09db      	lsrs	r3, r3, #7
 8002294:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	f043 0202 	orr.w	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 030b 	and.w	r3, r3, #11
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fb89 	bl	80029dc <I2C_ITError>
  }
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	70fb      	strb	r3, [r7, #3]
 8002306:	4613      	mov	r3, r2
 8002308:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <I2C_Slave_ISR_IT+0x24>
 8002372:	2302      	movs	r3, #2
 8002374:	e0ec      	b.n	8002550 <I2C_Slave_ISR_IT+0x1fe>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f9bf 	bl	800271c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d04d      	beq.n	8002446 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d047      	beq.n	8002446 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d128      	bne.n	8002412 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b28      	cmp	r3, #40	; 0x28
 80023ca:	d108      	bne.n	80023de <I2C_Slave_ISR_IT+0x8c>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023d2:	d104      	bne.n	80023de <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80023d4:	6939      	ldr	r1, [r7, #16]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 faaa 	bl	8002930 <I2C_ITListenCplt>
 80023dc:	e032      	b.n	8002444 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b29      	cmp	r3, #41	; 0x29
 80023e8:	d10e      	bne.n	8002408 <I2C_Slave_ISR_IT+0xb6>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023f0:	d00a      	beq.n	8002408 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2210      	movs	r2, #16
 80023f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fbe5 	bl	8002bca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f92d 	bl	8002660 <I2C_ITSlaveSeqCplt>
 8002406:	e01d      	b.n	8002444 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2210      	movs	r2, #16
 800240e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002410:	e096      	b.n	8002540 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f043 0204 	orr.w	r2, r3, #4
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <I2C_Slave_ISR_IT+0xe4>
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002432:	f040 8085 	bne.w	8002540 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4619      	mov	r1, r3
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 facd 	bl	80029dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002442:	e07d      	b.n	8002540 <I2C_Slave_ISR_IT+0x1ee>
 8002444:	e07c      	b.n	8002540 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d030      	beq.n	80024b4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800245a:	2b00      	cmp	r3, #0
 800245c:	d02a      	beq.n	80024b4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d018      	beq.n	800249a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d14f      	bne.n	8002544 <I2C_Slave_ISR_IT+0x1f2>
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024aa:	d04b      	beq.n	8002544 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f8d7 	bl	8002660 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80024b2:	e047      	b.n	8002544 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	08db      	lsrs	r3, r3, #3
 80024c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80024cc:	6939      	ldr	r1, [r7, #16]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f842 	bl	8002558 <I2C_ITAddrCplt>
 80024d4:	e037      	b.n	8002546 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d031      	beq.n	8002546 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	085b      	lsrs	r3, r3, #1
 80024e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02b      	beq.n	8002546 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d018      	beq.n	800252a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
 8002528:	e00d      	b.n	8002546 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002530:	d002      	beq.n	8002538 <I2C_Slave_ISR_IT+0x1e6>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f891 	bl	8002660 <I2C_ITSlaveSeqCplt>
 800253e:	e002      	b.n	8002546 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002540:	bf00      	nop
 8002542:	e000      	b.n	8002546 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002544:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800256e:	2b28      	cmp	r3, #40	; 0x28
 8002570:	d16a      	bne.n	8002648 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	b29b      	uxth	r3, r3
 800258c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002590:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	b29b      	uxth	r3, r3
 800259a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80025ac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d138      	bne.n	8002628 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80025b6:	897b      	ldrh	r3, [r7, #10]
 80025b8:	09db      	lsrs	r3, r3, #7
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	89bb      	ldrh	r3, [r7, #12]
 80025be:	4053      	eors	r3, r2
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f003 0306 	and.w	r3, r3, #6
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11c      	bne.n	8002604 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d13b      	bne.n	8002658 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2208      	movs	r2, #8
 80025ec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025f6:	89ba      	ldrh	r2, [r7, #12]
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fe7c 	bl	80022fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002602:	e029      	b.n	8002658 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fb1e 	bl	8002c4e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800261a:	89ba      	ldrh	r2, [r7, #12]
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fe6a 	bl	80022fa <HAL_I2C_AddrCallback>
}
 8002626:	e017      	b.n	8002658 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fb0e 	bl	8002c4e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800263a:	89ba      	ldrh	r2, [r7, #12]
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff fe5a 	bl	80022fa <HAL_I2C_AddrCallback>
}
 8002646:	e007      	b.n	8002658 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2208      	movs	r2, #8
 800264e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	0b9b      	lsrs	r3, r3, #14
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e00d      	b.n	80026b2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	0bdb      	lsrs	r3, r3, #15
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b29      	cmp	r3, #41	; 0x29
 80026bc:	d112      	bne.n	80026e4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2228      	movs	r2, #40	; 0x28
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2221      	movs	r2, #33	; 0x21
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026cc:	2101      	movs	r1, #1
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fabd 	bl	8002c4e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fdf8 	bl	80022d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80026e2:	e017      	b.n	8002714 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b2a      	cmp	r3, #42	; 0x2a
 80026ee:	d111      	bne.n	8002714 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2228      	movs	r2, #40	; 0x28
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2222      	movs	r2, #34	; 0x22
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80026fe:	2102      	movs	r1, #2
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 faa4 	bl	8002c4e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fde9 	bl	80022e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002738:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2220      	movs	r2, #32
 8002740:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b21      	cmp	r3, #33	; 0x21
 8002746:	d002      	beq.n	800274e <I2C_ITSlaveCplt+0x32>
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b29      	cmp	r3, #41	; 0x29
 800274c:	d108      	bne.n	8002760 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800274e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa7b 	bl	8002c4e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
 800275e:	e00d      	b.n	800277c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b22      	cmp	r3, #34	; 0x22
 8002764:	d002      	beq.n	800276c <I2C_ITSlaveCplt+0x50>
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b2a      	cmp	r3, #42	; 0x2a
 800276a:	d107      	bne.n	800277c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800276c:	f248 0102 	movw	r1, #32770	; 0x8002
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fa6c 	bl	8002c4e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2222      	movs	r2, #34	; 0x22
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b64      	ldr	r3, [pc, #400]	; (8002928 <I2C_ITSlaveCplt+0x20c>)
 8002798:	400b      	ands	r3, r1
 800279a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fa14 	bl	8002bca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	0b9b      	lsrs	r3, r3, #14
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d013      	beq.n	80027d6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027bc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d4:	e018      	b.n	8002808 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	0bdb      	lsrs	r3, r3, #15
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d012      	beq.n	8002808 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	b29a      	uxth	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d020      	beq.n	8002856 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	f043 0204 	orr.w	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	2b00      	cmp	r3, #0
 8002880:	d010      	beq.n	80028a4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8a7 	bl	80029dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b28      	cmp	r3, #40	; 0x28
 8002898:	d141      	bne.n	800291e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800289a:	6979      	ldr	r1, [r7, #20]
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f847 	bl	8002930 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028a2:	e03c      	b.n	800291e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028ac:	d014      	beq.n	80028d8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fed6 	bl	8002660 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a1d      	ldr	r2, [pc, #116]	; (800292c <I2C_ITSlaveCplt+0x210>)
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fd20 	bl	8002316 <HAL_I2C_ListenCpltCallback>
}
 80028d6:	e022      	b.n	800291e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b22      	cmp	r3, #34	; 0x22
 80028e2:	d10e      	bne.n	8002902 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fcf3 	bl	80022e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002900:	e00d      	b.n	800291e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fcda 	bl	80022d2 <HAL_I2C_SlaveTxCpltCallback>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	fe00e800 	.word	0xfe00e800
 800292c:	ffff0000 	.word	0xffff0000

08002930 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <I2C_ITListenCplt+0xa8>)
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d022      	beq.n	80029ae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	2b00      	cmp	r3, #0
 8002986:	d012      	beq.n	80029ae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f043 0204 	orr.w	r2, r3, #4
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029ae:	f248 0103 	movw	r1, #32771	; 0x8003
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f94b 	bl	8002c4e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2210      	movs	r2, #16
 80029be:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fca4 	bl	8002316 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	ffff0000 	.word	0xffff0000

080029dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a5d      	ldr	r2, [pc, #372]	; (8002b70 <I2C_ITError+0x194>)
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b28      	cmp	r3, #40	; 0x28
 8002a12:	d005      	beq.n	8002a20 <I2C_ITError+0x44>
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b29      	cmp	r3, #41	; 0x29
 8002a18:	d002      	beq.n	8002a20 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a1e:	d10b      	bne.n	8002a38 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a20:	2103      	movs	r1, #3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f913 	bl	8002c4e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2228      	movs	r2, #40	; 0x28
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a50      	ldr	r2, [pc, #320]	; (8002b74 <I2C_ITError+0x198>)
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
 8002a36:	e011      	b.n	8002a5c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a38:	f248 0103 	movw	r1, #32771	; 0x8003
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f906 	bl	8002c4e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b60      	cmp	r3, #96	; 0x60
 8002a4c:	d003      	beq.n	8002a56 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d039      	beq.n	8002ade <I2C_ITError+0x102>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b11      	cmp	r3, #17
 8002a6e:	d002      	beq.n	8002a76 <I2C_ITError+0x9a>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b21      	cmp	r3, #33	; 0x21
 8002a74:	d133      	bne.n	8002ade <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a84:	d107      	bne.n	8002a96 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fdf9 	bl	8001692 <HAL_DMA_GetState>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d017      	beq.n	8002ad6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	4a33      	ldr	r2, [pc, #204]	; (8002b78 <I2C_ITError+0x19c>)
 8002aac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fdc7 	bl	800164e <HAL_DMA_Abort_IT>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d04d      	beq.n	8002b62 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ad4:	e045      	b.n	8002b62 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f850 	bl	8002b7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002adc:	e041      	b.n	8002b62 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d039      	beq.n	8002b5a <I2C_ITError+0x17e>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b12      	cmp	r3, #18
 8002aea:	d002      	beq.n	8002af2 <I2C_ITError+0x116>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b22      	cmp	r3, #34	; 0x22
 8002af0:	d133      	bne.n	8002b5a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b00:	d107      	bne.n	8002b12 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b10:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fdbb 	bl	8001692 <HAL_DMA_GetState>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d017      	beq.n	8002b52 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <I2C_ITError+0x19c>)
 8002b28:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fd89 	bl	800164e <HAL_DMA_Abort_IT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d011      	beq.n	8002b66 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b50:	e009      	b.n	8002b66 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f812 	bl	8002b7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b58:	e005      	b.n	8002b66 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f80e 	bl	8002b7c <I2C_TreatErrorCallback>
  }
}
 8002b60:	e002      	b.n	8002b68 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b66:	bf00      	nop
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	ffff0000 	.word	0xffff0000
 8002b74:	08002353 	.word	0x08002353
 8002b78:	08002c13 	.word	0x08002c13

08002b7c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b60      	cmp	r3, #96	; 0x60
 8002b8e:	d10e      	bne.n	8002bae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fbc9 	bl	800233e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bac:	e009      	b.n	8002bc2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fbb4 	bl	800232a <HAL_I2C_ErrorCallback>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d103      	bne.n	8002be8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d007      	beq.n	8002c06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699a      	ldr	r2, [r3, #24]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	619a      	str	r2, [r3, #24]
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff ff9b 	bl	8002b7c <I2C_TreatErrorCallback>
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00f      	beq.n	8002c88 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002c6e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c7c:	2b28      	cmp	r3, #40	; 0x28
 8002c7e:	d003      	beq.n	8002c88 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002c86:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00f      	beq.n	8002cb2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002c98:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ca6:	2b28      	cmp	r3, #40	; 0x28
 8002ca8:	d003      	beq.n	8002cb2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002cb0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002cb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da03      	bge.n	8002cc2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d103      	bne.n	8002cd0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002cce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002cd0:	887b      	ldrh	r3, [r7, #2]
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d103      	bne.n	8002cde <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f043 0320 	orr.w	r3, r3, #32
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d103      	bne.n	8002cec <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cea:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6819      	ldr	r1, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d138      	bne.n	8002d92 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e032      	b.n	8002d94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2224      	movs	r2, #36	; 0x24
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d139      	bne.n	8002e2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e033      	b.n	8002e2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002df2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
  }
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40007000 	.word	0x40007000

08002e58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e86:	f7fe fa31 	bl	80012ec <HAL_GetTick>
 8002e8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e8c:	e009      	b.n	8002ea2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e8e:	f7fe fa2d 	bl	80012ec <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9c:	d901      	bls.n	8002ea2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e022      	b.n	8002ee8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eae:	d1ee      	bne.n	8002e8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ebc:	f7fe fa16 	bl	80012ec <HAL_GetTick>
 8002ec0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ec2:	e009      	b.n	8002ed8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ec4:	f7fe fa12 	bl	80012ec <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ed2:	d901      	bls.n	8002ed8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e007      	b.n	8002ee8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40007000 	.word	0x40007000

08002ef8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e29b      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8087 	beq.w	800302a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1c:	4b96      	ldr	r3, [pc, #600]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00c      	beq.n	8002f42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f28:	4b93      	ldr	r3, [pc, #588]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d112      	bne.n	8002f5a <HAL_RCC_OscConfig+0x62>
 8002f34:	4b90      	ldr	r3, [pc, #576]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f42:	4b8d      	ldr	r3, [pc, #564]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06c      	beq.n	8003028 <HAL_RCC_OscConfig+0x130>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d168      	bne.n	8003028 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e275      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x7a>
 8002f64:	4b84      	ldr	r3, [pc, #528]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a83      	ldr	r2, [pc, #524]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x9c>
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7e      	ldr	r2, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b7c      	ldr	r3, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7b      	ldr	r2, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xc0>
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b73      	ldr	r3, [pc, #460]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a72      	ldr	r2, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd8>
 8002fb8:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6e      	ldr	r2, [pc, #440]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a6b      	ldr	r2, [pc, #428]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f988 	bl	80012ec <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe f984 	bl	80012ec <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e229      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe8>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe f974 	bl	80012ec <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe f970 	bl	80012ec <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e215      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x110>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d069      	beq.n	800310a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003036:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d11c      	bne.n	8003088 <HAL_RCC_OscConfig+0x190>
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x17a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e1e9      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	493d      	ldr	r1, [pc, #244]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	e040      	b.n	800310a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d023      	beq.n	80030d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a38      	ldr	r2, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe f926 	bl	80012ec <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fe f922 	bl	80012ec <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1c7      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4929      	ldr	r1, [pc, #164]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
 80030d6:	e018      	b.n	800310a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d8:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a26      	ldr	r2, [pc, #152]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe f902 	bl	80012ec <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ec:	f7fe f8fe 	bl	80012ec <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1a3      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d038      	beq.n	8003188 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d019      	beq.n	8003152 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fe f8df 	bl	80012ec <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003132:	f7fe f8db 	bl	80012ec <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e180      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x23a>
 8003150:	e01a      	b.n	8003188 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315e:	f7fe f8c5 	bl	80012ec <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003166:	f7fe f8c1 	bl	80012ec <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d903      	bls.n	800317c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e166      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
 8003178:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	4b92      	ldr	r3, [pc, #584]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800317e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ee      	bne.n	8003166 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a4 	beq.w	80032de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b8c      	ldr	r3, [pc, #560]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b89      	ldr	r3, [pc, #548]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a88      	ldr	r2, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b86      	ldr	r3, [pc, #536]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031be:	4b83      	ldr	r3, [pc, #524]	; (80033cc <HAL_RCC_OscConfig+0x4d4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031ca:	4b80      	ldr	r3, [pc, #512]	; (80033cc <HAL_RCC_OscConfig+0x4d4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7f      	ldr	r2, [pc, #508]	; (80033cc <HAL_RCC_OscConfig+0x4d4>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fe f889 	bl	80012ec <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fe f885 	bl	80012ec <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e12a      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f0:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x4d4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x31a>
 8003204:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a6f      	ldr	r2, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e02d      	b.n	800326e <HAL_RCC_OscConfig+0x376>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x33c>
 800321a:	4b6b      	ldr	r3, [pc, #428]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	4b68      	ldr	r3, [pc, #416]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a67      	ldr	r2, [pc, #412]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	e01c      	b.n	800326e <HAL_RCC_OscConfig+0x376>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b05      	cmp	r3, #5
 800323a:	d10c      	bne.n	8003256 <HAL_RCC_OscConfig+0x35e>
 800323c:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	4a61      	ldr	r2, [pc, #388]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6713      	str	r3, [r2, #112]	; 0x70
 8003248:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a5e      	ldr	r2, [pc, #376]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0x376>
 8003256:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a5b      	ldr	r2, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe f839 	bl	80012ec <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe f835 	bl	80012ec <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0d8      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	4b4c      	ldr	r3, [pc, #304]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ee      	beq.n	800327e <HAL_RCC_OscConfig+0x386>
 80032a0:	e014      	b.n	80032cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fe f823 	bl	80012ec <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe f81f 	bl	80012ec <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0c2      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	4a3c      	ldr	r2, [pc, #240]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80ae 	beq.w	8003444 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e8:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d06d      	beq.n	80033d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d14b      	bne.n	8003394 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a31      	ldr	r2, [pc, #196]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fd fff0 	bl	80012ec <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fd ffec 	bl	80012ec <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e091      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	071b      	lsls	r3, r3, #28
 800335a:	491b      	ldr	r1, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd ffbe 	bl	80012ec <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd ffba 	bl	80012ec <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e05f      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x47c>
 8003392:	e057      	b.n	8003444 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800339a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd ffa4 	bl	80012ec <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd ffa0 	bl	80012ec <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e045      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x4b0>
 80033c6:	e03d      	b.n	8003444 <HAL_RCC_OscConfig+0x54c>
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <HAL_RCC_OscConfig+0x558>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d030      	beq.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d129      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d122      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003400:	4013      	ands	r3, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003406:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003408:	4293      	cmp	r3, r2
 800340a:	d119      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	3b01      	subs	r3, #1
 800341a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d10f      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d107      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0d0      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d910      	bls.n	800349c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b67      	ldr	r3, [pc, #412]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 020f 	bic.w	r2, r3, #15
 8003482:	4965      	ldr	r1, [pc, #404]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b63      	ldr	r3, [pc, #396]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0b8      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d020      	beq.n	80034ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b4:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a52      	ldr	r2, [pc, #328]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d8:	4b50      	ldr	r3, [pc, #320]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	494d      	ldr	r1, [pc, #308]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d040      	beq.n	8003578 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d115      	bne.n	8003536 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e07f      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e073      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e06b      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f023 0203 	bic.w	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4936      	ldr	r1, [pc, #216]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	4313      	orrs	r3, r2
 8003546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003548:	f7fd fed0 	bl	80012ec <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	e00a      	b.n	8003566 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003550:	f7fd fecc 	bl	80012ec <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e053      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 020c 	and.w	r2, r3, #12
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	429a      	cmp	r2, r3
 8003576:	d1eb      	bne.n	8003550 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003578:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d210      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 020f 	bic.w	r2, r3, #15
 800358e:	4922      	ldr	r1, [pc, #136]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e032      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b4:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4916      	ldr	r1, [pc, #88]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	490e      	ldr	r1, [pc, #56]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e6:	f000 f821 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035ea:	4602      	mov	r2, r0
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	490a      	ldr	r1, [pc, #40]	; (8003620 <HAL_RCC_ClockConfig+0x1cc>)
 80035f8:	5ccb      	ldrb	r3, [r1, r3]
 80035fa:	fa22 f303 	lsr.w	r3, r2, r3
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1d0>)
 8003600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1d4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fe2c 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023c00 	.word	0x40023c00
 800361c:	40023800 	.word	0x40023800
 8003620:	08009038 	.word	0x08009038
 8003624:	20000000 	.word	0x20000000
 8003628:	20000004 	.word	0x20000004

0800362c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b094      	sub	sp, #80	; 0x50
 8003632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	647b      	str	r3, [r7, #68]	; 0x44
 8003638:	2300      	movs	r3, #0
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800363c:	2300      	movs	r3, #0
 800363e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003644:	4b79      	ldr	r3, [pc, #484]	; (800382c <HAL_RCC_GetSysClockFreq+0x200>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d00d      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x40>
 8003650:	2b08      	cmp	r3, #8
 8003652:	f200 80e1 	bhi.w	8003818 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x34>
 800365a:	2b04      	cmp	r3, #4
 800365c:	d003      	beq.n	8003666 <HAL_RCC_GetSysClockFreq+0x3a>
 800365e:	e0db      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b73      	ldr	r3, [pc, #460]	; (8003830 <HAL_RCC_GetSysClockFreq+0x204>)
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003664:	e0db      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003666:	4b73      	ldr	r3, [pc, #460]	; (8003834 <HAL_RCC_GetSysClockFreq+0x208>)
 8003668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800366a:	e0d8      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800366c:	4b6f      	ldr	r3, [pc, #444]	; (800382c <HAL_RCC_GetSysClockFreq+0x200>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003674:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003676:	4b6d      	ldr	r3, [pc, #436]	; (800382c <HAL_RCC_GetSysClockFreq+0x200>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d063      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003682:	4b6a      	ldr	r3, [pc, #424]	; (800382c <HAL_RCC_GetSysClockFreq+0x200>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	2200      	movs	r2, #0
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
 800368c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
 8003696:	2300      	movs	r3, #0
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
 800369a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800369e:	4622      	mov	r2, r4
 80036a0:	462b      	mov	r3, r5
 80036a2:	f04f 0000 	mov.w	r0, #0
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	0159      	lsls	r1, r3, #5
 80036ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b0:	0150      	lsls	r0, r2, #5
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4621      	mov	r1, r4
 80036b8:	1a51      	subs	r1, r2, r1
 80036ba:	6139      	str	r1, [r7, #16]
 80036bc:	4629      	mov	r1, r5
 80036be:	eb63 0301 	sbc.w	r3, r3, r1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036d0:	4659      	mov	r1, fp
 80036d2:	018b      	lsls	r3, r1, #6
 80036d4:	4651      	mov	r1, sl
 80036d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036da:	4651      	mov	r1, sl
 80036dc:	018a      	lsls	r2, r1, #6
 80036de:	4651      	mov	r1, sl
 80036e0:	ebb2 0801 	subs.w	r8, r2, r1
 80036e4:	4659      	mov	r1, fp
 80036e6:	eb63 0901 	sbc.w	r9, r3, r1
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036fe:	4690      	mov	r8, r2
 8003700:	4699      	mov	r9, r3
 8003702:	4623      	mov	r3, r4
 8003704:	eb18 0303 	adds.w	r3, r8, r3
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	462b      	mov	r3, r5
 800370c:	eb49 0303 	adc.w	r3, r9, r3
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800371e:	4629      	mov	r1, r5
 8003720:	024b      	lsls	r3, r1, #9
 8003722:	4621      	mov	r1, r4
 8003724:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003728:	4621      	mov	r1, r4
 800372a:	024a      	lsls	r2, r1, #9
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003732:	2200      	movs	r2, #0
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
 8003736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800373c:	f7fc fdd8 	bl	80002f0 <__aeabi_uldivmod>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4613      	mov	r3, r2
 8003746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003748:	e058      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374a:	4b38      	ldr	r3, [pc, #224]	; (800382c <HAL_RCC_GetSysClockFreq+0x200>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	099b      	lsrs	r3, r3, #6
 8003750:	2200      	movs	r2, #0
 8003752:	4618      	mov	r0, r3
 8003754:	4611      	mov	r1, r2
 8003756:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
 8003760:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003764:	4642      	mov	r2, r8
 8003766:	464b      	mov	r3, r9
 8003768:	f04f 0000 	mov.w	r0, #0
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	0159      	lsls	r1, r3, #5
 8003772:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003776:	0150      	lsls	r0, r2, #5
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4641      	mov	r1, r8
 800377e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003782:	4649      	mov	r1, r9
 8003784:	eb63 0b01 	sbc.w	fp, r3, r1
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003794:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003798:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800379c:	ebb2 040a 	subs.w	r4, r2, sl
 80037a0:	eb63 050b 	sbc.w	r5, r3, fp
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	00eb      	lsls	r3, r5, #3
 80037ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b2:	00e2      	lsls	r2, r4, #3
 80037b4:	4614      	mov	r4, r2
 80037b6:	461d      	mov	r5, r3
 80037b8:	4643      	mov	r3, r8
 80037ba:	18e3      	adds	r3, r4, r3
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	464b      	mov	r3, r9
 80037c0:	eb45 0303 	adc.w	r3, r5, r3
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037d2:	4629      	mov	r1, r5
 80037d4:	028b      	lsls	r3, r1, #10
 80037d6:	4621      	mov	r1, r4
 80037d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037dc:	4621      	mov	r1, r4
 80037de:	028a      	lsls	r2, r1, #10
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e6:	2200      	movs	r2, #0
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	61fa      	str	r2, [r7, #28]
 80037ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f0:	f7fc fd7e 	bl	80002f0 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4613      	mov	r3, r2
 80037fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_GetSysClockFreq+0x200>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	3301      	adds	r3, #1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800380c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800380e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003816:	e002      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCC_GetSysClockFreq+0x204>)
 800381a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800381c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003820:	4618      	mov	r0, r3
 8003822:	3750      	adds	r7, #80	; 0x50
 8003824:	46bd      	mov	sp, r7
 8003826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	007a1200 	.word	0x007a1200

08003838 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003854:	f7ff fff0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0a9b      	lsrs	r3, r3, #10
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08009048 	.word	0x08009048

08003878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800387c:	f7ff ffdc 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0b5b      	lsrs	r3, r3, #13
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4903      	ldr	r1, [pc, #12]	; (800389c <HAL_RCC_GetPCLK2Freq+0x24>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	08009048 	.word	0x08009048

080038a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d012      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038c8:	4b69      	ldr	r3, [pc, #420]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a68      	ldr	r2, [pc, #416]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038d2:	6093      	str	r3, [r2, #8]
 80038d4:	4b66      	ldr	r3, [pc, #408]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	4964      	ldr	r1, [pc, #400]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d017      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038fa:	4b5d      	ldr	r3, [pc, #372]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	4959      	ldr	r1, [pc, #356]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003918:	d101      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800391a:	2301      	movs	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d017      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003936:	4b4e      	ldr	r3, [pc, #312]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800393c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	494a      	ldr	r1, [pc, #296]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003954:	d101      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003956:	2301      	movs	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003972:	2301      	movs	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 808b 	beq.w	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003984:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	4a39      	ldr	r2, [pc, #228]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398e:	6413      	str	r3, [r2, #64]	; 0x40
 8003990:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800399c:	4b35      	ldr	r3, [pc, #212]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a34      	ldr	r2, [pc, #208]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fd fca0 	bl	80012ec <HAL_GetTick>
 80039ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b0:	f7fd fc9c 	bl	80012ec <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e38f      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039c2:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ce:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d035      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d02e      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039f6:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a0e:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a14:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d114      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fd fc64 	bl	80012ec <HAL_GetTick>
 8003a24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a28:	f7fd fc60 	bl	80012ec <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e351      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0ee      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a56:	d111      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a66:	400b      	ands	r3, r1
 8003a68:	4901      	ldr	r1, [pc, #4]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40007000 	.word	0x40007000
 8003a78:	0ffffcff 	.word	0x0ffffcff
 8003a7c:	4bac      	ldr	r3, [pc, #688]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4aab      	ldr	r2, [pc, #684]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a86:	6093      	str	r3, [r2, #8]
 8003a88:	4ba9      	ldr	r3, [pc, #676]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a94:	49a6      	ldr	r1, [pc, #664]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d010      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003aa6:	4ba2      	ldr	r3, [pc, #648]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aac:	4aa0      	ldr	r2, [pc, #640]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ab6:	4b9e      	ldr	r3, [pc, #632]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	499b      	ldr	r1, [pc, #620]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ad4:	4b96      	ldr	r3, [pc, #600]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae2:	4993      	ldr	r1, [pc, #588]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003af6:	4b8e      	ldr	r3, [pc, #568]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b04:	498a      	ldr	r1, [pc, #552]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b18:	4b85      	ldr	r3, [pc, #532]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b26:	4982      	ldr	r1, [pc, #520]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b3a:	4b7d      	ldr	r3, [pc, #500]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4979      	ldr	r1, [pc, #484]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b5c:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f023 0203 	bic.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	4971      	ldr	r1, [pc, #452]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b7e:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	f023 020c 	bic.w	r2, r3, #12
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	4968      	ldr	r1, [pc, #416]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ba0:	4b63      	ldr	r3, [pc, #396]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	4960      	ldr	r1, [pc, #384]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bc2:	4b5b      	ldr	r3, [pc, #364]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	4957      	ldr	r1, [pc, #348]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003be4:	4b52      	ldr	r3, [pc, #328]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	494f      	ldr	r1, [pc, #316]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c06:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	4946      	ldr	r1, [pc, #280]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c28:	4b41      	ldr	r3, [pc, #260]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	493e      	ldr	r1, [pc, #248]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c4a:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c58:	4935      	ldr	r1, [pc, #212]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c6c:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c7a:	492d      	ldr	r1, [pc, #180]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d011      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c8e:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c9c:	4924      	ldr	r1, [pc, #144]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cdc:	4914      	ldr	r1, [pc, #80]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d00:	490b      	ldr	r1, [pc, #44]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00f      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d24:	4902      	ldr	r1, [pc, #8]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d2c:	e002      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d40:	4b8a      	ldr	r3, [pc, #552]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	4986      	ldr	r1, [pc, #536]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d64:	4b81      	ldr	r3, [pc, #516]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d74:	497d      	ldr	r1, [pc, #500]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d006      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80d6 	beq.w	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d90:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a75      	ldr	r2, [pc, #468]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9c:	f7fd faa6 	bl	80012ec <HAL_GetTick>
 8003da0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003da4:	f7fd faa2 	bl	80012ec <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e195      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003db6:	4b6d      	ldr	r3, [pc, #436]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d021      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11d      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003de4:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dea:	0e1b      	lsrs	r3, r3, #24
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	019a      	lsls	r2, r3, #6
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	071b      	lsls	r3, r3, #28
 8003e0a:	4958      	ldr	r1, [pc, #352]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d02e      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3c:	d129      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e3e:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e4c:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e52:	0f1b      	lsrs	r3, r3, #28
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	019a      	lsls	r2, r3, #6
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	061b      	lsls	r3, r3, #24
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	071b      	lsls	r3, r3, #28
 8003e72:	493e      	ldr	r1, [pc, #248]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e7a:	4b3c      	ldr	r3, [pc, #240]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e80:	f023 021f 	bic.w	r2, r3, #31
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	4938      	ldr	r1, [pc, #224]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01d      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e9e:	4b33      	ldr	r3, [pc, #204]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea4:	0e1b      	lsrs	r3, r3, #24
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb2:	0f1b      	lsrs	r3, r3, #28
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	019a      	lsls	r2, r3, #6
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	071b      	lsls	r3, r3, #28
 8003ed2:	4926      	ldr	r1, [pc, #152]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d011      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	019a      	lsls	r2, r3, #6
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	061b      	lsls	r3, r3, #24
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	071b      	lsls	r3, r3, #28
 8003f02:	491a      	ldr	r1, [pc, #104]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f16:	f7fd f9e9 	bl	80012ec <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f1e:	f7fd f9e5 	bl	80012ec <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b64      	cmp	r3, #100	; 0x64
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0d8      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	f040 80ce 	bne.w	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f44:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f50:	f7fd f9cc 	bl	80012ec <HAL_GetTick>
 8003f54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f56:	e00b      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f58:	f7fd f9c8 	bl	80012ec <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d904      	bls.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e0bb      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f70:	4b5e      	ldr	r3, [pc, #376]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f7c:	d0ec      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d02e      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d12a      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fa6:	4b51      	ldr	r3, [pc, #324]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fb4:	4b4d      	ldr	r3, [pc, #308]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	0f1b      	lsrs	r3, r3, #28
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	019a      	lsls	r2, r3, #6
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	071b      	lsls	r3, r3, #28
 8003fda:	4944      	ldr	r1, [pc, #272]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fe2:	4b42      	ldr	r3, [pc, #264]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	493d      	ldr	r1, [pc, #244]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d022      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004010:	d11d      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004012:	4b36      	ldr	r3, [pc, #216]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	0e1b      	lsrs	r3, r3, #24
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004020:	4b32      	ldr	r3, [pc, #200]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	0f1b      	lsrs	r3, r3, #28
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	019a      	lsls	r2, r3, #6
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	071b      	lsls	r3, r3, #28
 8004046:	4929      	ldr	r1, [pc, #164]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d028      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	0e1b      	lsrs	r3, r3, #24
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004068:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	0c1b      	lsrs	r3, r3, #16
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	019a      	lsls	r2, r3, #6
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	041b      	lsls	r3, r3, #16
 8004080:	431a      	orrs	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	071b      	lsls	r3, r3, #28
 800408e:	4917      	ldr	r1, [pc, #92]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4911      	ldr	r1, [pc, #68]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0e      	ldr	r2, [pc, #56]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b8:	f7fd f918 	bl	80012ec <HAL_GetTick>
 80040bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040c0:	f7fd f914 	bl	80012ec <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e007      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040de:	d1ef      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800

080040f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e040      	b.n	8004184 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fc feee 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fc06 	bl	8004940 <UART_SetConfig>
 8004134:	4603      	mov	r3, r0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e022      	b.n	8004184 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fe5e 	bl	8004e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800415a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800416a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fee5 	bl	8004f4c <UART_CheckIdleState>
 8004182:	4603      	mov	r3, r0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d171      	bne.n	8004288 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_UART_Transmit+0x24>
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e06a      	b.n	800428a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2221      	movs	r2, #33	; 0x21
 80041c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c2:	f7fd f893 	bl	80012ec <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d108      	bne.n	80041f4 <HAL_UART_Transmit+0x68>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	e003      	b.n	80041fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041fc:	e02c      	b.n	8004258 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 feec 	bl	8004fe6 <UART_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e038      	b.n	800428a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3302      	adds	r3, #2
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e007      	b.n	8004246 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1cc      	bne.n	80041fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2200      	movs	r2, #0
 800426c:	2140      	movs	r1, #64	; 0x40
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 feb9 	bl	8004fe6 <UART_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e005      	b.n	800428a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b08a      	sub	sp, #40	; 0x28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	4613      	mov	r3, r2
 800429e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d132      	bne.n	8004310 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_UART_Receive_IT+0x24>
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e02b      	b.n	8004312 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d018      	beq.n	8004300 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	613b      	str	r3, [r7, #16]
   return(result);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	69f9      	ldr	r1, [r7, #28]
 80042f2:	6a3a      	ldr	r2, [r7, #32]
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e6      	bne.n	80042ce <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	461a      	mov	r2, r3
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 ff34 	bl	8005174 <UART_Start_Receive_IT>
 800430c:	4603      	mov	r3, r0
 800430e:	e000      	b.n	8004312 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
  }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3728      	adds	r7, #40	; 0x28
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b0ba      	sub	sp, #232	; 0xe8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004342:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004346:	f640 030f 	movw	r3, #2063	; 0x80f
 800434a:	4013      	ands	r3, r2
 800434c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d115      	bne.n	8004384 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00f      	beq.n	8004384 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 82ac 	beq.w	80048d2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
      }
      return;
 8004382:	e2a6      	b.n	80048d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8117 	beq.w	80045bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800438e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800439a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800439e:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <HAL_UART_IRQHandler+0x298>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 810a 	beq.w	80045bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d011      	beq.n	80043d8 <HAL_UART_IRQHandler+0xbc>
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2201      	movs	r2, #1
 80043c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d011      	beq.n	8004408 <HAL_UART_IRQHandler+0xec>
 80043e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2202      	movs	r2, #2
 80043f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d011      	beq.n	8004438 <HAL_UART_IRQHandler+0x11c>
 8004414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2204      	movs	r2, #4
 8004426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442e:	f043 0202 	orr.w	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004454:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2208      	movs	r2, #8
 8004462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446a:	f043 0208 	orr.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <HAL_UART_IRQHandler+0x18a>
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8212 	beq.w	80048d6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00d      	beq.n	80044da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d005      	beq.n	80044fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d04f      	beq.n	800459e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fefe 	bl	8005300 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d141      	bne.n	8004596 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800452c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800453e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800454a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1d9      	bne.n	8004512 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	2b00      	cmp	r3, #0
 8004564:	d013      	beq.n	800458e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456a:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <HAL_UART_IRQHandler+0x29c>)
 800456c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd f86b 	bl	800164e <HAL_DMA_Abort_IT>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d017      	beq.n	80045ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004588:	4610      	mov	r0, r2
 800458a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	e00f      	b.n	80045ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9b6 	bl	8004900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	e00b      	b.n	80045ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f9b2 	bl	8004900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459c:	e007      	b.n	80045ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9ae 	bl	8004900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80045ac:	e193      	b.n	80048d6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ae:	bf00      	nop
    return;
 80045b0:	e191      	b.n	80048d6 <HAL_UART_IRQHandler+0x5ba>
 80045b2:	bf00      	nop
 80045b4:	04000120 	.word	0x04000120
 80045b8:	080053c9 	.word	0x080053c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f040 814c 	bne.w	800485e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8145 	beq.w	800485e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 813e 	beq.w	800485e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2210      	movs	r2, #16
 80045e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	f040 80b6 	bne.w	8004766 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004606:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8165 	beq.w	80048da <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800461a:	429a      	cmp	r2, r3
 800461c:	f080 815d 	bcs.w	80048da <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004626:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004634:	f000 8086 	beq.w	8004744 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800464c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004666:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800466e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800467a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1da      	bne.n	8004638 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e1      	bne.n	8004682 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3308      	adds	r3, #8
 80046c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e3      	bne.n	80046be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004726:	65bb      	str	r3, [r7, #88]	; 0x58
 8004728:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800472c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e4      	bne.n	8004704 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473e:	4618      	mov	r0, r3
 8004740:	f7fc ff15 	bl	800156e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004756:	b29b      	uxth	r3, r3
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	b29b      	uxth	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8d8 	bl	8004914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004764:	e0b9      	b.n	80048da <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004772:	b29b      	uxth	r3, r3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80ab 	beq.w	80048de <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a6 	beq.w	80048de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	e853 3f00 	ldrex	r3, [r3]
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047b4:	647b      	str	r3, [r7, #68]	; 0x44
 80047b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e4      	bne.n	8004792 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	623b      	str	r3, [r7, #32]
   return(result);
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3308      	adds	r3, #8
 80047e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047ec:	633a      	str	r2, [r7, #48]	; 0x30
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e3      	bne.n	80047c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	60fb      	str	r3, [r7, #12]
   return(result);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f023 0310 	bic.w	r3, r3, #16
 8004828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	69b9      	ldr	r1, [r7, #24]
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	617b      	str	r3, [r7, #20]
   return(result);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e4      	bne.n	8004814 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004854:	4619      	mov	r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f85c 	bl	8004914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800485c:	e03f      	b.n	80048de <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800485e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00e      	beq.n	8004888 <HAL_UART_IRQHandler+0x56c>
 800486a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800487e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f853 	bl	800492c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004886:	e02d      	b.n	80048e4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00e      	beq.n	80048b2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01c      	beq.n	80048e2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
    }
    return;
 80048b0:	e017      	b.n	80048e2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d012      	beq.n	80048e4 <HAL_UART_IRQHandler+0x5c8>
 80048be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fd92 	bl	80053f4 <UART_EndTransmit_IT>
    return;
 80048d0:	e008      	b.n	80048e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80048d2:	bf00      	nop
 80048d4:	e006      	b.n	80048e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80048d6:	bf00      	nop
 80048d8:	e004      	b.n	80048e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80048da:	bf00      	nop
 80048dc:	e002      	b.n	80048e4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80048e2:	bf00      	nop
  }

}
 80048e4:	37e8      	adds	r7, #232	; 0xe8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop

080048ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4ba6      	ldr	r3, [pc, #664]	; (8004c04 <UART_SetConfig+0x2c4>)
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	6979      	ldr	r1, [r7, #20]
 8004974:	430b      	orrs	r3, r1
 8004976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a94      	ldr	r2, [pc, #592]	; (8004c08 <UART_SetConfig+0x2c8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d120      	bne.n	80049fe <UART_SetConfig+0xbe>
 80049bc:	4b93      	ldr	r3, [pc, #588]	; (8004c0c <UART_SetConfig+0x2cc>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d816      	bhi.n	80049f8 <UART_SetConfig+0xb8>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0x90>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	080049ed 	.word	0x080049ed
 80049d8:	080049e7 	.word	0x080049e7
 80049dc:	080049f3 	.word	0x080049f3
 80049e0:	2301      	movs	r3, #1
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e150      	b.n	8004c88 <UART_SetConfig+0x348>
 80049e6:	2302      	movs	r3, #2
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e14d      	b.n	8004c88 <UART_SetConfig+0x348>
 80049ec:	2304      	movs	r3, #4
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e14a      	b.n	8004c88 <UART_SetConfig+0x348>
 80049f2:	2308      	movs	r3, #8
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e147      	b.n	8004c88 <UART_SetConfig+0x348>
 80049f8:	2310      	movs	r3, #16
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e144      	b.n	8004c88 <UART_SetConfig+0x348>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a83      	ldr	r2, [pc, #524]	; (8004c10 <UART_SetConfig+0x2d0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d132      	bne.n	8004a6e <UART_SetConfig+0x12e>
 8004a08:	4b80      	ldr	r3, [pc, #512]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d828      	bhi.n	8004a68 <UART_SetConfig+0x128>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0xdc>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a69 	.word	0x08004a69
 8004a24:	08004a69 	.word	0x08004a69
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a5d 	.word	0x08004a5d
 8004a30:	08004a69 	.word	0x08004a69
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004a69 	.word	0x08004a69
 8004a3c:	08004a57 	.word	0x08004a57
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a69 	.word	0x08004a69
 8004a4c:	08004a63 	.word	0x08004a63
 8004a50:	2300      	movs	r3, #0
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e118      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a56:	2302      	movs	r3, #2
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e115      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e112      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a62:	2308      	movs	r3, #8
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e10f      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e10c      	b.n	8004c88 <UART_SetConfig+0x348>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a68      	ldr	r2, [pc, #416]	; (8004c14 <UART_SetConfig+0x2d4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d120      	bne.n	8004aba <UART_SetConfig+0x17a>
 8004a78:	4b64      	ldr	r3, [pc, #400]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a82:	2b30      	cmp	r3, #48	; 0x30
 8004a84:	d013      	beq.n	8004aae <UART_SetConfig+0x16e>
 8004a86:	2b30      	cmp	r3, #48	; 0x30
 8004a88:	d814      	bhi.n	8004ab4 <UART_SetConfig+0x174>
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d009      	beq.n	8004aa2 <UART_SetConfig+0x162>
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d810      	bhi.n	8004ab4 <UART_SetConfig+0x174>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <UART_SetConfig+0x15c>
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d006      	beq.n	8004aa8 <UART_SetConfig+0x168>
 8004a9a:	e00b      	b.n	8004ab4 <UART_SetConfig+0x174>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e0f2      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e0ef      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e0ec      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aae:	2308      	movs	r3, #8
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e0e9      	b.n	8004c88 <UART_SetConfig+0x348>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e0e6      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a56      	ldr	r2, [pc, #344]	; (8004c18 <UART_SetConfig+0x2d8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d120      	bne.n	8004b06 <UART_SetConfig+0x1c6>
 8004ac4:	4b51      	ldr	r3, [pc, #324]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ace:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad0:	d013      	beq.n	8004afa <UART_SetConfig+0x1ba>
 8004ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad4:	d814      	bhi.n	8004b00 <UART_SetConfig+0x1c0>
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d009      	beq.n	8004aee <UART_SetConfig+0x1ae>
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d810      	bhi.n	8004b00 <UART_SetConfig+0x1c0>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <UART_SetConfig+0x1a8>
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d006      	beq.n	8004af4 <UART_SetConfig+0x1b4>
 8004ae6:	e00b      	b.n	8004b00 <UART_SetConfig+0x1c0>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e0cc      	b.n	8004c88 <UART_SetConfig+0x348>
 8004aee:	2302      	movs	r3, #2
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e0c9      	b.n	8004c88 <UART_SetConfig+0x348>
 8004af4:	2304      	movs	r3, #4
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e0c6      	b.n	8004c88 <UART_SetConfig+0x348>
 8004afa:	2308      	movs	r3, #8
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e0c3      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b00:	2310      	movs	r3, #16
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e0c0      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a44      	ldr	r2, [pc, #272]	; (8004c1c <UART_SetConfig+0x2dc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d125      	bne.n	8004b5c <UART_SetConfig+0x21c>
 8004b10:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1e:	d017      	beq.n	8004b50 <UART_SetConfig+0x210>
 8004b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b24:	d817      	bhi.n	8004b56 <UART_SetConfig+0x216>
 8004b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2a:	d00b      	beq.n	8004b44 <UART_SetConfig+0x204>
 8004b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b30:	d811      	bhi.n	8004b56 <UART_SetConfig+0x216>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <UART_SetConfig+0x1fe>
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d006      	beq.n	8004b4a <UART_SetConfig+0x20a>
 8004b3c:	e00b      	b.n	8004b56 <UART_SetConfig+0x216>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e0a1      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b44:	2302      	movs	r3, #2
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e09e      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b4a:	2304      	movs	r3, #4
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e09b      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b50:	2308      	movs	r3, #8
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e098      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b56:	2310      	movs	r3, #16
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e095      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <UART_SetConfig+0x2e0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d125      	bne.n	8004bb2 <UART_SetConfig+0x272>
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b74:	d017      	beq.n	8004ba6 <UART_SetConfig+0x266>
 8004b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7a:	d817      	bhi.n	8004bac <UART_SetConfig+0x26c>
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b80:	d00b      	beq.n	8004b9a <UART_SetConfig+0x25a>
 8004b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b86:	d811      	bhi.n	8004bac <UART_SetConfig+0x26c>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <UART_SetConfig+0x254>
 8004b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b90:	d006      	beq.n	8004ba0 <UART_SetConfig+0x260>
 8004b92:	e00b      	b.n	8004bac <UART_SetConfig+0x26c>
 8004b94:	2301      	movs	r3, #1
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e076      	b.n	8004c88 <UART_SetConfig+0x348>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e073      	b.n	8004c88 <UART_SetConfig+0x348>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e070      	b.n	8004c88 <UART_SetConfig+0x348>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	e06d      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bac:	2310      	movs	r3, #16
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e06a      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <UART_SetConfig+0x2e4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d138      	bne.n	8004c2e <UART_SetConfig+0x2ee>
 8004bbc:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <UART_SetConfig+0x2cc>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bca:	d017      	beq.n	8004bfc <UART_SetConfig+0x2bc>
 8004bcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd0:	d82a      	bhi.n	8004c28 <UART_SetConfig+0x2e8>
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd6:	d00b      	beq.n	8004bf0 <UART_SetConfig+0x2b0>
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bdc:	d824      	bhi.n	8004c28 <UART_SetConfig+0x2e8>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <UART_SetConfig+0x2aa>
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	d006      	beq.n	8004bf6 <UART_SetConfig+0x2b6>
 8004be8:	e01e      	b.n	8004c28 <UART_SetConfig+0x2e8>
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e04b      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e048      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e045      	b.n	8004c88 <UART_SetConfig+0x348>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e042      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c02:	bf00      	nop
 8004c04:	efff69f3 	.word	0xefff69f3
 8004c08:	40011000 	.word	0x40011000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40004400 	.word	0x40004400
 8004c14:	40004800 	.word	0x40004800
 8004c18:	40004c00 	.word	0x40004c00
 8004c1c:	40005000 	.word	0x40005000
 8004c20:	40011400 	.word	0x40011400
 8004c24:	40007800 	.word	0x40007800
 8004c28:	2310      	movs	r3, #16
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e02c      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a72      	ldr	r2, [pc, #456]	; (8004dfc <UART_SetConfig+0x4bc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d125      	bne.n	8004c84 <UART_SetConfig+0x344>
 8004c38:	4b71      	ldr	r3, [pc, #452]	; (8004e00 <UART_SetConfig+0x4c0>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c46:	d017      	beq.n	8004c78 <UART_SetConfig+0x338>
 8004c48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c4c:	d817      	bhi.n	8004c7e <UART_SetConfig+0x33e>
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c52:	d00b      	beq.n	8004c6c <UART_SetConfig+0x32c>
 8004c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c58:	d811      	bhi.n	8004c7e <UART_SetConfig+0x33e>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <UART_SetConfig+0x326>
 8004c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c62:	d006      	beq.n	8004c72 <UART_SetConfig+0x332>
 8004c64:	e00b      	b.n	8004c7e <UART_SetConfig+0x33e>
 8004c66:	2300      	movs	r3, #0
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e00d      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e00a      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c72:	2304      	movs	r3, #4
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e007      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e004      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c7e:	2310      	movs	r3, #16
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e001      	b.n	8004c88 <UART_SetConfig+0x348>
 8004c84:	2310      	movs	r3, #16
 8004c86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d15b      	bne.n	8004d4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c92:	7ffb      	ldrb	r3, [r7, #31]
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d828      	bhi.n	8004cea <UART_SetConfig+0x3aa>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <UART_SetConfig+0x360>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cc5 	.word	0x08004cc5
 8004ca4:	08004ccd 	.word	0x08004ccd
 8004ca8:	08004cd5 	.word	0x08004cd5
 8004cac:	08004ceb 	.word	0x08004ceb
 8004cb0:	08004cdb 	.word	0x08004cdb
 8004cb4:	08004ceb 	.word	0x08004ceb
 8004cb8:	08004ceb 	.word	0x08004ceb
 8004cbc:	08004ceb 	.word	0x08004ceb
 8004cc0:	08004ce3 	.word	0x08004ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc4:	f7fe fdc4 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8004cc8:	61b8      	str	r0, [r7, #24]
        break;
 8004cca:	e013      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ccc:	f7fe fdd4 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 8004cd0:	61b8      	str	r0, [r7, #24]
        break;
 8004cd2:	e00f      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd4:	4b4b      	ldr	r3, [pc, #300]	; (8004e04 <UART_SetConfig+0x4c4>)
 8004cd6:	61bb      	str	r3, [r7, #24]
        break;
 8004cd8:	e00c      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cda:	f7fe fca7 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8004cde:	61b8      	str	r0, [r7, #24]
        break;
 8004ce0:	e008      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce6:	61bb      	str	r3, [r7, #24]
        break;
 8004ce8:	e004      	b.n	8004cf4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8004cf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d074      	beq.n	8004de4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	005a      	lsls	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	085b      	lsrs	r3, r3, #1
 8004d04:	441a      	add	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	2b0f      	cmp	r3, #15
 8004d14:	d916      	bls.n	8004d44 <UART_SetConfig+0x404>
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1c:	d212      	bcs.n	8004d44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f023 030f 	bic.w	r3, r3, #15
 8004d26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	89fb      	ldrh	r3, [r7, #14]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	89fa      	ldrh	r2, [r7, #14]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	e04f      	b.n	8004de4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	77bb      	strb	r3, [r7, #30]
 8004d48:	e04c      	b.n	8004de4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d4a:	7ffb      	ldrb	r3, [r7, #31]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d828      	bhi.n	8004da2 <UART_SetConfig+0x462>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x418>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004da3 	.word	0x08004da3
 8004d68:	08004d93 	.word	0x08004d93
 8004d6c:	08004da3 	.word	0x08004da3
 8004d70:	08004da3 	.word	0x08004da3
 8004d74:	08004da3 	.word	0x08004da3
 8004d78:	08004d9b 	.word	0x08004d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7fe fd68 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 8004d80:	61b8      	str	r0, [r7, #24]
        break;
 8004d82:	e013      	b.n	8004dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d84:	f7fe fd78 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 8004d88:	61b8      	str	r0, [r7, #24]
        break;
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d8c:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <UART_SetConfig+0x4c4>)
 8004d8e:	61bb      	str	r3, [r7, #24]
        break;
 8004d90:	e00c      	b.n	8004dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d92:	f7fe fc4b 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8004d96:	61b8      	str	r0, [r7, #24]
        break;
 8004d98:	e008      	b.n	8004dac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9e:	61bb      	str	r3, [r7, #24]
        break;
 8004da0:	e004      	b.n	8004dac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	77bb      	strb	r3, [r7, #30]
        break;
 8004daa:	bf00      	nop
    }

    if (pclk != 0U)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d018      	beq.n	8004de4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	085a      	lsrs	r2, r3, #1
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	441a      	add	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b0f      	cmp	r3, #15
 8004dca:	d909      	bls.n	8004de0 <UART_SetConfig+0x4a0>
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d205      	bcs.n	8004de0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	e001      	b.n	8004de4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004df0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40007c00 	.word	0x40007c00
 8004e00:	40023800 	.word	0x40023800
 8004e04:	00f42400 	.word	0x00f42400

08004e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f06:	d10a      	bne.n	8004f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f5c:	f7fc f9c6 	bl	80012ec <HAL_GetTick>
 8004f60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d10e      	bne.n	8004f8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f831 	bl	8004fe6 <UART_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e027      	b.n	8004fde <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d10e      	bne.n	8004fba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f81b 	bl	8004fe6 <UART_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e011      	b.n	8004fde <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b09c      	sub	sp, #112	; 0x70
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff6:	e0a7      	b.n	8005148 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	f000 80a3 	beq.w	8005148 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fc f973 	bl	80012ec <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <UART_WaitOnFlagUntilTimeout+0x32>
 8005012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005014:	2b00      	cmp	r3, #0
 8005016:	d13f      	bne.n	8005098 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800502c:	667b      	str	r3, [r7, #100]	; 0x64
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005038:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800503c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e6      	bne.n	8005018 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3308      	adds	r3, #8
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	663b      	str	r3, [r7, #96]	; 0x60
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3308      	adds	r3, #8
 8005068:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800506a:	64ba      	str	r2, [r7, #72]	; 0x48
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e5      	bne.n	800504a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e068      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d050      	beq.n	8005148 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b4:	d148      	bne.n	8005148 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
 80050e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e6      	bne.n	80050c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3308      	adds	r3, #8
 80050f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	613b      	str	r3, [r7, #16]
   return(result);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	66bb      	str	r3, [r7, #104]	; 0x68
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005112:	623a      	str	r2, [r7, #32]
 8005114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	69f9      	ldr	r1, [r7, #28]
 8005118:	6a3a      	ldr	r2, [r7, #32]
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e5      	bne.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e010      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69da      	ldr	r2, [r3, #28]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4013      	ands	r3, r2
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	429a      	cmp	r2, r3
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	429a      	cmp	r2, r3
 8005164:	f43f af48 	beq.w	8004ff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3770      	adds	r7, #112	; 0x70
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005174:	b480      	push	{r7}
 8005176:	b097      	sub	sp, #92	; 0x5c
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	88fa      	ldrh	r2, [r7, #6]
 8005194:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a6:	d10e      	bne.n	80051c6 <UART_Start_Receive_IT+0x52>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d105      	bne.n	80051bc <UART_Start_Receive_IT+0x48>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80051b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051ba:	e02d      	b.n	8005218 <UART_Start_Receive_IT+0xa4>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	22ff      	movs	r2, #255	; 0xff
 80051c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051c4:	e028      	b.n	8005218 <UART_Start_Receive_IT+0xa4>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10d      	bne.n	80051ea <UART_Start_Receive_IT+0x76>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <UART_Start_Receive_IT+0x6c>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	22ff      	movs	r2, #255	; 0xff
 80051da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051de:	e01b      	b.n	8005218 <UART_Start_Receive_IT+0xa4>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	227f      	movs	r2, #127	; 0x7f
 80051e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051e8:	e016      	b.n	8005218 <UART_Start_Receive_IT+0xa4>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051f2:	d10d      	bne.n	8005210 <UART_Start_Receive_IT+0x9c>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d104      	bne.n	8005206 <UART_Start_Receive_IT+0x92>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	227f      	movs	r2, #127	; 0x7f
 8005200:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005204:	e008      	b.n	8005218 <UART_Start_Receive_IT+0xa4>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	223f      	movs	r2, #63	; 0x3f
 800520a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800520e:	e003      	b.n	8005218 <UART_Start_Receive_IT+0xa4>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2222      	movs	r2, #34	; 0x22
 8005224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	657b      	str	r3, [r7, #84]	; 0x54
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3308      	adds	r3, #8
 8005246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005248:	64ba      	str	r2, [r7, #72]	; 0x48
 800524a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800524e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e5      	bne.n	8005228 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005264:	d107      	bne.n	8005276 <UART_Start_Receive_IT+0x102>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <UART_Start_Receive_IT+0x184>)
 8005272:	669a      	str	r2, [r3, #104]	; 0x68
 8005274:	e002      	b.n	800527c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4a20      	ldr	r2, [pc, #128]	; (80052fc <UART_Start_Receive_IT+0x188>)
 800527a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d019      	beq.n	80052b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
 80052a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e6      	bne.n	8005284 <UART_Start_Receive_IT+0x110>
 80052b6:	e018      	b.n	80052ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	613b      	str	r3, [r7, #16]
   return(result);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f043 0320 	orr.w	r3, r3, #32
 80052cc:	653b      	str	r3, [r7, #80]	; 0x50
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	69f9      	ldr	r1, [r7, #28]
 80052dc:	6a3a      	ldr	r2, [r7, #32]
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e6      	bne.n	80052b8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	375c      	adds	r7, #92	; 0x5c
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	080055af 	.word	0x080055af
 80052fc:	08005449 	.word	0x08005449

08005300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005300:	b480      	push	{r7}
 8005302:	b095      	sub	sp, #84	; 0x54
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800531c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005326:	643b      	str	r3, [r7, #64]	; 0x40
 8005328:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800532c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e6      	bne.n	8005308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3308      	adds	r3, #8
 8005340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	61fb      	str	r3, [r7, #28]
   return(result);
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	64bb      	str	r3, [r7, #72]	; 0x48
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3308      	adds	r3, #8
 8005358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800535a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e5      	bne.n	800533a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005372:	2b01      	cmp	r3, #1
 8005374:	d118      	bne.n	80053a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	60bb      	str	r3, [r7, #8]
   return(result);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f023 0310 	bic.w	r3, r3, #16
 800538a:	647b      	str	r3, [r7, #68]	; 0x44
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6979      	ldr	r1, [r7, #20]
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	613b      	str	r3, [r7, #16]
   return(result);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053bc:	bf00      	nop
 80053be:	3754      	adds	r7, #84	; 0x54
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fa8a 	bl	8004900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	60bb      	str	r3, [r7, #8]
   return(result);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	61bb      	str	r3, [r7, #24]
 800541c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6979      	ldr	r1, [r7, #20]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	613b      	str	r3, [r7, #16]
   return(result);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e6      	bne.n	80053fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fa56 	bl	80048ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005440:	bf00      	nop
 8005442:	3720      	adds	r7, #32
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b096      	sub	sp, #88	; 0x58
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005456:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005460:	2b22      	cmp	r3, #34	; 0x22
 8005462:	f040 8098 	bne.w	8005596 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005470:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005474:	b2d9      	uxtb	r1, r3
 8005476:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800547a:	b2da      	uxtb	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	400a      	ands	r2, r1
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d17b      	bne.n	80055a6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054c2:	653b      	str	r3, [r7, #80]	; 0x50
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
 80054ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e6      	bne.n	80054ae <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3308      	adds	r3, #8
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	623b      	str	r3, [r7, #32]
   return(result);
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3308      	adds	r3, #8
 80054fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005500:	633a      	str	r2, [r7, #48]	; 0x30
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e5      	bne.n	80054e0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552c:	2b01      	cmp	r3, #1
 800552e:	d12e      	bne.n	800558e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	60fb      	str	r3, [r7, #12]
   return(result);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0310 	bic.w	r3, r3, #16
 800554a:	64bb      	str	r3, [r7, #72]	; 0x48
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	617b      	str	r3, [r7, #20]
   return(result);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e6      	bne.n	8005536 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b10      	cmp	r3, #16
 8005574:	d103      	bne.n	800557e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2210      	movs	r2, #16
 800557c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff f9c4 	bl	8004914 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800558c:	e00b      	b.n	80055a6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fb f89e 	bl	80006d0 <HAL_UART_RxCpltCallback>
}
 8005594:	e007      	b.n	80055a6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699a      	ldr	r2, [r3, #24]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0208 	orr.w	r2, r2, #8
 80055a4:	619a      	str	r2, [r3, #24]
}
 80055a6:	bf00      	nop
 80055a8:	3758      	adds	r7, #88	; 0x58
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b096      	sub	sp, #88	; 0x58
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c6:	2b22      	cmp	r3, #34	; 0x22
 80055c8:	f040 8098 	bne.w	80056fc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80055dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80055e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055e4:	4013      	ands	r3, r2
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d17b      	bne.n	800570c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005632:	643b      	str	r3, [r7, #64]	; 0x40
 8005634:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3308      	adds	r3, #8
 800564c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	61fb      	str	r3, [r7, #28]
   return(result);
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	64bb      	str	r3, [r7, #72]	; 0x48
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3308      	adds	r3, #8
 8005664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800566c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e5      	bne.n	8005646 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	2b01      	cmp	r3, #1
 8005694:	d12e      	bne.n	80056f4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f023 0310 	bic.w	r3, r3, #16
 80056b0:	647b      	str	r3, [r7, #68]	; 0x44
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	613b      	str	r3, [r7, #16]
   return(result);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e6      	bne.n	800569c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d103      	bne.n	80056e4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2210      	movs	r2, #16
 80056e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff f911 	bl	8004914 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056f2:	e00b      	b.n	800570c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fa ffeb 	bl	80006d0 <HAL_UART_RxCpltCallback>
}
 80056fa:	e007      	b.n	800570c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0208 	orr.w	r2, r2, #8
 800570a:	619a      	str	r2, [r3, #24]
}
 800570c:	bf00      	nop
 800570e:	3758      	adds	r7, #88	; 0x58
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005726:	2b84      	cmp	r3, #132	; 0x84
 8005728:	d005      	beq.n	8005736 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800572a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	3303      	adds	r3, #3
 8005734:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005748:	f000 ffa4 	bl	8006694 <vTaskStartScheduler>
  
  return osOK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	bd80      	pop	{r7, pc}

08005752 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005752:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005754:	b089      	sub	sp, #36	; 0x24
 8005756:	af04      	add	r7, sp, #16
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d020      	beq.n	80057a6 <osThreadCreate+0x54>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01c      	beq.n	80057a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685c      	ldr	r4, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681d      	ldr	r5, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691e      	ldr	r6, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ffc8 	bl	8005714 <makeFreeRtosPriority>
 8005784:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800578e:	9202      	str	r2, [sp, #8]
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	9100      	str	r1, [sp, #0]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	4632      	mov	r2, r6
 8005798:	4629      	mov	r1, r5
 800579a:	4620      	mov	r0, r4
 800579c:	f000 fda8 	bl	80062f0 <xTaskCreateStatic>
 80057a0:	4603      	mov	r3, r0
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e01c      	b.n	80057e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685c      	ldr	r4, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057b2:	b29e      	uxth	r6, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff ffaa 	bl	8005714 <makeFreeRtosPriority>
 80057c0:	4602      	mov	r2, r0
 80057c2:	f107 030c 	add.w	r3, r7, #12
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	9200      	str	r2, [sp, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	4632      	mov	r2, r6
 80057ce:	4629      	mov	r1, r5
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 fdf0 	bl	80063b6 <xTaskCreate>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d001      	beq.n	80057e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	e000      	b.n	80057e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80057e0:	68fb      	ldr	r3, [r7, #12]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <osDelay+0x16>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	e000      	b.n	8005802 <osDelay+0x18>
 8005800:	2301      	movs	r3, #1
 8005802:	4618      	mov	r0, r3
 8005804:	f000 ff10 	bl	8006628 <vTaskDelay>
  
  return osOK;
 8005808:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f103 0208 	add.w	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f04f 32ff 	mov.w	r2, #4294967295
 800582a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f103 0208 	add.w	r2, r3, #8
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f103 0208 	add.w	r2, r3, #8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ca:	d103      	bne.n	80058d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e00c      	b.n	80058ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3308      	adds	r3, #8
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e002      	b.n	80058e2 <vListInsert+0x2e>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d2f6      	bcs.n	80058dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6892      	ldr	r2, [r2, #8]
 800593c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6852      	ldr	r2, [r2, #4]
 8005946:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	429a      	cmp	r2, r3
 8005950:	d103      	bne.n	800595a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	1e5a      	subs	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
	...

0800597c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10c      	bne.n	80059aa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	b672      	cpsid	i
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	b662      	cpsie	i
 80059a4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80059aa:	f001 fdcf 	bl	800754c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059ba:	fb01 f303 	mul.w	r3, r1, r3
 80059be:	441a      	add	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	3b01      	subs	r3, #1
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	441a      	add	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	22ff      	movs	r2, #255	; 0xff
 80059ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	22ff      	movs	r2, #255	; 0xff
 80059f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d114      	bne.n	8005a2a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01a      	beq.n	8005a3e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3310      	adds	r3, #16
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 f88f 	bl	8006b30 <xTaskRemoveFromEventList>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d012      	beq.n	8005a3e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <xQueueGenericReset+0xd0>)
 8005a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	e009      	b.n	8005a3e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3310      	adds	r3, #16
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff feef 	bl	8005812 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3324      	adds	r3, #36	; 0x24
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff feea 	bl	8005812 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a3e:	f001 fdb9 	bl	80075b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a42:	2301      	movs	r3, #1
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10c      	bne.n	8005a7e <xQueueGenericCreate+0x2e>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	b672      	cpsid	i
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	b662      	cpsie	i
 8005a78:	613b      	str	r3, [r7, #16]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e004      	b.n	8005a94 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	fb02 f303 	mul.w	r3, r2, r3
 8005a92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	3348      	adds	r3, #72	; 0x48
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fe83 	bl	80077a4 <pvPortMalloc>
 8005a9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d011      	beq.n	8005aca <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	3348      	adds	r3, #72	; 0x48
 8005aae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ab8:	79fa      	ldrb	r2, [r7, #7]
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	68b9      	ldr	r1, [r7, #8]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f805 	bl	8005ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aca:	69bb      	ldr	r3, [r7, #24]
	}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b02:	2101      	movs	r1, #1
 8005b04:	69b8      	ldr	r0, [r7, #24]
 8005b06:	f7ff ff39 	bl	800597c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00e      	beq.n	8005b3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b32:	2300      	movs	r3, #0
 8005b34:	2200      	movs	r2, #0
 8005b36:	2100      	movs	r1, #0
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f81d 	bl	8005b78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b086      	sub	sp, #24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	2300      	movs	r3, #0
 8005b56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6939      	ldr	r1, [r7, #16]
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7ff ff76 	bl	8005a50 <xQueueGenericCreate>
 8005b64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff ffd3 	bl	8005b12 <prvInitialiseMutex>

		return xNewQueue;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08e      	sub	sp, #56	; 0x38
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b86:	2300      	movs	r3, #0
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10c      	bne.n	8005bae <xQueueGenericSend+0x36>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	b672      	cpsid	i
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	b662      	cpsie	i
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d103      	bne.n	8005bbc <xQueueGenericSend+0x44>
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <xQueueGenericSend+0x48>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <xQueueGenericSend+0x4a>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10c      	bne.n	8005be0 <xQueueGenericSend+0x68>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	b672      	cpsid	i
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	b662      	cpsie	i
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d103      	bne.n	8005bee <xQueueGenericSend+0x76>
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <xQueueGenericSend+0x7a>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <xQueueGenericSend+0x7c>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10c      	bne.n	8005c12 <xQueueGenericSend+0x9a>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	b672      	cpsid	i
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	b662      	cpsie	i
 8005c0c:	623b      	str	r3, [r7, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c12:	f001 f951 	bl	8006eb8 <xTaskGetSchedulerState>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <xQueueGenericSend+0xaa>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <xQueueGenericSend+0xae>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <xQueueGenericSend+0xb0>
 8005c26:	2300      	movs	r3, #0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10c      	bne.n	8005c46 <xQueueGenericSend+0xce>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	b672      	cpsid	i
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	b662      	cpsie	i
 8005c40:	61fb      	str	r3, [r7, #28]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c46:	f001 fc81 	bl	800754c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d302      	bcc.n	8005c5c <xQueueGenericSend+0xe4>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d129      	bne.n	8005cb0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c62:	f000 fa5b 	bl	800611c <prvCopyDataToQueue>
 8005c66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d010      	beq.n	8005c92 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	3324      	adds	r3, #36	; 0x24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 ff5b 	bl	8006b30 <xTaskRemoveFromEventList>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d013      	beq.n	8005ca8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c80:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <xQueueGenericSend+0x208>)
 8005c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	e00a      	b.n	8005ca8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c98:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <xQueueGenericSend+0x208>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ca8:	f001 fc84 	bl	80075b4 <vPortExitCritical>
				return pdPASS;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e063      	b.n	8005d78 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d103      	bne.n	8005cbe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cb6:	f001 fc7d 	bl	80075b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e05c      	b.n	8005d78 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cc4:	f107 0314 	add.w	r3, r7, #20
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 ff95 	bl	8006bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cd2:	f001 fc6f 	bl	80075b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cd6:	f000 fd41 	bl	800675c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cda:	f001 fc37 	bl	800754c <vPortEnterCritical>
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ce4:	b25b      	sxtb	r3, r3
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d103      	bne.n	8005cf4 <xQueueGenericSend+0x17c>
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cfa:	b25b      	sxtb	r3, r3
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d103      	bne.n	8005d0a <xQueueGenericSend+0x192>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d0a:	f001 fc53 	bl	80075b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d0e:	1d3a      	adds	r2, r7, #4
 8005d10:	f107 0314 	add.w	r3, r7, #20
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 ff84 	bl	8006c24 <xTaskCheckForTimeOut>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d124      	bne.n	8005d6c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d24:	f000 facc 	bl	80062c0 <prvIsQueueFull>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d018      	beq.n	8005d60 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	3310      	adds	r3, #16
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4611      	mov	r1, r2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fed4 	bl	8006ae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d3e:	f000 fa57 	bl	80061f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d42:	f000 fd19 	bl	8006778 <xTaskResumeAll>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f47f af7c 	bne.w	8005c46 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <xQueueGenericSend+0x208>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	e772      	b.n	8005c46 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d62:	f000 fa45 	bl	80061f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d66:	f000 fd07 	bl	8006778 <xTaskResumeAll>
 8005d6a:	e76c      	b.n	8005c46 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6e:	f000 fa3f 	bl	80061f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d72:	f000 fd01 	bl	8006778 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3738      	adds	r7, #56	; 0x38
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08e      	sub	sp, #56	; 0x38
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10c      	bne.n	8005db6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	b672      	cpsid	i
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	b662      	cpsie	i
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d103      	bne.n	8005dc4 <xQueueGenericSendFromISR+0x40>
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <xQueueGenericSendFromISR+0x44>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <xQueueGenericSendFromISR+0x46>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10c      	bne.n	8005de8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	b672      	cpsid	i
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	b662      	cpsie	i
 8005de2:	623b      	str	r3, [r7, #32]
}
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d103      	bne.n	8005df6 <xQueueGenericSendFromISR+0x72>
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <xQueueGenericSendFromISR+0x76>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <xQueueGenericSendFromISR+0x78>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10c      	bne.n	8005e1a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	b672      	cpsid	i
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	b662      	cpsie	i
 8005e14:	61fb      	str	r3, [r7, #28]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e1a:	f001 fc7f 	bl	800771c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	b672      	cpsid	i
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	b662      	cpsie	i
 8005e36:	61ba      	str	r2, [r7, #24]
 8005e38:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d302      	bcc.n	8005e50 <xQueueGenericSendFromISR+0xcc>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d12c      	bne.n	8005eaa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e60:	f000 f95c 	bl	800611c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e64:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d112      	bne.n	8005e94 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d016      	beq.n	8005ea4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	3324      	adds	r3, #36	; 0x24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fe58 	bl	8006b30 <xTaskRemoveFromEventList>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00e      	beq.n	8005ea4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00b      	beq.n	8005ea4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	e007      	b.n	8005ea4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e98:	3301      	adds	r3, #1
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	b25a      	sxtb	r2, r3
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ea8:	e001      	b.n	8005eae <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005eb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3738      	adds	r7, #56	; 0x38
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08e      	sub	sp, #56	; 0x38
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10c      	bne.n	8005efa <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	b672      	cpsid	i
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	b662      	cpsie	i
 8005ef4:	623b      	str	r3, [r7, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00c      	beq.n	8005f1c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	b672      	cpsid	i
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	b662      	cpsie	i
 8005f16:	61fb      	str	r3, [r7, #28]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f1c:	f000 ffcc 	bl	8006eb8 <xTaskGetSchedulerState>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d102      	bne.n	8005f2c <xQueueSemaphoreTake+0x68>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <xQueueSemaphoreTake+0x6c>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <xQueueSemaphoreTake+0x6e>
 8005f30:	2300      	movs	r3, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10c      	bne.n	8005f50 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	b672      	cpsid	i
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	b662      	cpsie	i
 8005f4a:	61bb      	str	r3, [r7, #24]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f50:	f001 fafc 	bl	800754c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d024      	beq.n	8005faa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	1e5a      	subs	r2, r3, #1
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005f70:	f001 f968 	bl	8007244 <pvTaskIncrementMutexHeldCount>
 8005f74:	4602      	mov	r2, r0
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00f      	beq.n	8005fa2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	3310      	adds	r3, #16
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fdd2 	bl	8006b30 <xTaskRemoveFromEventList>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f92:	4b55      	ldr	r3, [pc, #340]	; (80060e8 <xQueueSemaphoreTake+0x224>)
 8005f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fa2:	f001 fb07 	bl	80075b4 <vPortExitCritical>
				return pdPASS;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e099      	b.n	80060de <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d113      	bne.n	8005fd8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	b672      	cpsid	i
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	b662      	cpsie	i
 8005fca:	617b      	str	r3, [r7, #20]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005fd0:	f001 faf0 	bl	80075b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e082      	b.n	80060de <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fde:	f107 030c 	add.w	r3, r7, #12
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fe08 	bl	8006bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fec:	f001 fae2 	bl	80075b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ff0:	f000 fbb4 	bl	800675c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ff4:	f001 faaa 	bl	800754c <vPortEnterCritical>
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ffe:	b25b      	sxtb	r3, r3
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006004:	d103      	bne.n	800600e <xQueueSemaphoreTake+0x14a>
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006014:	b25b      	sxtb	r3, r3
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	d103      	bne.n	8006024 <xQueueSemaphoreTake+0x160>
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006024:	f001 fac6 	bl	80075b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006028:	463a      	mov	r2, r7
 800602a:	f107 030c 	add.w	r3, r7, #12
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fdf7 	bl	8006c24 <xTaskCheckForTimeOut>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d132      	bne.n	80060a2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800603c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800603e:	f000 f929 	bl	8006294 <prvIsQueueEmpty>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d026      	beq.n	8006096 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006050:	f001 fa7c 	bl	800754c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 ff4b 	bl	8006ef4 <xTaskPriorityInherit>
 800605e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006060:	f001 faa8 	bl	80075b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	3324      	adds	r3, #36	; 0x24
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fd39 	bl	8006ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006074:	f000 f8bc 	bl	80061f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006078:	f000 fb7e 	bl	8006778 <xTaskResumeAll>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	f47f af66 	bne.w	8005f50 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006084:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <xQueueSemaphoreTake+0x224>)
 8006086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	e75c      	b.n	8005f50 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006098:	f000 f8aa 	bl	80061f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800609c:	f000 fb6c 	bl	8006778 <xTaskResumeAll>
 80060a0:	e756      	b.n	8005f50 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80060a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060a4:	f000 f8a4 	bl	80061f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060a8:	f000 fb66 	bl	8006778 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060ae:	f000 f8f1 	bl	8006294 <prvIsQueueEmpty>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f43f af4b 	beq.w	8005f50 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00d      	beq.n	80060dc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80060c0:	f001 fa44 	bl	800754c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80060c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060c6:	f000 f811 	bl	80060ec <prvGetDisinheritPriorityAfterTimeout>
 80060ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 f818 	bl	8007108 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80060d8:	f001 fa6c 	bl	80075b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3738      	adds	r7, #56	; 0x38
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d006      	beq.n	800610a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1c3 0307 	rsb	r3, r3, #7
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	e001      	b.n	800610e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800610e:	68fb      	ldr	r3, [r7, #12]
	}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10d      	bne.n	8006156 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d14d      	bne.n	80061de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 ff54 	bl	8006ff4 <xTaskPriorityDisinherit>
 800614c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	609a      	str	r2, [r3, #8]
 8006154:	e043      	b.n	80061de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d119      	bne.n	8006190 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6858      	ldr	r0, [r3, #4]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	461a      	mov	r2, r3
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	f001 fd5a 	bl	8007c20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	441a      	add	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	d32b      	bcc.n	80061de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	e026      	b.n	80061de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68d8      	ldr	r0, [r3, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	461a      	mov	r2, r3
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	f001 fd40 	bl	8007c20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	425b      	negs	r3, r3
 80061aa:	441a      	add	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d207      	bcs.n	80061cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	425b      	negs	r3, r3
 80061c6:	441a      	add	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d105      	bne.n	80061de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	3b01      	subs	r3, #1
 80061dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061e6:	697b      	ldr	r3, [r7, #20]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061f8:	f001 f9a8 	bl	800754c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006204:	e011      	b.n	800622a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d012      	beq.n	8006234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3324      	adds	r3, #36	; 0x24
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fc8c 	bl	8006b30 <xTaskRemoveFromEventList>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800621e:	f000 fd67 	bl	8006cf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	3b01      	subs	r3, #1
 8006226:	b2db      	uxtb	r3, r3
 8006228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800622a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800622e:	2b00      	cmp	r3, #0
 8006230:	dce9      	bgt.n	8006206 <prvUnlockQueue+0x16>
 8006232:	e000      	b.n	8006236 <prvUnlockQueue+0x46>
					break;
 8006234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	22ff      	movs	r2, #255	; 0xff
 800623a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800623e:	f001 f9b9 	bl	80075b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006242:	f001 f983 	bl	800754c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800624c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800624e:	e011      	b.n	8006274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d012      	beq.n	800627e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3310      	adds	r3, #16
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fc67 	bl	8006b30 <xTaskRemoveFromEventList>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006268:	f000 fd42 	bl	8006cf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	3b01      	subs	r3, #1
 8006270:	b2db      	uxtb	r3, r3
 8006272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dce9      	bgt.n	8006250 <prvUnlockQueue+0x60>
 800627c:	e000      	b.n	8006280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800627e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	22ff      	movs	r2, #255	; 0xff
 8006284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006288:	f001 f994 	bl	80075b4 <vPortExitCritical>
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800629c:	f001 f956 	bl	800754c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d102      	bne.n	80062ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e001      	b.n	80062b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062b2:	f001 f97f 	bl	80075b4 <vPortExitCritical>

	return xReturn;
 80062b6:	68fb      	ldr	r3, [r7, #12]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062c8:	f001 f940 	bl	800754c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d102      	bne.n	80062de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	e001      	b.n	80062e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062e2:	f001 f967 	bl	80075b4 <vPortExitCritical>

	return xReturn;
 80062e6:	68fb      	ldr	r3, [r7, #12]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08e      	sub	sp, #56	; 0x38
 80062f4:	af04      	add	r7, sp, #16
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10c      	bne.n	800631e <xTaskCreateStatic+0x2e>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	b672      	cpsid	i
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	b662      	cpsie	i
 8006318:	623b      	str	r3, [r7, #32]
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10c      	bne.n	800633e <xTaskCreateStatic+0x4e>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	b672      	cpsid	i
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	b662      	cpsie	i
 8006338:	61fb      	str	r3, [r7, #28]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800633e:	2354      	movs	r3, #84	; 0x54
 8006340:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b54      	cmp	r3, #84	; 0x54
 8006346:	d00c      	beq.n	8006362 <xTaskCreateStatic+0x72>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	b672      	cpsid	i
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	b662      	cpsie	i
 800635c:	61bb      	str	r3, [r7, #24]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006362:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01e      	beq.n	80063a8 <xTaskCreateStatic+0xb8>
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01b      	beq.n	80063a8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006378:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	2202      	movs	r2, #2
 800637e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006382:	2300      	movs	r3, #0
 8006384:	9303      	str	r3, [sp, #12]
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	9302      	str	r3, [sp, #8]
 800638a:	f107 0314 	add.w	r3, r7, #20
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f850 	bl	8006440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063a2:	f000 f8d7 	bl	8006554 <prvAddNewTaskToReadyList>
 80063a6:	e001      	b.n	80063ac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063ac:	697b      	ldr	r3, [r7, #20]
	}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3728      	adds	r7, #40	; 0x28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b08c      	sub	sp, #48	; 0x30
 80063ba:	af04      	add	r7, sp, #16
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 f9ea 	bl	80077a4 <pvPortMalloc>
 80063d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00e      	beq.n	80063f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063d8:	2054      	movs	r0, #84	; 0x54
 80063da:	f001 f9e3 	bl	80077a4 <pvPortMalloc>
 80063de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
 80063ec:	e005      	b.n	80063fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063ee:	6978      	ldr	r0, [r7, #20]
 80063f0:	f001 faa2 	bl	8007938 <vPortFree>
 80063f4:	e001      	b.n	80063fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d017      	beq.n	8006430 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006408:	88fa      	ldrh	r2, [r7, #6]
 800640a:	2300      	movs	r3, #0
 800640c:	9303      	str	r3, [sp, #12]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	9302      	str	r3, [sp, #8]
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f80e 	bl	8006440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006424:	69f8      	ldr	r0, [r7, #28]
 8006426:	f000 f895 	bl	8006554 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800642a:	2301      	movs	r3, #1
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	e002      	b.n	8006436 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006430:	f04f 33ff 	mov.w	r3, #4294967295
 8006434:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006436:	69bb      	ldr	r3, [r7, #24]
	}
 8006438:	4618      	mov	r0, r3
 800643a:	3720      	adds	r7, #32
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006458:	440b      	add	r3, r1
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f023 0307 	bic.w	r3, r3, #7
 8006466:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	b672      	cpsid	i
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	b662      	cpsie	i
 8006486:	617b      	str	r3, [r7, #20]
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01f      	beq.n	80064d2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e012      	b.n	80064be <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	7819      	ldrb	r1, [r3, #0]
 80064a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	3334      	adds	r3, #52	; 0x34
 80064a8:	460a      	mov	r2, r1
 80064aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	4413      	add	r3, r2
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d006      	beq.n	80064c6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	3301      	adds	r3, #1
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	2b0f      	cmp	r3, #15
 80064c2:	d9e9      	bls.n	8006498 <prvInitialiseNewTask+0x58>
 80064c4:	e000      	b.n	80064c8 <prvInitialiseNewTask+0x88>
			{
				break;
 80064c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d0:	e003      	b.n	80064da <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	2b06      	cmp	r3, #6
 80064de:	d901      	bls.n	80064e4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064e0:	2306      	movs	r3, #6
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	2200      	movs	r2, #0
 80064f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	3304      	adds	r3, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff f9a9 	bl	8005852 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	3318      	adds	r3, #24
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff f9a4 	bl	8005852 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	f1c3 0207 	rsb	r2, r3, #7
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	2200      	movs	r2, #0
 8006524:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	68f9      	ldr	r1, [r7, #12]
 8006532:	69b8      	ldr	r0, [r7, #24]
 8006534:	f000 ff00 	bl	8007338 <pxPortInitialiseStack>
 8006538:	4602      	mov	r2, r0
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006548:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800654a:	bf00      	nop
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800655c:	f000 fff6 	bl	800754c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006560:	4b2a      	ldr	r3, [pc, #168]	; (800660c <prvAddNewTaskToReadyList+0xb8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	4a29      	ldr	r2, [pc, #164]	; (800660c <prvAddNewTaskToReadyList+0xb8>)
 8006568:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800656a:	4b29      	ldr	r3, [pc, #164]	; (8006610 <prvAddNewTaskToReadyList+0xbc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006572:	4a27      	ldr	r2, [pc, #156]	; (8006610 <prvAddNewTaskToReadyList+0xbc>)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006578:	4b24      	ldr	r3, [pc, #144]	; (800660c <prvAddNewTaskToReadyList+0xb8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d110      	bne.n	80065a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006580:	f000 fbda 	bl	8006d38 <prvInitialiseTaskLists>
 8006584:	e00d      	b.n	80065a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006586:	4b23      	ldr	r3, [pc, #140]	; (8006614 <prvAddNewTaskToReadyList+0xc0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800658e:	4b20      	ldr	r3, [pc, #128]	; (8006610 <prvAddNewTaskToReadyList+0xbc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	429a      	cmp	r2, r3
 800659a:	d802      	bhi.n	80065a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800659c:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <prvAddNewTaskToReadyList+0xbc>)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065a2:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <prvAddNewTaskToReadyList+0xc4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3301      	adds	r3, #1
 80065a8:	4a1b      	ldr	r2, [pc, #108]	; (8006618 <prvAddNewTaskToReadyList+0xc4>)
 80065aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	2201      	movs	r2, #1
 80065b2:	409a      	lsls	r2, r3
 80065b4:	4b19      	ldr	r3, [pc, #100]	; (800661c <prvAddNewTaskToReadyList+0xc8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	4a18      	ldr	r2, [pc, #96]	; (800661c <prvAddNewTaskToReadyList+0xc8>)
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4a15      	ldr	r2, [pc, #84]	; (8006620 <prvAddNewTaskToReadyList+0xcc>)
 80065cc:	441a      	add	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f7ff f949 	bl	800586c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065da:	f000 ffeb 	bl	80075b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065de:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <prvAddNewTaskToReadyList+0xc0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00e      	beq.n	8006604 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065e6:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <prvAddNewTaskToReadyList+0xbc>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d207      	bcs.n	8006604 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <prvAddNewTaskToReadyList+0xd0>)
 80065f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	200007c8 	.word	0x200007c8
 8006610:	200006c8 	.word	0x200006c8
 8006614:	200007d4 	.word	0x200007d4
 8006618:	200007e4 	.word	0x200007e4
 800661c:	200007d0 	.word	0x200007d0
 8006620:	200006cc 	.word	0x200006cc
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d019      	beq.n	800666e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800663a:	4b14      	ldr	r3, [pc, #80]	; (800668c <vTaskDelay+0x64>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00c      	beq.n	800665c <vTaskDelay+0x34>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	b672      	cpsid	i
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	b662      	cpsie	i
 8006656:	60bb      	str	r3, [r7, #8]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800665c:	f000 f87e 	bl	800675c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006660:	2100      	movs	r1, #0
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fe02 	bl	800726c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006668:	f000 f886 	bl	8006778 <xTaskResumeAll>
 800666c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d107      	bne.n	8006684 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <vTaskDelay+0x68>)
 8006676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	200007f0 	.word	0x200007f0
 8006690:	e000ed04 	.word	0xe000ed04

08006694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	; 0x28
 8006698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800669a:	2300      	movs	r3, #0
 800669c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066a2:	463a      	mov	r2, r7
 80066a4:	1d39      	adds	r1, r7, #4
 80066a6:	f107 0308 	add.w	r3, r7, #8
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fa f8bc 	bl	8000828 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	9202      	str	r2, [sp, #8]
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	2300      	movs	r3, #0
 80066c0:	460a      	mov	r2, r1
 80066c2:	4920      	ldr	r1, [pc, #128]	; (8006744 <vTaskStartScheduler+0xb0>)
 80066c4:	4820      	ldr	r0, [pc, #128]	; (8006748 <vTaskStartScheduler+0xb4>)
 80066c6:	f7ff fe13 	bl	80062f0 <xTaskCreateStatic>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4a1f      	ldr	r2, [pc, #124]	; (800674c <vTaskStartScheduler+0xb8>)
 80066ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80066d0:	4b1e      	ldr	r3, [pc, #120]	; (800674c <vTaskStartScheduler+0xb8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80066d8:	2301      	movs	r3, #1
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e001      	b.n	80066e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d118      	bne.n	800671a <vTaskStartScheduler+0x86>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	b672      	cpsid	i
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	b662      	cpsie	i
 80066fc:	613b      	str	r3, [r7, #16]
}
 80066fe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006700:	4b13      	ldr	r3, [pc, #76]	; (8006750 <vTaskStartScheduler+0xbc>)
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006708:	4b12      	ldr	r3, [pc, #72]	; (8006754 <vTaskStartScheduler+0xc0>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <vTaskStartScheduler+0xc4>)
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006714:	f000 fe9c 	bl	8007450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006718:	e010      	b.n	800673c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d10c      	bne.n	800673c <vTaskStartScheduler+0xa8>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	b672      	cpsid	i
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	b662      	cpsie	i
 8006736:	60fb      	str	r3, [r7, #12]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <vTaskStartScheduler+0xa6>
}
 800673c:	bf00      	nop
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	08009024 	.word	0x08009024
 8006748:	08006d09 	.word	0x08006d09
 800674c:	200007ec 	.word	0x200007ec
 8006750:	200007e8 	.word	0x200007e8
 8006754:	200007d4 	.word	0x200007d4
 8006758:	200007cc 	.word	0x200007cc

0800675c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006760:	4b04      	ldr	r3, [pc, #16]	; (8006774 <vTaskSuspendAll+0x18>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	4a03      	ldr	r2, [pc, #12]	; (8006774 <vTaskSuspendAll+0x18>)
 8006768:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800676a:	bf00      	nop
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	200007f0 	.word	0x200007f0

08006778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006786:	4b42      	ldr	r3, [pc, #264]	; (8006890 <xTaskResumeAll+0x118>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10c      	bne.n	80067a8 <xTaskResumeAll+0x30>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	b672      	cpsid	i
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	b662      	cpsie	i
 80067a2:	603b      	str	r3, [r7, #0]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067a8:	f000 fed0 	bl	800754c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067ac:	4b38      	ldr	r3, [pc, #224]	; (8006890 <xTaskResumeAll+0x118>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	4a37      	ldr	r2, [pc, #220]	; (8006890 <xTaskResumeAll+0x118>)
 80067b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067b6:	4b36      	ldr	r3, [pc, #216]	; (8006890 <xTaskResumeAll+0x118>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d161      	bne.n	8006882 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067be:	4b35      	ldr	r3, [pc, #212]	; (8006894 <xTaskResumeAll+0x11c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d05d      	beq.n	8006882 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067c6:	e02e      	b.n	8006826 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c8:	4b33      	ldr	r3, [pc, #204]	; (8006898 <xTaskResumeAll+0x120>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3318      	adds	r3, #24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff f8a6 	bl	8005926 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3304      	adds	r3, #4
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff f8a1 	bl	8005926 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	2201      	movs	r2, #1
 80067ea:	409a      	lsls	r2, r3
 80067ec:	4b2b      	ldr	r3, [pc, #172]	; (800689c <xTaskResumeAll+0x124>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	4a2a      	ldr	r2, [pc, #168]	; (800689c <xTaskResumeAll+0x124>)
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4a27      	ldr	r2, [pc, #156]	; (80068a0 <xTaskResumeAll+0x128>)
 8006804:	441a      	add	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3304      	adds	r3, #4
 800680a:	4619      	mov	r1, r3
 800680c:	4610      	mov	r0, r2
 800680e:	f7ff f82d 	bl	800586c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006816:	4b23      	ldr	r3, [pc, #140]	; (80068a4 <xTaskResumeAll+0x12c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	429a      	cmp	r2, r3
 800681e:	d302      	bcc.n	8006826 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006820:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <xTaskResumeAll+0x130>)
 8006822:	2201      	movs	r2, #1
 8006824:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006826:	4b1c      	ldr	r3, [pc, #112]	; (8006898 <xTaskResumeAll+0x120>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1cc      	bne.n	80067c8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006834:	f000 fb20 	bl	8006e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006838:	4b1c      	ldr	r3, [pc, #112]	; (80068ac <xTaskResumeAll+0x134>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d010      	beq.n	8006866 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006844:	f000 f836 	bl	80068b4 <xTaskIncrementTick>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800684e:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <xTaskResumeAll+0x130>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3b01      	subs	r3, #1
 8006858:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f1      	bne.n	8006844 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006860:	4b12      	ldr	r3, [pc, #72]	; (80068ac <xTaskResumeAll+0x134>)
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006866:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <xTaskResumeAll+0x130>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d009      	beq.n	8006882 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800686e:	2301      	movs	r3, #1
 8006870:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006872:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <xTaskResumeAll+0x138>)
 8006874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006882:	f000 fe97 	bl	80075b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006886:	68bb      	ldr	r3, [r7, #8]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200007f0 	.word	0x200007f0
 8006894:	200007c8 	.word	0x200007c8
 8006898:	20000788 	.word	0x20000788
 800689c:	200007d0 	.word	0x200007d0
 80068a0:	200006cc 	.word	0x200006cc
 80068a4:	200006c8 	.word	0x200006c8
 80068a8:	200007dc 	.word	0x200007dc
 80068ac:	200007d8 	.word	0x200007d8
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068be:	4b4f      	ldr	r3, [pc, #316]	; (80069fc <xTaskIncrementTick+0x148>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f040 808a 	bne.w	80069dc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068c8:	4b4d      	ldr	r3, [pc, #308]	; (8006a00 <xTaskIncrementTick+0x14c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068d0:	4a4b      	ldr	r2, [pc, #300]	; (8006a00 <xTaskIncrementTick+0x14c>)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d122      	bne.n	8006922 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80068dc:	4b49      	ldr	r3, [pc, #292]	; (8006a04 <xTaskIncrementTick+0x150>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00c      	beq.n	8006900 <xTaskIncrementTick+0x4c>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	b672      	cpsid	i
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	b662      	cpsie	i
 80068fa:	603b      	str	r3, [r7, #0]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <xTaskIncrementTick+0x4a>
 8006900:	4b40      	ldr	r3, [pc, #256]	; (8006a04 <xTaskIncrementTick+0x150>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	4b40      	ldr	r3, [pc, #256]	; (8006a08 <xTaskIncrementTick+0x154>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a3e      	ldr	r2, [pc, #248]	; (8006a04 <xTaskIncrementTick+0x150>)
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4a3e      	ldr	r2, [pc, #248]	; (8006a08 <xTaskIncrementTick+0x154>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	4b3d      	ldr	r3, [pc, #244]	; (8006a0c <xTaskIncrementTick+0x158>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	4a3c      	ldr	r2, [pc, #240]	; (8006a0c <xTaskIncrementTick+0x158>)
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	f000 faab 	bl	8006e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006922:	4b3b      	ldr	r3, [pc, #236]	; (8006a10 <xTaskIncrementTick+0x15c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	429a      	cmp	r2, r3
 800692a:	d348      	bcc.n	80069be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800692c:	4b35      	ldr	r3, [pc, #212]	; (8006a04 <xTaskIncrementTick+0x150>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006936:	4b36      	ldr	r3, [pc, #216]	; (8006a10 <xTaskIncrementTick+0x15c>)
 8006938:	f04f 32ff 	mov.w	r2, #4294967295
 800693c:	601a      	str	r2, [r3, #0]
					break;
 800693e:	e03e      	b.n	80069be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006940:	4b30      	ldr	r3, [pc, #192]	; (8006a04 <xTaskIncrementTick+0x150>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d203      	bcs.n	8006960 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006958:	4a2d      	ldr	r2, [pc, #180]	; (8006a10 <xTaskIncrementTick+0x15c>)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800695e:	e02e      	b.n	80069be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	3304      	adds	r3, #4
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe ffde 	bl	8005926 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	3318      	adds	r3, #24
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe ffd5 	bl	8005926 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	2201      	movs	r2, #1
 8006982:	409a      	lsls	r2, r3
 8006984:	4b23      	ldr	r3, [pc, #140]	; (8006a14 <xTaskIncrementTick+0x160>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4313      	orrs	r3, r2
 800698a:	4a22      	ldr	r2, [pc, #136]	; (8006a14 <xTaskIncrementTick+0x160>)
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <xTaskIncrementTick+0x164>)
 800699c:	441a      	add	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7fe ff61 	bl	800586c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <xTaskIncrementTick+0x168>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d3b9      	bcc.n	800692c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80069b8:	2301      	movs	r3, #1
 80069ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069bc:	e7b6      	b.n	800692c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069be:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <xTaskIncrementTick+0x168>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	4914      	ldr	r1, [pc, #80]	; (8006a18 <xTaskIncrementTick+0x164>)
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d907      	bls.n	80069e6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80069d6:	2301      	movs	r3, #1
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	e004      	b.n	80069e6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80069dc:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <xTaskIncrementTick+0x16c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a0f      	ldr	r2, [pc, #60]	; (8006a20 <xTaskIncrementTick+0x16c>)
 80069e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80069e6:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <xTaskIncrementTick+0x170>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80069ee:	2301      	movs	r3, #1
 80069f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80069f2:	697b      	ldr	r3, [r7, #20]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200007f0 	.word	0x200007f0
 8006a00:	200007cc 	.word	0x200007cc
 8006a04:	20000780 	.word	0x20000780
 8006a08:	20000784 	.word	0x20000784
 8006a0c:	200007e0 	.word	0x200007e0
 8006a10:	200007e8 	.word	0x200007e8
 8006a14:	200007d0 	.word	0x200007d0
 8006a18:	200006cc 	.word	0x200006cc
 8006a1c:	200006c8 	.word	0x200006c8
 8006a20:	200007d8 	.word	0x200007d8
 8006a24:	200007dc 	.word	0x200007dc

08006a28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a2e:	4b28      	ldr	r3, [pc, #160]	; (8006ad0 <vTaskSwitchContext+0xa8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a36:	4b27      	ldr	r3, [pc, #156]	; (8006ad4 <vTaskSwitchContext+0xac>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a3c:	e041      	b.n	8006ac2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a3e:	4b25      	ldr	r3, [pc, #148]	; (8006ad4 <vTaskSwitchContext+0xac>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a44:	4b24      	ldr	r3, [pc, #144]	; (8006ad8 <vTaskSwitchContext+0xb0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	fab3 f383 	clz	r3, r3
 8006a50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006a52:	7afb      	ldrb	r3, [r7, #11]
 8006a54:	f1c3 031f 	rsb	r3, r3, #31
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	4920      	ldr	r1, [pc, #128]	; (8006adc <vTaskSwitchContext+0xb4>)
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10c      	bne.n	8006a88 <vTaskSwitchContext+0x60>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	b672      	cpsid	i
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	b662      	cpsie	i
 8006a82:	607b      	str	r3, [r7, #4]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <vTaskSwitchContext+0x5e>
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4a12      	ldr	r2, [pc, #72]	; (8006adc <vTaskSwitchContext+0xb4>)
 8006a94:	4413      	add	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	605a      	str	r2, [r3, #4]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d104      	bne.n	8006ab8 <vTaskSwitchContext+0x90>
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	605a      	str	r2, [r3, #4]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <vTaskSwitchContext+0xb8>)
 8006ac0:	6013      	str	r3, [r2, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	200007f0 	.word	0x200007f0
 8006ad4:	200007dc 	.word	0x200007dc
 8006ad8:	200007d0 	.word	0x200007d0
 8006adc:	200006cc 	.word	0x200006cc
 8006ae0:	200006c8 	.word	0x200006c8

08006ae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10c      	bne.n	8006b0e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	b672      	cpsid	i
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	b662      	cpsie	i
 8006b08:	60fb      	str	r3, [r7, #12]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b0e:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <vTaskPlaceOnEventList+0x48>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3318      	adds	r3, #24
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fe fecc 	bl	80058b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	6838      	ldr	r0, [r7, #0]
 8006b20:	f000 fba4 	bl	800726c <prvAddCurrentTaskToDelayedList>
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	200006c8 	.word	0x200006c8

08006b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10c      	bne.n	8006b60 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	b672      	cpsid	i
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	b662      	cpsie	i
 8006b5a:	60fb      	str	r3, [r7, #12]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	3318      	adds	r3, #24
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe fede 	bl	8005926 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <xTaskRemoveFromEventList+0xb0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d11c      	bne.n	8006bac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	3304      	adds	r3, #4
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fed5 	bl	8005926 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	2201      	movs	r2, #1
 8006b82:	409a      	lsls	r2, r3
 8006b84:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <xTaskRemoveFromEventList+0xb4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	4a16      	ldr	r2, [pc, #88]	; (8006be4 <xTaskRemoveFromEventList+0xb4>)
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <xTaskRemoveFromEventList+0xb8>)
 8006b9c:	441a      	add	r2, r3
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	f7fe fe61 	bl	800586c <vListInsertEnd>
 8006baa:	e005      	b.n	8006bb8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	3318      	adds	r3, #24
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	480e      	ldr	r0, [pc, #56]	; (8006bec <xTaskRemoveFromEventList+0xbc>)
 8006bb4:	f7fe fe5a 	bl	800586c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <xTaskRemoveFromEventList+0xc0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d905      	bls.n	8006bd2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bca:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <xTaskRemoveFromEventList+0xc4>)
 8006bcc:	2201      	movs	r2, #1
 8006bce:	601a      	str	r2, [r3, #0]
 8006bd0:	e001      	b.n	8006bd6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bd6:	697b      	ldr	r3, [r7, #20]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	200007f0 	.word	0x200007f0
 8006be4:	200007d0 	.word	0x200007d0
 8006be8:	200006cc 	.word	0x200006cc
 8006bec:	20000788 	.word	0x20000788
 8006bf0:	200006c8 	.word	0x200006c8
 8006bf4:	200007dc 	.word	0x200007dc

08006bf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <vTaskInternalSetTimeOutState+0x24>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <vTaskInternalSetTimeOutState+0x28>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	605a      	str	r2, [r3, #4]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	200007e0 	.word	0x200007e0
 8006c20:	200007cc 	.word	0x200007cc

08006c24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10c      	bne.n	8006c4e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	b672      	cpsid	i
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	b662      	cpsie	i
 8006c48:	613b      	str	r3, [r7, #16]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10c      	bne.n	8006c6e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	b672      	cpsid	i
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	b662      	cpsie	i
 8006c68:	60fb      	str	r3, [r7, #12]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006c6e:	f000 fc6d 	bl	800754c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c72:	4b1d      	ldr	r3, [pc, #116]	; (8006ce8 <xTaskCheckForTimeOut+0xc4>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	d102      	bne.n	8006c92 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e023      	b.n	8006cda <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <xTaskCheckForTimeOut+0xc8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d007      	beq.n	8006cae <xTaskCheckForTimeOut+0x8a>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d302      	bcc.n	8006cae <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e015      	b.n	8006cda <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d20b      	bcs.n	8006cd0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad2      	subs	r2, r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff ff97 	bl	8006bf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	e004      	b.n	8006cda <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cda:	f000 fc6b 	bl	80075b4 <vPortExitCritical>

	return xReturn;
 8006cde:	69fb      	ldr	r3, [r7, #28]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200007cc 	.word	0x200007cc
 8006cec:	200007e0 	.word	0x200007e0

08006cf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cf4:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <vTaskMissedYield+0x14>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	200007dc 	.word	0x200007dc

08006d08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d10:	f000 f852 	bl	8006db8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <prvIdleTask+0x28>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d9f9      	bls.n	8006d10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <prvIdleTask+0x2c>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d2c:	e7f0      	b.n	8006d10 <prvIdleTask+0x8>
 8006d2e:	bf00      	nop
 8006d30:	200006cc 	.word	0x200006cc
 8006d34:	e000ed04 	.word	0xe000ed04

08006d38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d3e:	2300      	movs	r3, #0
 8006d40:	607b      	str	r3, [r7, #4]
 8006d42:	e00c      	b.n	8006d5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <prvInitialiseTaskLists+0x60>)
 8006d50:	4413      	add	r3, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fd5d 	bl	8005812 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b06      	cmp	r3, #6
 8006d62:	d9ef      	bls.n	8006d44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d64:	480d      	ldr	r0, [pc, #52]	; (8006d9c <prvInitialiseTaskLists+0x64>)
 8006d66:	f7fe fd54 	bl	8005812 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d6a:	480d      	ldr	r0, [pc, #52]	; (8006da0 <prvInitialiseTaskLists+0x68>)
 8006d6c:	f7fe fd51 	bl	8005812 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d70:	480c      	ldr	r0, [pc, #48]	; (8006da4 <prvInitialiseTaskLists+0x6c>)
 8006d72:	f7fe fd4e 	bl	8005812 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d76:	480c      	ldr	r0, [pc, #48]	; (8006da8 <prvInitialiseTaskLists+0x70>)
 8006d78:	f7fe fd4b 	bl	8005812 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d7c:	480b      	ldr	r0, [pc, #44]	; (8006dac <prvInitialiseTaskLists+0x74>)
 8006d7e:	f7fe fd48 	bl	8005812 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d82:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <prvInitialiseTaskLists+0x78>)
 8006d84:	4a05      	ldr	r2, [pc, #20]	; (8006d9c <prvInitialiseTaskLists+0x64>)
 8006d86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <prvInitialiseTaskLists+0x7c>)
 8006d8a:	4a05      	ldr	r2, [pc, #20]	; (8006da0 <prvInitialiseTaskLists+0x68>)
 8006d8c:	601a      	str	r2, [r3, #0]
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200006cc 	.word	0x200006cc
 8006d9c:	20000758 	.word	0x20000758
 8006da0:	2000076c 	.word	0x2000076c
 8006da4:	20000788 	.word	0x20000788
 8006da8:	2000079c 	.word	0x2000079c
 8006dac:	200007b4 	.word	0x200007b4
 8006db0:	20000780 	.word	0x20000780
 8006db4:	20000784 	.word	0x20000784

08006db8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dbe:	e019      	b.n	8006df4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dc0:	f000 fbc4 	bl	800754c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc4:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <prvCheckTasksWaitingTermination+0x50>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fe fda8 	bl	8005926 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <prvCheckTasksWaitingTermination+0x54>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	4a0b      	ldr	r2, [pc, #44]	; (8006e0c <prvCheckTasksWaitingTermination+0x54>)
 8006dde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <prvCheckTasksWaitingTermination+0x58>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <prvCheckTasksWaitingTermination+0x58>)
 8006de8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dea:	f000 fbe3 	bl	80075b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f810 	bl	8006e14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006df4:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <prvCheckTasksWaitingTermination+0x58>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e1      	bne.n	8006dc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	2000079c 	.word	0x2000079c
 8006e0c:	200007c8 	.word	0x200007c8
 8006e10:	200007b0 	.word	0x200007b0

08006e14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d108      	bne.n	8006e38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fd84 	bl	8007938 <vPortFree>
				vPortFree( pxTCB );
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fd81 	bl	8007938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e36:	e01a      	b.n	8006e6e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d103      	bne.n	8006e4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fd78 	bl	8007938 <vPortFree>
	}
 8006e48:	e011      	b.n	8006e6e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d00c      	beq.n	8006e6e <prvDeleteTCB+0x5a>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	b672      	cpsid	i
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	b662      	cpsie	i
 8006e68:	60fb      	str	r3, [r7, #12]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <prvDeleteTCB+0x58>
	}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <prvResetNextTaskUnblockTime+0x38>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8006e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e90:	e008      	b.n	8006ea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <prvResetNextTaskUnblockTime+0x38>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8006ea2:	6013      	str	r3, [r2, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	20000780 	.word	0x20000780
 8006eb4:	200007e8 	.word	0x200007e8

08006eb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <xTaskGetSchedulerState+0x34>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d102      	bne.n	8006ecc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	607b      	str	r3, [r7, #4]
 8006eca:	e008      	b.n	8006ede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ecc:	4b08      	ldr	r3, [pc, #32]	; (8006ef0 <xTaskGetSchedulerState+0x38>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	e001      	b.n	8006ede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ede:	687b      	ldr	r3, [r7, #4]
	}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	200007d4 	.word	0x200007d4
 8006ef0:	200007f0 	.word	0x200007f0

08006ef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d069      	beq.n	8006fde <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0e:	4b36      	ldr	r3, [pc, #216]	; (8006fe8 <xTaskPriorityInherit+0xf4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d259      	bcs.n	8006fcc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	db06      	blt.n	8006f2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f20:	4b31      	ldr	r3, [pc, #196]	; (8006fe8 <xTaskPriorityInherit+0xf4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	f1c3 0207 	rsb	r2, r3, #7
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6959      	ldr	r1, [r3, #20]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4a2b      	ldr	r2, [pc, #172]	; (8006fec <xTaskPriorityInherit+0xf8>)
 8006f40:	4413      	add	r3, r2
 8006f42:	4299      	cmp	r1, r3
 8006f44:	d13a      	bne.n	8006fbc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fceb 	bl	8005926 <uxListRemove>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d115      	bne.n	8006f82 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5a:	4924      	ldr	r1, [pc, #144]	; (8006fec <xTaskPriorityInherit+0xf8>)
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xTaskPriorityInherit+0x8e>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	2201      	movs	r2, #1
 8006f72:	fa02 f303 	lsl.w	r3, r2, r3
 8006f76:	43da      	mvns	r2, r3
 8006f78:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <xTaskPriorityInherit+0xfc>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ff0 <xTaskPriorityInherit+0xfc>)
 8006f80:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f82:	4b19      	ldr	r3, [pc, #100]	; (8006fe8 <xTaskPriorityInherit+0xf4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	2201      	movs	r2, #1
 8006f92:	409a      	lsls	r2, r3
 8006f94:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <xTaskPriorityInherit+0xfc>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <xTaskPriorityInherit+0xfc>)
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4a10      	ldr	r2, [pc, #64]	; (8006fec <xTaskPriorityInherit+0xf8>)
 8006fac:	441a      	add	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f7fe fc59 	bl	800586c <vListInsertEnd>
 8006fba:	e004      	b.n	8006fc6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <xTaskPriorityInherit+0xf4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e008      	b.n	8006fde <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <xTaskPriorityInherit+0xf4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d201      	bcs.n	8006fde <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fde:	68fb      	ldr	r3, [r7, #12]
	}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	200006c8 	.word	0x200006c8
 8006fec:	200006cc 	.word	0x200006cc
 8006ff0:	200007d0 	.word	0x200007d0

08006ff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d072      	beq.n	80070f0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800700a:	4b3c      	ldr	r3, [pc, #240]	; (80070fc <xTaskPriorityDisinherit+0x108>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	429a      	cmp	r2, r3
 8007012:	d00c      	beq.n	800702e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	b672      	cpsid	i
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	b662      	cpsie	i
 8007028:	60fb      	str	r3, [r7, #12]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10c      	bne.n	8007050 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	b672      	cpsid	i
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	b662      	cpsie	i
 800704a:	60bb      	str	r3, [r7, #8]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007054:	1e5a      	subs	r2, r3, #1
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	429a      	cmp	r2, r3
 8007064:	d044      	beq.n	80070f0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706a:	2b00      	cmp	r3, #0
 800706c:	d140      	bne.n	80070f0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	3304      	adds	r3, #4
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe fc57 	bl	8005926 <uxListRemove>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d115      	bne.n	80070aa <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007082:	491f      	ldr	r1, [pc, #124]	; (8007100 <xTaskPriorityDisinherit+0x10c>)
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <xTaskPriorityDisinherit+0xb6>
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	2201      	movs	r2, #1
 800709a:	fa02 f303 	lsl.w	r3, r2, r3
 800709e:	43da      	mvns	r2, r3
 80070a0:	4b18      	ldr	r3, [pc, #96]	; (8007104 <xTaskPriorityDisinherit+0x110>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4013      	ands	r3, r2
 80070a6:	4a17      	ldr	r2, [pc, #92]	; (8007104 <xTaskPriorityDisinherit+0x110>)
 80070a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	f1c3 0207 	rsb	r2, r3, #7
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	2201      	movs	r2, #1
 80070c4:	409a      	lsls	r2, r3
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <xTaskPriorityDisinherit+0x110>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <xTaskPriorityDisinherit+0x110>)
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4a08      	ldr	r2, [pc, #32]	; (8007100 <xTaskPriorityDisinherit+0x10c>)
 80070de:	441a      	add	r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f7fe fbc0 	bl	800586c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070f0:	697b      	ldr	r3, [r7, #20]
	}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200006c8 	.word	0x200006c8
 8007100:	200006cc 	.word	0x200006cc
 8007104:	200007d0 	.word	0x200007d0

08007108 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007116:	2301      	movs	r3, #1
 8007118:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8087 	beq.w	8007230 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10c      	bne.n	8007144 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	b672      	cpsid	i
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	b662      	cpsie	i
 800713e:	60fb      	str	r3, [r7, #12]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d902      	bls.n	8007154 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e002      	b.n	800715a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007158:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	429a      	cmp	r2, r3
 8007162:	d065      	beq.n	8007230 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	429a      	cmp	r2, r3
 800716c:	d160      	bne.n	8007230 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800716e:	4b32      	ldr	r3, [pc, #200]	; (8007238 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	429a      	cmp	r2, r3
 8007176:	d10c      	bne.n	8007192 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717c:	b672      	cpsid	i
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	b662      	cpsie	i
 800718c:	60bb      	str	r3, [r7, #8]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007196:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	db04      	blt.n	80071b0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f1c3 0207 	rsb	r2, r3, #7
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	6959      	ldr	r1, [r3, #20]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4a1f      	ldr	r2, [pc, #124]	; (800723c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80071c0:	4413      	add	r3, r2
 80071c2:	4299      	cmp	r1, r3
 80071c4:	d134      	bne.n	8007230 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fbab 	bl	8005926 <uxListRemove>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d115      	bne.n	8007202 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071da:	4918      	ldr	r1, [pc, #96]	; (800723c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	2201      	movs	r2, #1
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	43da      	mvns	r2, r3
 80071f8:	4b11      	ldr	r3, [pc, #68]	; (8007240 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4013      	ands	r3, r2
 80071fe:	4a10      	ldr	r2, [pc, #64]	; (8007240 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007200:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	2201      	movs	r2, #1
 8007208:	409a      	lsls	r2, r3
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4313      	orrs	r3, r2
 8007210:	4a0b      	ldr	r2, [pc, #44]	; (8007240 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4a06      	ldr	r2, [pc, #24]	; (800723c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007222:	441a      	add	r2, r3
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	3304      	adds	r3, #4
 8007228:	4619      	mov	r1, r3
 800722a:	4610      	mov	r0, r2
 800722c:	f7fe fb1e 	bl	800586c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007230:	bf00      	nop
 8007232:	3720      	adds	r7, #32
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	200006c8 	.word	0x200006c8
 800723c:	200006cc 	.word	0x200006cc
 8007240:	200007d0 	.word	0x200007d0

08007244 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007248:	4b07      	ldr	r3, [pc, #28]	; (8007268 <pvTaskIncrementMutexHeldCount+0x24>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d004      	beq.n	800725a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <pvTaskIncrementMutexHeldCount+0x24>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007256:	3201      	adds	r2, #1
 8007258:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800725a:	4b03      	ldr	r3, [pc, #12]	; (8007268 <pvTaskIncrementMutexHeldCount+0x24>)
 800725c:	681b      	ldr	r3, [r3, #0]
	}
 800725e:	4618      	mov	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	200006c8 	.word	0x200006c8

0800726c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007276:	4b29      	ldr	r3, [pc, #164]	; (800731c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800727c:	4b28      	ldr	r3, [pc, #160]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3304      	adds	r3, #4
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fb4f 	bl	8005926 <uxListRemove>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800728e:	4b24      	ldr	r3, [pc, #144]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	2201      	movs	r2, #1
 8007296:	fa02 f303 	lsl.w	r3, r2, r3
 800729a:	43da      	mvns	r2, r3
 800729c:	4b21      	ldr	r3, [pc, #132]	; (8007324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4013      	ands	r3, r2
 80072a2:	4a20      	ldr	r2, [pc, #128]	; (8007324 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d10a      	bne.n	80072c4 <prvAddCurrentTaskToDelayedList+0x58>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072b4:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4619      	mov	r1, r3
 80072bc:	481a      	ldr	r0, [pc, #104]	; (8007328 <prvAddCurrentTaskToDelayedList+0xbc>)
 80072be:	f7fe fad5 	bl	800586c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072c2:	e026      	b.n	8007312 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4413      	add	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072cc:	4b14      	ldr	r3, [pc, #80]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d209      	bcs.n	80072f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072dc:	4b13      	ldr	r3, [pc, #76]	; (800732c <prvAddCurrentTaskToDelayedList+0xc0>)
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3304      	adds	r3, #4
 80072e6:	4619      	mov	r1, r3
 80072e8:	4610      	mov	r0, r2
 80072ea:	f7fe fae3 	bl	80058b4 <vListInsert>
}
 80072ee:	e010      	b.n	8007312 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072f0:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <prvAddCurrentTaskToDelayedList+0xc4>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3304      	adds	r3, #4
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f7fe fad9 	bl	80058b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007302:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	429a      	cmp	r2, r3
 800730a:	d202      	bcs.n	8007312 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800730c:	4a09      	ldr	r2, [pc, #36]	; (8007334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6013      	str	r3, [r2, #0]
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	200007cc 	.word	0x200007cc
 8007320:	200006c8 	.word	0x200006c8
 8007324:	200007d0 	.word	0x200007d0
 8007328:	200007b4 	.word	0x200007b4
 800732c:	20000784 	.word	0x20000784
 8007330:	20000780 	.word	0x20000780
 8007334:	200007e8 	.word	0x200007e8

08007338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3b04      	subs	r3, #4
 8007348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b04      	subs	r3, #4
 8007356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f023 0201 	bic.w	r2, r3, #1
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3b04      	subs	r3, #4
 8007366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007368:	4a0c      	ldr	r2, [pc, #48]	; (800739c <pxPortInitialiseStack+0x64>)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b14      	subs	r3, #20
 8007372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3b04      	subs	r3, #4
 800737e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f06f 0202 	mvn.w	r2, #2
 8007386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3b20      	subs	r3, #32
 800738c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800738e:	68fb      	ldr	r3, [r7, #12]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	080073a1 	.word	0x080073a1

080073a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073aa:	4b14      	ldr	r3, [pc, #80]	; (80073fc <prvTaskExitError+0x5c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d00c      	beq.n	80073ce <prvTaskExitError+0x2e>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	b672      	cpsid	i
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	b662      	cpsie	i
 80073c8:	60fb      	str	r3, [r7, #12]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <prvTaskExitError+0x2c>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	60bb      	str	r3, [r7, #8]
}
 80073e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073e6:	bf00      	nop
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0fc      	beq.n	80073e8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073ee:	bf00      	nop
 80073f0:	bf00      	nop
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	2000000c 	.word	0x2000000c

08007400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <pxCurrentTCBConst2>)
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	f380 8809 	msr	PSP, r0
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8811 	msr	BASEPRI, r0
 800741a:	4770      	bx	lr
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	200006c8 	.word	0x200006c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <prvPortStartFirstTask+0x24>)
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f380 8808 	msr	MSP, r0
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8814 	msr	CONTROL, r0
 800743a:	b662      	cpsie	i
 800743c:	b661      	cpsie	f
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	df00      	svc	0
 8007448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800744a:	bf00      	nop
 800744c:	e000ed08 	.word	0xe000ed08

08007450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007456:	4b37      	ldr	r3, [pc, #220]	; (8007534 <xPortStartScheduler+0xe4>)
 8007458:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	22ff      	movs	r2, #255	; 0xff
 8007466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007478:	b2da      	uxtb	r2, r3
 800747a:	4b2f      	ldr	r3, [pc, #188]	; (8007538 <xPortStartScheduler+0xe8>)
 800747c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800747e:	4b2f      	ldr	r3, [pc, #188]	; (800753c <xPortStartScheduler+0xec>)
 8007480:	2207      	movs	r2, #7
 8007482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007484:	e009      	b.n	800749a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007486:	4b2d      	ldr	r3, [pc, #180]	; (800753c <xPortStartScheduler+0xec>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3b01      	subs	r3, #1
 800748c:	4a2b      	ldr	r2, [pc, #172]	; (800753c <xPortStartScheduler+0xec>)
 800748e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	b2db      	uxtb	r3, r3
 8007498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d0ef      	beq.n	8007486 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074a6:	4b25      	ldr	r3, [pc, #148]	; (800753c <xPortStartScheduler+0xec>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f1c3 0307 	rsb	r3, r3, #7
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d00c      	beq.n	80074cc <xPortStartScheduler+0x7c>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	b672      	cpsid	i
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	b662      	cpsie	i
 80074c6:	60bb      	str	r3, [r7, #8]
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074cc:	4b1b      	ldr	r3, [pc, #108]	; (800753c <xPortStartScheduler+0xec>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	4a1a      	ldr	r2, [pc, #104]	; (800753c <xPortStartScheduler+0xec>)
 80074d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074d6:	4b19      	ldr	r3, [pc, #100]	; (800753c <xPortStartScheduler+0xec>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074de:	4a17      	ldr	r2, [pc, #92]	; (800753c <xPortStartScheduler+0xec>)
 80074e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074ea:	4b15      	ldr	r3, [pc, #84]	; (8007540 <xPortStartScheduler+0xf0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a14      	ldr	r2, [pc, #80]	; (8007540 <xPortStartScheduler+0xf0>)
 80074f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074f6:	4b12      	ldr	r3, [pc, #72]	; (8007540 <xPortStartScheduler+0xf0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a11      	ldr	r2, [pc, #68]	; (8007540 <xPortStartScheduler+0xf0>)
 80074fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007500:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007502:	f000 f8dd 	bl	80076c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007506:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <xPortStartScheduler+0xf4>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800750c:	f000 f8fc 	bl	8007708 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007510:	4b0d      	ldr	r3, [pc, #52]	; (8007548 <xPortStartScheduler+0xf8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <xPortStartScheduler+0xf8>)
 8007516:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800751a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800751c:	f7ff ff84 	bl	8007428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007520:	f7ff fa82 	bl	8006a28 <vTaskSwitchContext>
	prvTaskExitError();
 8007524:	f7ff ff3c 	bl	80073a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	e000e400 	.word	0xe000e400
 8007538:	200007f4 	.word	0x200007f4
 800753c:	200007f8 	.word	0x200007f8
 8007540:	e000ed20 	.word	0xe000ed20
 8007544:	2000000c 	.word	0x2000000c
 8007548:	e000ef34 	.word	0xe000ef34

0800754c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	b672      	cpsid	i
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	b662      	cpsie	i
 8007566:	607b      	str	r3, [r7, #4]
}
 8007568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800756a:	4b10      	ldr	r3, [pc, #64]	; (80075ac <vPortEnterCritical+0x60>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3301      	adds	r3, #1
 8007570:	4a0e      	ldr	r2, [pc, #56]	; (80075ac <vPortEnterCritical+0x60>)
 8007572:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007574:	4b0d      	ldr	r3, [pc, #52]	; (80075ac <vPortEnterCritical+0x60>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d111      	bne.n	80075a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <vPortEnterCritical+0x64>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00c      	beq.n	80075a0 <vPortEnterCritical+0x54>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	b672      	cpsid	i
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	b662      	cpsie	i
 800759a:	603b      	str	r3, [r7, #0]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <vPortEnterCritical+0x52>
	}
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	2000000c 	.word	0x2000000c
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075ba:	4b13      	ldr	r3, [pc, #76]	; (8007608 <vPortExitCritical+0x54>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10c      	bne.n	80075dc <vPortExitCritical+0x28>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	b672      	cpsid	i
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	b662      	cpsie	i
 80075d6:	607b      	str	r3, [r7, #4]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80075dc:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <vPortExitCritical+0x54>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	4a09      	ldr	r2, [pc, #36]	; (8007608 <vPortExitCritical+0x54>)
 80075e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075e6:	4b08      	ldr	r3, [pc, #32]	; (8007608 <vPortExitCritical+0x54>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <vPortExitCritical+0x46>
 80075ee:	2300      	movs	r3, #0
 80075f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	f383 8811 	msr	BASEPRI, r3
}
 80075f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	2000000c 	.word	0x2000000c
 800760c:	00000000 	.word	0x00000000

08007610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007610:	f3ef 8009 	mrs	r0, PSP
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	4b15      	ldr	r3, [pc, #84]	; (8007670 <pxCurrentTCBConst>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	f01e 0f10 	tst.w	lr, #16
 8007620:	bf08      	it	eq
 8007622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762a:	6010      	str	r0, [r2, #0]
 800762c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007634:	b672      	cpsid	i
 8007636:	f380 8811 	msr	BASEPRI, r0
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	b662      	cpsie	i
 8007644:	f7ff f9f0 	bl	8006a28 <vTaskSwitchContext>
 8007648:	f04f 0000 	mov.w	r0, #0
 800764c:	f380 8811 	msr	BASEPRI, r0
 8007650:	bc09      	pop	{r0, r3}
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	f01e 0f10 	tst.w	lr, #16
 800765e:	bf08      	it	eq
 8007660:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007664:	f380 8809 	msr	PSP, r0
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop

08007670 <pxCurrentTCBConst>:
 8007670:	200006c8 	.word	0x200006c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop

08007678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	b672      	cpsid	i
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	b662      	cpsie	i
 8007692:	607b      	str	r3, [r7, #4]
}
 8007694:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007696:	f7ff f90d 	bl	80068b4 <xTaskIncrementTick>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076a0:	4b06      	ldr	r3, [pc, #24]	; (80076bc <xPortSysTickHandler+0x44>)
 80076a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	2300      	movs	r3, #0
 80076aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	f383 8811 	msr	BASEPRI, r3
}
 80076b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <vPortSetupTimerInterrupt+0x34>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076ca:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <vPortSetupTimerInterrupt+0x38>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <vPortSetupTimerInterrupt+0x3c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a0a      	ldr	r2, [pc, #40]	; (8007700 <vPortSetupTimerInterrupt+0x40>)
 80076d6:	fba2 2303 	umull	r2, r3, r2, r3
 80076da:	099b      	lsrs	r3, r3, #6
 80076dc:	4a09      	ldr	r2, [pc, #36]	; (8007704 <vPortSetupTimerInterrupt+0x44>)
 80076de:	3b01      	subs	r3, #1
 80076e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076e2:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <vPortSetupTimerInterrupt+0x34>)
 80076e4:	2207      	movs	r2, #7
 80076e6:	601a      	str	r2, [r3, #0]
}
 80076e8:	bf00      	nop
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	e000e010 	.word	0xe000e010
 80076f8:	e000e018 	.word	0xe000e018
 80076fc:	20000000 	.word	0x20000000
 8007700:	10624dd3 	.word	0x10624dd3
 8007704:	e000e014 	.word	0xe000e014

08007708 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007708:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007718 <vPortEnableVFP+0x10>
 800770c:	6801      	ldr	r1, [r0, #0]
 800770e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007712:	6001      	str	r1, [r0, #0]
 8007714:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007716:	bf00      	nop
 8007718:	e000ed88 	.word	0xe000ed88

0800771c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007722:	f3ef 8305 	mrs	r3, IPSR
 8007726:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b0f      	cmp	r3, #15
 800772c:	d916      	bls.n	800775c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800772e:	4a19      	ldr	r2, [pc, #100]	; (8007794 <vPortValidateInterruptPriority+0x78>)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007738:	4b17      	ldr	r3, [pc, #92]	; (8007798 <vPortValidateInterruptPriority+0x7c>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	7afa      	ldrb	r2, [r7, #11]
 800773e:	429a      	cmp	r2, r3
 8007740:	d20c      	bcs.n	800775c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	b672      	cpsid	i
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	b662      	cpsie	i
 8007756:	607b      	str	r3, [r7, #4]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800775c:	4b0f      	ldr	r3, [pc, #60]	; (800779c <vPortValidateInterruptPriority+0x80>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007764:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <vPortValidateInterruptPriority+0x84>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d90c      	bls.n	8007786 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	b672      	cpsid	i
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	b662      	cpsie	i
 8007780:	603b      	str	r3, [r7, #0]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <vPortValidateInterruptPriority+0x68>
	}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	e000e3f0 	.word	0xe000e3f0
 8007798:	200007f4 	.word	0x200007f4
 800779c:	e000ed0c 	.word	0xe000ed0c
 80077a0:	200007f8 	.word	0x200007f8

080077a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	; 0x28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077ac:	2300      	movs	r3, #0
 80077ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077b0:	f7fe ffd4 	bl	800675c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077b4:	4b5b      	ldr	r3, [pc, #364]	; (8007924 <pvPortMalloc+0x180>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077bc:	f000 f91a 	bl	80079f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077c0:	4b59      	ldr	r3, [pc, #356]	; (8007928 <pvPortMalloc+0x184>)
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f040 8092 	bne.w	80078f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01f      	beq.n	8007814 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80077d4:	2208      	movs	r2, #8
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4413      	add	r3, r2
 80077da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d016      	beq.n	8007814 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f023 0307 	bic.w	r3, r3, #7
 80077ec:	3308      	adds	r3, #8
 80077ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00c      	beq.n	8007814 <pvPortMalloc+0x70>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	b672      	cpsid	i
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	b662      	cpsie	i
 800780e:	617b      	str	r3, [r7, #20]
}
 8007810:	bf00      	nop
 8007812:	e7fe      	b.n	8007812 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d06b      	beq.n	80078f2 <pvPortMalloc+0x14e>
 800781a:	4b44      	ldr	r3, [pc, #272]	; (800792c <pvPortMalloc+0x188>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d866      	bhi.n	80078f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007824:	4b42      	ldr	r3, [pc, #264]	; (8007930 <pvPortMalloc+0x18c>)
 8007826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007828:	4b41      	ldr	r3, [pc, #260]	; (8007930 <pvPortMalloc+0x18c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800782e:	e004      	b.n	800783a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d903      	bls.n	800784c <pvPortMalloc+0xa8>
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1f1      	bne.n	8007830 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800784c:	4b35      	ldr	r3, [pc, #212]	; (8007924 <pvPortMalloc+0x180>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007852:	429a      	cmp	r2, r3
 8007854:	d04d      	beq.n	80078f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2208      	movs	r2, #8
 800785c:	4413      	add	r3, r2
 800785e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	2308      	movs	r3, #8
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	429a      	cmp	r2, r3
 8007876:	d921      	bls.n	80078bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4413      	add	r3, r2
 800787e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00c      	beq.n	80078a4 <pvPortMalloc+0x100>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	b672      	cpsid	i
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	b662      	cpsie	i
 800789e:	613b      	str	r3, [r7, #16]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	1ad2      	subs	r2, r2, r3
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078b6:	69b8      	ldr	r0, [r7, #24]
 80078b8:	f000 f8fe 	bl	8007ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078bc:	4b1b      	ldr	r3, [pc, #108]	; (800792c <pvPortMalloc+0x188>)
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	4a19      	ldr	r2, [pc, #100]	; (800792c <pvPortMalloc+0x188>)
 80078c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078ca:	4b18      	ldr	r3, [pc, #96]	; (800792c <pvPortMalloc+0x188>)
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4b19      	ldr	r3, [pc, #100]	; (8007934 <pvPortMalloc+0x190>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d203      	bcs.n	80078de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078d6:	4b15      	ldr	r3, [pc, #84]	; (800792c <pvPortMalloc+0x188>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a16      	ldr	r2, [pc, #88]	; (8007934 <pvPortMalloc+0x190>)
 80078dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <pvPortMalloc+0x184>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078f2:	f7fe ff41 	bl	8006778 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00c      	beq.n	800791a <pvPortMalloc+0x176>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	b672      	cpsid	i
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	b662      	cpsie	i
 8007914:	60fb      	str	r3, [r7, #12]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <pvPortMalloc+0x174>
	return pvReturn;
 800791a:	69fb      	ldr	r3, [r7, #28]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3728      	adds	r7, #40	; 0x28
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20004404 	.word	0x20004404
 8007928:	20004410 	.word	0x20004410
 800792c:	20004408 	.word	0x20004408
 8007930:	200043fc 	.word	0x200043fc
 8007934:	2000440c 	.word	0x2000440c

08007938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d04c      	beq.n	80079e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800794a:	2308      	movs	r3, #8
 800794c:	425b      	negs	r3, r3
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4413      	add	r3, r2
 8007952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	4b23      	ldr	r3, [pc, #140]	; (80079ec <vPortFree+0xb4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4013      	ands	r3, r2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10c      	bne.n	8007980 <vPortFree+0x48>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	b672      	cpsid	i
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	b662      	cpsie	i
 800797a:	60fb      	str	r3, [r7, #12]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00c      	beq.n	80079a2 <vPortFree+0x6a>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	b672      	cpsid	i
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	b662      	cpsie	i
 800799c:	60bb      	str	r3, [r7, #8]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	4b11      	ldr	r3, [pc, #68]	; (80079ec <vPortFree+0xb4>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d019      	beq.n	80079e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d115      	bne.n	80079e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <vPortFree+0xb4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	43db      	mvns	r3, r3
 80079c2:	401a      	ands	r2, r3
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079c8:	f7fe fec8 	bl	800675c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <vPortFree+0xb8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4413      	add	r3, r2
 80079d6:	4a06      	ldr	r2, [pc, #24]	; (80079f0 <vPortFree+0xb8>)
 80079d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079da:	6938      	ldr	r0, [r7, #16]
 80079dc:	f000 f86c 	bl	8007ab8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80079e0:	f7fe feca 	bl	8006778 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079e4:	bf00      	nop
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20004410 	.word	0x20004410
 80079f0:	20004408 	.word	0x20004408

080079f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80079fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a00:	4b27      	ldr	r3, [pc, #156]	; (8007aa0 <prvHeapInit+0xac>)
 8007a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3307      	adds	r3, #7
 8007a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0307 	bic.w	r3, r3, #7
 8007a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	4a1f      	ldr	r2, [pc, #124]	; (8007aa0 <prvHeapInit+0xac>)
 8007a24:	4413      	add	r3, r2
 8007a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a2c:	4a1d      	ldr	r2, [pc, #116]	; (8007aa4 <prvHeapInit+0xb0>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a32:	4b1c      	ldr	r3, [pc, #112]	; (8007aa4 <prvHeapInit+0xb0>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a40:	2208      	movs	r2, #8
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0307 	bic.w	r3, r3, #7
 8007a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4a15      	ldr	r2, [pc, #84]	; (8007aa8 <prvHeapInit+0xb4>)
 8007a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <prvHeapInit+0xb4>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a5e:	4b12      	ldr	r3, [pc, #72]	; (8007aa8 <prvHeapInit+0xb4>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a74:	4b0c      	ldr	r3, [pc, #48]	; (8007aa8 <prvHeapInit+0xb4>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4a0a      	ldr	r2, [pc, #40]	; (8007aac <prvHeapInit+0xb8>)
 8007a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <prvHeapInit+0xbc>)
 8007a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a8c:	4b09      	ldr	r3, [pc, #36]	; (8007ab4 <prvHeapInit+0xc0>)
 8007a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a92:	601a      	str	r2, [r3, #0]
}
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	200007fc 	.word	0x200007fc
 8007aa4:	200043fc 	.word	0x200043fc
 8007aa8:	20004404 	.word	0x20004404
 8007aac:	2000440c 	.word	0x2000440c
 8007ab0:	20004408 	.word	0x20004408
 8007ab4:	20004410 	.word	0x20004410

08007ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ac0:	4b28      	ldr	r3, [pc, #160]	; (8007b64 <prvInsertBlockIntoFreeList+0xac>)
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	e002      	b.n	8007acc <prvInsertBlockIntoFreeList+0x14>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d8f7      	bhi.n	8007ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d108      	bne.n	8007afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	441a      	add	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	441a      	add	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d118      	bne.n	8007b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b15      	ldr	r3, [pc, #84]	; (8007b68 <prvInsertBlockIntoFreeList+0xb0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d00d      	beq.n	8007b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	441a      	add	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e008      	b.n	8007b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <prvInsertBlockIntoFreeList+0xb0>)
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e003      	b.n	8007b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d002      	beq.n	8007b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b56:	bf00      	nop
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	200043fc 	.word	0x200043fc
 8007b68:	20004404 	.word	0x20004404

08007b6c <__assert_func>:
 8007b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b6e:	4614      	mov	r4, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <__assert_func+0x2c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4605      	mov	r5, r0
 8007b78:	68d8      	ldr	r0, [r3, #12]
 8007b7a:	b14c      	cbz	r4, 8007b90 <__assert_func+0x24>
 8007b7c:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <__assert_func+0x30>)
 8007b7e:	9100      	str	r1, [sp, #0]
 8007b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b84:	4906      	ldr	r1, [pc, #24]	; (8007ba0 <__assert_func+0x34>)
 8007b86:	462b      	mov	r3, r5
 8007b88:	f000 f814 	bl	8007bb4 <fiprintf>
 8007b8c:	f000 fc46 	bl	800841c <abort>
 8007b90:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <__assert_func+0x38>)
 8007b92:	461c      	mov	r4, r3
 8007b94:	e7f3      	b.n	8007b7e <__assert_func+0x12>
 8007b96:	bf00      	nop
 8007b98:	20000010 	.word	0x20000010
 8007b9c:	08009050 	.word	0x08009050
 8007ba0:	0800905d 	.word	0x0800905d
 8007ba4:	0800908b 	.word	0x0800908b

08007ba8 <__errno>:
 8007ba8:	4b01      	ldr	r3, [pc, #4]	; (8007bb0 <__errno+0x8>)
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	20000010 	.word	0x20000010

08007bb4 <fiprintf>:
 8007bb4:	b40e      	push	{r1, r2, r3}
 8007bb6:	b503      	push	{r0, r1, lr}
 8007bb8:	4601      	mov	r1, r0
 8007bba:	ab03      	add	r3, sp, #12
 8007bbc:	4805      	ldr	r0, [pc, #20]	; (8007bd4 <fiprintf+0x20>)
 8007bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc2:	6800      	ldr	r0, [r0, #0]
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	f000 f86b 	bl	8007ca0 <_vfiprintf_r>
 8007bca:	b002      	add	sp, #8
 8007bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bd0:	b003      	add	sp, #12
 8007bd2:	4770      	bx	lr
 8007bd4:	20000010 	.word	0x20000010

08007bd8 <__libc_init_array>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	4d0d      	ldr	r5, [pc, #52]	; (8007c10 <__libc_init_array+0x38>)
 8007bdc:	4c0d      	ldr	r4, [pc, #52]	; (8007c14 <__libc_init_array+0x3c>)
 8007bde:	1b64      	subs	r4, r4, r5
 8007be0:	10a4      	asrs	r4, r4, #2
 8007be2:	2600      	movs	r6, #0
 8007be4:	42a6      	cmp	r6, r4
 8007be6:	d109      	bne.n	8007bfc <__libc_init_array+0x24>
 8007be8:	4d0b      	ldr	r5, [pc, #44]	; (8007c18 <__libc_init_array+0x40>)
 8007bea:	4c0c      	ldr	r4, [pc, #48]	; (8007c1c <__libc_init_array+0x44>)
 8007bec:	f001 f9d6 	bl	8008f9c <_init>
 8007bf0:	1b64      	subs	r4, r4, r5
 8007bf2:	10a4      	asrs	r4, r4, #2
 8007bf4:	2600      	movs	r6, #0
 8007bf6:	42a6      	cmp	r6, r4
 8007bf8:	d105      	bne.n	8007c06 <__libc_init_array+0x2e>
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c00:	4798      	blx	r3
 8007c02:	3601      	adds	r6, #1
 8007c04:	e7ee      	b.n	8007be4 <__libc_init_array+0xc>
 8007c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0a:	4798      	blx	r3
 8007c0c:	3601      	adds	r6, #1
 8007c0e:	e7f2      	b.n	8007bf6 <__libc_init_array+0x1e>
 8007c10:	0800912c 	.word	0x0800912c
 8007c14:	0800912c 	.word	0x0800912c
 8007c18:	0800912c 	.word	0x0800912c
 8007c1c:	08009130 	.word	0x08009130

08007c20 <memcpy>:
 8007c20:	440a      	add	r2, r1
 8007c22:	4291      	cmp	r1, r2
 8007c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c28:	d100      	bne.n	8007c2c <memcpy+0xc>
 8007c2a:	4770      	bx	lr
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c36:	4291      	cmp	r1, r2
 8007c38:	d1f9      	bne.n	8007c2e <memcpy+0xe>
 8007c3a:	bd10      	pop	{r4, pc}

08007c3c <memset>:
 8007c3c:	4402      	add	r2, r0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d100      	bne.n	8007c46 <memset+0xa>
 8007c44:	4770      	bx	lr
 8007c46:	f803 1b01 	strb.w	r1, [r3], #1
 8007c4a:	e7f9      	b.n	8007c40 <memset+0x4>

08007c4c <__sfputc_r>:
 8007c4c:	6893      	ldr	r3, [r2, #8]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	b410      	push	{r4}
 8007c54:	6093      	str	r3, [r2, #8]
 8007c56:	da08      	bge.n	8007c6a <__sfputc_r+0x1e>
 8007c58:	6994      	ldr	r4, [r2, #24]
 8007c5a:	42a3      	cmp	r3, r4
 8007c5c:	db01      	blt.n	8007c62 <__sfputc_r+0x16>
 8007c5e:	290a      	cmp	r1, #10
 8007c60:	d103      	bne.n	8007c6a <__sfputc_r+0x1e>
 8007c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c66:	f000 bb19 	b.w	800829c <__swbuf_r>
 8007c6a:	6813      	ldr	r3, [r2, #0]
 8007c6c:	1c58      	adds	r0, r3, #1
 8007c6e:	6010      	str	r0, [r2, #0]
 8007c70:	7019      	strb	r1, [r3, #0]
 8007c72:	4608      	mov	r0, r1
 8007c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <__sfputs_r>:
 8007c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	460f      	mov	r7, r1
 8007c80:	4614      	mov	r4, r2
 8007c82:	18d5      	adds	r5, r2, r3
 8007c84:	42ac      	cmp	r4, r5
 8007c86:	d101      	bne.n	8007c8c <__sfputs_r+0x12>
 8007c88:	2000      	movs	r0, #0
 8007c8a:	e007      	b.n	8007c9c <__sfputs_r+0x22>
 8007c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c90:	463a      	mov	r2, r7
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff ffda 	bl	8007c4c <__sfputc_r>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d1f3      	bne.n	8007c84 <__sfputs_r+0xa>
 8007c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ca0 <_vfiprintf_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	460d      	mov	r5, r1
 8007ca6:	b09d      	sub	sp, #116	; 0x74
 8007ca8:	4614      	mov	r4, r2
 8007caa:	4698      	mov	r8, r3
 8007cac:	4606      	mov	r6, r0
 8007cae:	b118      	cbz	r0, 8007cb8 <_vfiprintf_r+0x18>
 8007cb0:	6983      	ldr	r3, [r0, #24]
 8007cb2:	b90b      	cbnz	r3, 8007cb8 <_vfiprintf_r+0x18>
 8007cb4:	f000 fcd4 	bl	8008660 <__sinit>
 8007cb8:	4b89      	ldr	r3, [pc, #548]	; (8007ee0 <_vfiprintf_r+0x240>)
 8007cba:	429d      	cmp	r5, r3
 8007cbc:	d11b      	bne.n	8007cf6 <_vfiprintf_r+0x56>
 8007cbe:	6875      	ldr	r5, [r6, #4]
 8007cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc2:	07d9      	lsls	r1, r3, #31
 8007cc4:	d405      	bmi.n	8007cd2 <_vfiprintf_r+0x32>
 8007cc6:	89ab      	ldrh	r3, [r5, #12]
 8007cc8:	059a      	lsls	r2, r3, #22
 8007cca:	d402      	bmi.n	8007cd2 <_vfiprintf_r+0x32>
 8007ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cce:	f000 fd65 	bl	800879c <__retarget_lock_acquire_recursive>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	071b      	lsls	r3, r3, #28
 8007cd6:	d501      	bpl.n	8007cdc <_vfiprintf_r+0x3c>
 8007cd8:	692b      	ldr	r3, [r5, #16]
 8007cda:	b9eb      	cbnz	r3, 8007d18 <_vfiprintf_r+0x78>
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f000 fb2e 	bl	8008340 <__swsetup_r>
 8007ce4:	b1c0      	cbz	r0, 8007d18 <_vfiprintf_r+0x78>
 8007ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ce8:	07dc      	lsls	r4, r3, #31
 8007cea:	d50e      	bpl.n	8007d0a <_vfiprintf_r+0x6a>
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	b01d      	add	sp, #116	; 0x74
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	4b7b      	ldr	r3, [pc, #492]	; (8007ee4 <_vfiprintf_r+0x244>)
 8007cf8:	429d      	cmp	r5, r3
 8007cfa:	d101      	bne.n	8007d00 <_vfiprintf_r+0x60>
 8007cfc:	68b5      	ldr	r5, [r6, #8]
 8007cfe:	e7df      	b.n	8007cc0 <_vfiprintf_r+0x20>
 8007d00:	4b79      	ldr	r3, [pc, #484]	; (8007ee8 <_vfiprintf_r+0x248>)
 8007d02:	429d      	cmp	r5, r3
 8007d04:	bf08      	it	eq
 8007d06:	68f5      	ldreq	r5, [r6, #12]
 8007d08:	e7da      	b.n	8007cc0 <_vfiprintf_r+0x20>
 8007d0a:	89ab      	ldrh	r3, [r5, #12]
 8007d0c:	0598      	lsls	r0, r3, #22
 8007d0e:	d4ed      	bmi.n	8007cec <_vfiprintf_r+0x4c>
 8007d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d12:	f000 fd44 	bl	800879e <__retarget_lock_release_recursive>
 8007d16:	e7e9      	b.n	8007cec <_vfiprintf_r+0x4c>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d26:	2330      	movs	r3, #48	; 0x30
 8007d28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007eec <_vfiprintf_r+0x24c>
 8007d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d30:	f04f 0901 	mov.w	r9, #1
 8007d34:	4623      	mov	r3, r4
 8007d36:	469a      	mov	sl, r3
 8007d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d3c:	b10a      	cbz	r2, 8007d42 <_vfiprintf_r+0xa2>
 8007d3e:	2a25      	cmp	r2, #37	; 0x25
 8007d40:	d1f9      	bne.n	8007d36 <_vfiprintf_r+0x96>
 8007d42:	ebba 0b04 	subs.w	fp, sl, r4
 8007d46:	d00b      	beq.n	8007d60 <_vfiprintf_r+0xc0>
 8007d48:	465b      	mov	r3, fp
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f7ff ff93 	bl	8007c7a <__sfputs_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	f000 80aa 	beq.w	8007eae <_vfiprintf_r+0x20e>
 8007d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d5c:	445a      	add	r2, fp
 8007d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d60:	f89a 3000 	ldrb.w	r3, [sl]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 80a2 	beq.w	8007eae <_vfiprintf_r+0x20e>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d74:	f10a 0a01 	add.w	sl, sl, #1
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	9307      	str	r3, [sp, #28]
 8007d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d80:	931a      	str	r3, [sp, #104]	; 0x68
 8007d82:	4654      	mov	r4, sl
 8007d84:	2205      	movs	r2, #5
 8007d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d8a:	4858      	ldr	r0, [pc, #352]	; (8007eec <_vfiprintf_r+0x24c>)
 8007d8c:	f7f8 fa60 	bl	8000250 <memchr>
 8007d90:	9a04      	ldr	r2, [sp, #16]
 8007d92:	b9d8      	cbnz	r0, 8007dcc <_vfiprintf_r+0x12c>
 8007d94:	06d1      	lsls	r1, r2, #27
 8007d96:	bf44      	itt	mi
 8007d98:	2320      	movmi	r3, #32
 8007d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d9e:	0713      	lsls	r3, r2, #28
 8007da0:	bf44      	itt	mi
 8007da2:	232b      	movmi	r3, #43	; 0x2b
 8007da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dac:	2b2a      	cmp	r3, #42	; 0x2a
 8007dae:	d015      	beq.n	8007ddc <_vfiprintf_r+0x13c>
 8007db0:	9a07      	ldr	r2, [sp, #28]
 8007db2:	4654      	mov	r4, sl
 8007db4:	2000      	movs	r0, #0
 8007db6:	f04f 0c0a 	mov.w	ip, #10
 8007dba:	4621      	mov	r1, r4
 8007dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc0:	3b30      	subs	r3, #48	; 0x30
 8007dc2:	2b09      	cmp	r3, #9
 8007dc4:	d94e      	bls.n	8007e64 <_vfiprintf_r+0x1c4>
 8007dc6:	b1b0      	cbz	r0, 8007df6 <_vfiprintf_r+0x156>
 8007dc8:	9207      	str	r2, [sp, #28]
 8007dca:	e014      	b.n	8007df6 <_vfiprintf_r+0x156>
 8007dcc:	eba0 0308 	sub.w	r3, r0, r8
 8007dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	46a2      	mov	sl, r4
 8007dda:	e7d2      	b.n	8007d82 <_vfiprintf_r+0xe2>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	1d19      	adds	r1, r3, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	9103      	str	r1, [sp, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bfbb      	ittet	lt
 8007de8:	425b      	neglt	r3, r3
 8007dea:	f042 0202 	orrlt.w	r2, r2, #2
 8007dee:	9307      	strge	r3, [sp, #28]
 8007df0:	9307      	strlt	r3, [sp, #28]
 8007df2:	bfb8      	it	lt
 8007df4:	9204      	strlt	r2, [sp, #16]
 8007df6:	7823      	ldrb	r3, [r4, #0]
 8007df8:	2b2e      	cmp	r3, #46	; 0x2e
 8007dfa:	d10c      	bne.n	8007e16 <_vfiprintf_r+0x176>
 8007dfc:	7863      	ldrb	r3, [r4, #1]
 8007dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007e00:	d135      	bne.n	8007e6e <_vfiprintf_r+0x1ce>
 8007e02:	9b03      	ldr	r3, [sp, #12]
 8007e04:	1d1a      	adds	r2, r3, #4
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	9203      	str	r2, [sp, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bfb8      	it	lt
 8007e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e12:	3402      	adds	r4, #2
 8007e14:	9305      	str	r3, [sp, #20]
 8007e16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007efc <_vfiprintf_r+0x25c>
 8007e1a:	7821      	ldrb	r1, [r4, #0]
 8007e1c:	2203      	movs	r2, #3
 8007e1e:	4650      	mov	r0, sl
 8007e20:	f7f8 fa16 	bl	8000250 <memchr>
 8007e24:	b140      	cbz	r0, 8007e38 <_vfiprintf_r+0x198>
 8007e26:	2340      	movs	r3, #64	; 0x40
 8007e28:	eba0 000a 	sub.w	r0, r0, sl
 8007e2c:	fa03 f000 	lsl.w	r0, r3, r0
 8007e30:	9b04      	ldr	r3, [sp, #16]
 8007e32:	4303      	orrs	r3, r0
 8007e34:	3401      	adds	r4, #1
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3c:	482c      	ldr	r0, [pc, #176]	; (8007ef0 <_vfiprintf_r+0x250>)
 8007e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e42:	2206      	movs	r2, #6
 8007e44:	f7f8 fa04 	bl	8000250 <memchr>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d03f      	beq.n	8007ecc <_vfiprintf_r+0x22c>
 8007e4c:	4b29      	ldr	r3, [pc, #164]	; (8007ef4 <_vfiprintf_r+0x254>)
 8007e4e:	bb1b      	cbnz	r3, 8007e98 <_vfiprintf_r+0x1f8>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	3307      	adds	r3, #7
 8007e54:	f023 0307 	bic.w	r3, r3, #7
 8007e58:	3308      	adds	r3, #8
 8007e5a:	9303      	str	r3, [sp, #12]
 8007e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5e:	443b      	add	r3, r7
 8007e60:	9309      	str	r3, [sp, #36]	; 0x24
 8007e62:	e767      	b.n	8007d34 <_vfiprintf_r+0x94>
 8007e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e68:	460c      	mov	r4, r1
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	e7a5      	b.n	8007dba <_vfiprintf_r+0x11a>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	3401      	adds	r4, #1
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	4619      	mov	r1, r3
 8007e76:	f04f 0c0a 	mov.w	ip, #10
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e80:	3a30      	subs	r2, #48	; 0x30
 8007e82:	2a09      	cmp	r2, #9
 8007e84:	d903      	bls.n	8007e8e <_vfiprintf_r+0x1ee>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0c5      	beq.n	8007e16 <_vfiprintf_r+0x176>
 8007e8a:	9105      	str	r1, [sp, #20]
 8007e8c:	e7c3      	b.n	8007e16 <_vfiprintf_r+0x176>
 8007e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e92:	4604      	mov	r4, r0
 8007e94:	2301      	movs	r3, #1
 8007e96:	e7f0      	b.n	8007e7a <_vfiprintf_r+0x1da>
 8007e98:	ab03      	add	r3, sp, #12
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	4b16      	ldr	r3, [pc, #88]	; (8007ef8 <_vfiprintf_r+0x258>)
 8007ea0:	a904      	add	r1, sp, #16
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f3af 8000 	nop.w
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	1c78      	adds	r0, r7, #1
 8007eac:	d1d6      	bne.n	8007e5c <_vfiprintf_r+0x1bc>
 8007eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eb0:	07d9      	lsls	r1, r3, #31
 8007eb2:	d405      	bmi.n	8007ec0 <_vfiprintf_r+0x220>
 8007eb4:	89ab      	ldrh	r3, [r5, #12]
 8007eb6:	059a      	lsls	r2, r3, #22
 8007eb8:	d402      	bmi.n	8007ec0 <_vfiprintf_r+0x220>
 8007eba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ebc:	f000 fc6f 	bl	800879e <__retarget_lock_release_recursive>
 8007ec0:	89ab      	ldrh	r3, [r5, #12]
 8007ec2:	065b      	lsls	r3, r3, #25
 8007ec4:	f53f af12 	bmi.w	8007cec <_vfiprintf_r+0x4c>
 8007ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eca:	e711      	b.n	8007cf0 <_vfiprintf_r+0x50>
 8007ecc:	ab03      	add	r3, sp, #12
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	462a      	mov	r2, r5
 8007ed2:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <_vfiprintf_r+0x258>)
 8007ed4:	a904      	add	r1, sp, #16
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f000 f880 	bl	8007fdc <_printf_i>
 8007edc:	e7e4      	b.n	8007ea8 <_vfiprintf_r+0x208>
 8007ede:	bf00      	nop
 8007ee0:	080090e4 	.word	0x080090e4
 8007ee4:	08009104 	.word	0x08009104
 8007ee8:	080090c4 	.word	0x080090c4
 8007eec:	08009090 	.word	0x08009090
 8007ef0:	0800909a 	.word	0x0800909a
 8007ef4:	00000000 	.word	0x00000000
 8007ef8:	08007c7b 	.word	0x08007c7b
 8007efc:	08009096 	.word	0x08009096

08007f00 <_printf_common>:
 8007f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f04:	4616      	mov	r6, r2
 8007f06:	4699      	mov	r9, r3
 8007f08:	688a      	ldr	r2, [r1, #8]
 8007f0a:	690b      	ldr	r3, [r1, #16]
 8007f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f10:	4293      	cmp	r3, r2
 8007f12:	bfb8      	it	lt
 8007f14:	4613      	movlt	r3, r2
 8007f16:	6033      	str	r3, [r6, #0]
 8007f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	460c      	mov	r4, r1
 8007f20:	b10a      	cbz	r2, 8007f26 <_printf_common+0x26>
 8007f22:	3301      	adds	r3, #1
 8007f24:	6033      	str	r3, [r6, #0]
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	0699      	lsls	r1, r3, #26
 8007f2a:	bf42      	ittt	mi
 8007f2c:	6833      	ldrmi	r3, [r6, #0]
 8007f2e:	3302      	addmi	r3, #2
 8007f30:	6033      	strmi	r3, [r6, #0]
 8007f32:	6825      	ldr	r5, [r4, #0]
 8007f34:	f015 0506 	ands.w	r5, r5, #6
 8007f38:	d106      	bne.n	8007f48 <_printf_common+0x48>
 8007f3a:	f104 0a19 	add.w	sl, r4, #25
 8007f3e:	68e3      	ldr	r3, [r4, #12]
 8007f40:	6832      	ldr	r2, [r6, #0]
 8007f42:	1a9b      	subs	r3, r3, r2
 8007f44:	42ab      	cmp	r3, r5
 8007f46:	dc26      	bgt.n	8007f96 <_printf_common+0x96>
 8007f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f4c:	1e13      	subs	r3, r2, #0
 8007f4e:	6822      	ldr	r2, [r4, #0]
 8007f50:	bf18      	it	ne
 8007f52:	2301      	movne	r3, #1
 8007f54:	0692      	lsls	r2, r2, #26
 8007f56:	d42b      	bmi.n	8007fb0 <_printf_common+0xb0>
 8007f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	4638      	mov	r0, r7
 8007f60:	47c0      	blx	r8
 8007f62:	3001      	adds	r0, #1
 8007f64:	d01e      	beq.n	8007fa4 <_printf_common+0xa4>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	68e5      	ldr	r5, [r4, #12]
 8007f6a:	6832      	ldr	r2, [r6, #0]
 8007f6c:	f003 0306 	and.w	r3, r3, #6
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	bf08      	it	eq
 8007f74:	1aad      	subeq	r5, r5, r2
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	6922      	ldr	r2, [r4, #16]
 8007f7a:	bf0c      	ite	eq
 8007f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f80:	2500      	movne	r5, #0
 8007f82:	4293      	cmp	r3, r2
 8007f84:	bfc4      	itt	gt
 8007f86:	1a9b      	subgt	r3, r3, r2
 8007f88:	18ed      	addgt	r5, r5, r3
 8007f8a:	2600      	movs	r6, #0
 8007f8c:	341a      	adds	r4, #26
 8007f8e:	42b5      	cmp	r5, r6
 8007f90:	d11a      	bne.n	8007fc8 <_printf_common+0xc8>
 8007f92:	2000      	movs	r0, #0
 8007f94:	e008      	b.n	8007fa8 <_printf_common+0xa8>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4652      	mov	r2, sl
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	47c0      	blx	r8
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d103      	bne.n	8007fac <_printf_common+0xac>
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fac:	3501      	adds	r5, #1
 8007fae:	e7c6      	b.n	8007f3e <_printf_common+0x3e>
 8007fb0:	18e1      	adds	r1, r4, r3
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	2030      	movs	r0, #48	; 0x30
 8007fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fba:	4422      	add	r2, r4
 8007fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	e7c7      	b.n	8007f58 <_printf_common+0x58>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4622      	mov	r2, r4
 8007fcc:	4649      	mov	r1, r9
 8007fce:	4638      	mov	r0, r7
 8007fd0:	47c0      	blx	r8
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	d0e6      	beq.n	8007fa4 <_printf_common+0xa4>
 8007fd6:	3601      	adds	r6, #1
 8007fd8:	e7d9      	b.n	8007f8e <_printf_common+0x8e>
	...

08007fdc <_printf_i>:
 8007fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe0:	7e0f      	ldrb	r7, [r1, #24]
 8007fe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fe4:	2f78      	cmp	r7, #120	; 0x78
 8007fe6:	4691      	mov	r9, r2
 8007fe8:	4680      	mov	r8, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	469a      	mov	sl, r3
 8007fee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ff2:	d807      	bhi.n	8008004 <_printf_i+0x28>
 8007ff4:	2f62      	cmp	r7, #98	; 0x62
 8007ff6:	d80a      	bhi.n	800800e <_printf_i+0x32>
 8007ff8:	2f00      	cmp	r7, #0
 8007ffa:	f000 80d8 	beq.w	80081ae <_printf_i+0x1d2>
 8007ffe:	2f58      	cmp	r7, #88	; 0x58
 8008000:	f000 80a3 	beq.w	800814a <_printf_i+0x16e>
 8008004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800800c:	e03a      	b.n	8008084 <_printf_i+0xa8>
 800800e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008012:	2b15      	cmp	r3, #21
 8008014:	d8f6      	bhi.n	8008004 <_printf_i+0x28>
 8008016:	a101      	add	r1, pc, #4	; (adr r1, 800801c <_printf_i+0x40>)
 8008018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800801c:	08008075 	.word	0x08008075
 8008020:	08008089 	.word	0x08008089
 8008024:	08008005 	.word	0x08008005
 8008028:	08008005 	.word	0x08008005
 800802c:	08008005 	.word	0x08008005
 8008030:	08008005 	.word	0x08008005
 8008034:	08008089 	.word	0x08008089
 8008038:	08008005 	.word	0x08008005
 800803c:	08008005 	.word	0x08008005
 8008040:	08008005 	.word	0x08008005
 8008044:	08008005 	.word	0x08008005
 8008048:	08008195 	.word	0x08008195
 800804c:	080080b9 	.word	0x080080b9
 8008050:	08008177 	.word	0x08008177
 8008054:	08008005 	.word	0x08008005
 8008058:	08008005 	.word	0x08008005
 800805c:	080081b7 	.word	0x080081b7
 8008060:	08008005 	.word	0x08008005
 8008064:	080080b9 	.word	0x080080b9
 8008068:	08008005 	.word	0x08008005
 800806c:	08008005 	.word	0x08008005
 8008070:	0800817f 	.word	0x0800817f
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	1d1a      	adds	r2, r3, #4
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	602a      	str	r2, [r5, #0]
 800807c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008084:	2301      	movs	r3, #1
 8008086:	e0a3      	b.n	80081d0 <_printf_i+0x1f4>
 8008088:	6820      	ldr	r0, [r4, #0]
 800808a:	6829      	ldr	r1, [r5, #0]
 800808c:	0606      	lsls	r6, r0, #24
 800808e:	f101 0304 	add.w	r3, r1, #4
 8008092:	d50a      	bpl.n	80080aa <_printf_i+0xce>
 8008094:	680e      	ldr	r6, [r1, #0]
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	2e00      	cmp	r6, #0
 800809a:	da03      	bge.n	80080a4 <_printf_i+0xc8>
 800809c:	232d      	movs	r3, #45	; 0x2d
 800809e:	4276      	negs	r6, r6
 80080a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a4:	485e      	ldr	r0, [pc, #376]	; (8008220 <_printf_i+0x244>)
 80080a6:	230a      	movs	r3, #10
 80080a8:	e019      	b.n	80080de <_printf_i+0x102>
 80080aa:	680e      	ldr	r6, [r1, #0]
 80080ac:	602b      	str	r3, [r5, #0]
 80080ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080b2:	bf18      	it	ne
 80080b4:	b236      	sxthne	r6, r6
 80080b6:	e7ef      	b.n	8008098 <_printf_i+0xbc>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	1d19      	adds	r1, r3, #4
 80080be:	6029      	str	r1, [r5, #0]
 80080c0:	0601      	lsls	r1, r0, #24
 80080c2:	d501      	bpl.n	80080c8 <_printf_i+0xec>
 80080c4:	681e      	ldr	r6, [r3, #0]
 80080c6:	e002      	b.n	80080ce <_printf_i+0xf2>
 80080c8:	0646      	lsls	r6, r0, #25
 80080ca:	d5fb      	bpl.n	80080c4 <_printf_i+0xe8>
 80080cc:	881e      	ldrh	r6, [r3, #0]
 80080ce:	4854      	ldr	r0, [pc, #336]	; (8008220 <_printf_i+0x244>)
 80080d0:	2f6f      	cmp	r7, #111	; 0x6f
 80080d2:	bf0c      	ite	eq
 80080d4:	2308      	moveq	r3, #8
 80080d6:	230a      	movne	r3, #10
 80080d8:	2100      	movs	r1, #0
 80080da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080de:	6865      	ldr	r5, [r4, #4]
 80080e0:	60a5      	str	r5, [r4, #8]
 80080e2:	2d00      	cmp	r5, #0
 80080e4:	bfa2      	ittt	ge
 80080e6:	6821      	ldrge	r1, [r4, #0]
 80080e8:	f021 0104 	bicge.w	r1, r1, #4
 80080ec:	6021      	strge	r1, [r4, #0]
 80080ee:	b90e      	cbnz	r6, 80080f4 <_printf_i+0x118>
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	d04d      	beq.n	8008190 <_printf_i+0x1b4>
 80080f4:	4615      	mov	r5, r2
 80080f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80080fa:	fb03 6711 	mls	r7, r3, r1, r6
 80080fe:	5dc7      	ldrb	r7, [r0, r7]
 8008100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008104:	4637      	mov	r7, r6
 8008106:	42bb      	cmp	r3, r7
 8008108:	460e      	mov	r6, r1
 800810a:	d9f4      	bls.n	80080f6 <_printf_i+0x11a>
 800810c:	2b08      	cmp	r3, #8
 800810e:	d10b      	bne.n	8008128 <_printf_i+0x14c>
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	07de      	lsls	r6, r3, #31
 8008114:	d508      	bpl.n	8008128 <_printf_i+0x14c>
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	6861      	ldr	r1, [r4, #4]
 800811a:	4299      	cmp	r1, r3
 800811c:	bfde      	ittt	le
 800811e:	2330      	movle	r3, #48	; 0x30
 8008120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008128:	1b52      	subs	r2, r2, r5
 800812a:	6122      	str	r2, [r4, #16]
 800812c:	f8cd a000 	str.w	sl, [sp]
 8008130:	464b      	mov	r3, r9
 8008132:	aa03      	add	r2, sp, #12
 8008134:	4621      	mov	r1, r4
 8008136:	4640      	mov	r0, r8
 8008138:	f7ff fee2 	bl	8007f00 <_printf_common>
 800813c:	3001      	adds	r0, #1
 800813e:	d14c      	bne.n	80081da <_printf_i+0x1fe>
 8008140:	f04f 30ff 	mov.w	r0, #4294967295
 8008144:	b004      	add	sp, #16
 8008146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814a:	4835      	ldr	r0, [pc, #212]	; (8008220 <_printf_i+0x244>)
 800814c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008150:	6829      	ldr	r1, [r5, #0]
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	f851 6b04 	ldr.w	r6, [r1], #4
 8008158:	6029      	str	r1, [r5, #0]
 800815a:	061d      	lsls	r5, r3, #24
 800815c:	d514      	bpl.n	8008188 <_printf_i+0x1ac>
 800815e:	07df      	lsls	r7, r3, #31
 8008160:	bf44      	itt	mi
 8008162:	f043 0320 	orrmi.w	r3, r3, #32
 8008166:	6023      	strmi	r3, [r4, #0]
 8008168:	b91e      	cbnz	r6, 8008172 <_printf_i+0x196>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	f023 0320 	bic.w	r3, r3, #32
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	2310      	movs	r3, #16
 8008174:	e7b0      	b.n	80080d8 <_printf_i+0xfc>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	f043 0320 	orr.w	r3, r3, #32
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	2378      	movs	r3, #120	; 0x78
 8008180:	4828      	ldr	r0, [pc, #160]	; (8008224 <_printf_i+0x248>)
 8008182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008186:	e7e3      	b.n	8008150 <_printf_i+0x174>
 8008188:	0659      	lsls	r1, r3, #25
 800818a:	bf48      	it	mi
 800818c:	b2b6      	uxthmi	r6, r6
 800818e:	e7e6      	b.n	800815e <_printf_i+0x182>
 8008190:	4615      	mov	r5, r2
 8008192:	e7bb      	b.n	800810c <_printf_i+0x130>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	6826      	ldr	r6, [r4, #0]
 8008198:	6961      	ldr	r1, [r4, #20]
 800819a:	1d18      	adds	r0, r3, #4
 800819c:	6028      	str	r0, [r5, #0]
 800819e:	0635      	lsls	r5, r6, #24
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	d501      	bpl.n	80081a8 <_printf_i+0x1cc>
 80081a4:	6019      	str	r1, [r3, #0]
 80081a6:	e002      	b.n	80081ae <_printf_i+0x1d2>
 80081a8:	0670      	lsls	r0, r6, #25
 80081aa:	d5fb      	bpl.n	80081a4 <_printf_i+0x1c8>
 80081ac:	8019      	strh	r1, [r3, #0]
 80081ae:	2300      	movs	r3, #0
 80081b0:	6123      	str	r3, [r4, #16]
 80081b2:	4615      	mov	r5, r2
 80081b4:	e7ba      	b.n	800812c <_printf_i+0x150>
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	1d1a      	adds	r2, r3, #4
 80081ba:	602a      	str	r2, [r5, #0]
 80081bc:	681d      	ldr	r5, [r3, #0]
 80081be:	6862      	ldr	r2, [r4, #4]
 80081c0:	2100      	movs	r1, #0
 80081c2:	4628      	mov	r0, r5
 80081c4:	f7f8 f844 	bl	8000250 <memchr>
 80081c8:	b108      	cbz	r0, 80081ce <_printf_i+0x1f2>
 80081ca:	1b40      	subs	r0, r0, r5
 80081cc:	6060      	str	r0, [r4, #4]
 80081ce:	6863      	ldr	r3, [r4, #4]
 80081d0:	6123      	str	r3, [r4, #16]
 80081d2:	2300      	movs	r3, #0
 80081d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d8:	e7a8      	b.n	800812c <_printf_i+0x150>
 80081da:	6923      	ldr	r3, [r4, #16]
 80081dc:	462a      	mov	r2, r5
 80081de:	4649      	mov	r1, r9
 80081e0:	4640      	mov	r0, r8
 80081e2:	47d0      	blx	sl
 80081e4:	3001      	adds	r0, #1
 80081e6:	d0ab      	beq.n	8008140 <_printf_i+0x164>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	079b      	lsls	r3, r3, #30
 80081ec:	d413      	bmi.n	8008216 <_printf_i+0x23a>
 80081ee:	68e0      	ldr	r0, [r4, #12]
 80081f0:	9b03      	ldr	r3, [sp, #12]
 80081f2:	4298      	cmp	r0, r3
 80081f4:	bfb8      	it	lt
 80081f6:	4618      	movlt	r0, r3
 80081f8:	e7a4      	b.n	8008144 <_printf_i+0x168>
 80081fa:	2301      	movs	r3, #1
 80081fc:	4632      	mov	r2, r6
 80081fe:	4649      	mov	r1, r9
 8008200:	4640      	mov	r0, r8
 8008202:	47d0      	blx	sl
 8008204:	3001      	adds	r0, #1
 8008206:	d09b      	beq.n	8008140 <_printf_i+0x164>
 8008208:	3501      	adds	r5, #1
 800820a:	68e3      	ldr	r3, [r4, #12]
 800820c:	9903      	ldr	r1, [sp, #12]
 800820e:	1a5b      	subs	r3, r3, r1
 8008210:	42ab      	cmp	r3, r5
 8008212:	dcf2      	bgt.n	80081fa <_printf_i+0x21e>
 8008214:	e7eb      	b.n	80081ee <_printf_i+0x212>
 8008216:	2500      	movs	r5, #0
 8008218:	f104 0619 	add.w	r6, r4, #25
 800821c:	e7f5      	b.n	800820a <_printf_i+0x22e>
 800821e:	bf00      	nop
 8008220:	080090a1 	.word	0x080090a1
 8008224:	080090b2 	.word	0x080090b2

08008228 <_vsniprintf_r>:
 8008228:	b530      	push	{r4, r5, lr}
 800822a:	4614      	mov	r4, r2
 800822c:	2c00      	cmp	r4, #0
 800822e:	b09b      	sub	sp, #108	; 0x6c
 8008230:	4605      	mov	r5, r0
 8008232:	461a      	mov	r2, r3
 8008234:	da05      	bge.n	8008242 <_vsniprintf_r+0x1a>
 8008236:	238b      	movs	r3, #139	; 0x8b
 8008238:	6003      	str	r3, [r0, #0]
 800823a:	f04f 30ff 	mov.w	r0, #4294967295
 800823e:	b01b      	add	sp, #108	; 0x6c
 8008240:	bd30      	pop	{r4, r5, pc}
 8008242:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008246:	f8ad 300c 	strh.w	r3, [sp, #12]
 800824a:	bf14      	ite	ne
 800824c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008250:	4623      	moveq	r3, r4
 8008252:	9302      	str	r3, [sp, #8]
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800825a:	9100      	str	r1, [sp, #0]
 800825c:	9104      	str	r1, [sp, #16]
 800825e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008262:	4669      	mov	r1, sp
 8008264:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008266:	f000 fc85 	bl	8008b74 <_svfiprintf_r>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	bfbc      	itt	lt
 800826e:	238b      	movlt	r3, #139	; 0x8b
 8008270:	602b      	strlt	r3, [r5, #0]
 8008272:	2c00      	cmp	r4, #0
 8008274:	d0e3      	beq.n	800823e <_vsniprintf_r+0x16>
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	2200      	movs	r2, #0
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e7df      	b.n	800823e <_vsniprintf_r+0x16>
	...

08008280 <vsniprintf>:
 8008280:	b507      	push	{r0, r1, r2, lr}
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	4613      	mov	r3, r2
 8008286:	460a      	mov	r2, r1
 8008288:	4601      	mov	r1, r0
 800828a:	4803      	ldr	r0, [pc, #12]	; (8008298 <vsniprintf+0x18>)
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f7ff ffcb 	bl	8008228 <_vsniprintf_r>
 8008292:	b003      	add	sp, #12
 8008294:	f85d fb04 	ldr.w	pc, [sp], #4
 8008298:	20000010 	.word	0x20000010

0800829c <__swbuf_r>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	460e      	mov	r6, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	4605      	mov	r5, r0
 80082a4:	b118      	cbz	r0, 80082ae <__swbuf_r+0x12>
 80082a6:	6983      	ldr	r3, [r0, #24]
 80082a8:	b90b      	cbnz	r3, 80082ae <__swbuf_r+0x12>
 80082aa:	f000 f9d9 	bl	8008660 <__sinit>
 80082ae:	4b21      	ldr	r3, [pc, #132]	; (8008334 <__swbuf_r+0x98>)
 80082b0:	429c      	cmp	r4, r3
 80082b2:	d12b      	bne.n	800830c <__swbuf_r+0x70>
 80082b4:	686c      	ldr	r4, [r5, #4]
 80082b6:	69a3      	ldr	r3, [r4, #24]
 80082b8:	60a3      	str	r3, [r4, #8]
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	071a      	lsls	r2, r3, #28
 80082be:	d52f      	bpl.n	8008320 <__swbuf_r+0x84>
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	b36b      	cbz	r3, 8008320 <__swbuf_r+0x84>
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	6820      	ldr	r0, [r4, #0]
 80082c8:	1ac0      	subs	r0, r0, r3
 80082ca:	6963      	ldr	r3, [r4, #20]
 80082cc:	b2f6      	uxtb	r6, r6
 80082ce:	4283      	cmp	r3, r0
 80082d0:	4637      	mov	r7, r6
 80082d2:	dc04      	bgt.n	80082de <__swbuf_r+0x42>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4628      	mov	r0, r5
 80082d8:	f000 f92e 	bl	8008538 <_fflush_r>
 80082dc:	bb30      	cbnz	r0, 800832c <__swbuf_r+0x90>
 80082de:	68a3      	ldr	r3, [r4, #8]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	60a3      	str	r3, [r4, #8]
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	6022      	str	r2, [r4, #0]
 80082ea:	701e      	strb	r6, [r3, #0]
 80082ec:	6963      	ldr	r3, [r4, #20]
 80082ee:	3001      	adds	r0, #1
 80082f0:	4283      	cmp	r3, r0
 80082f2:	d004      	beq.n	80082fe <__swbuf_r+0x62>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	07db      	lsls	r3, r3, #31
 80082f8:	d506      	bpl.n	8008308 <__swbuf_r+0x6c>
 80082fa:	2e0a      	cmp	r6, #10
 80082fc:	d104      	bne.n	8008308 <__swbuf_r+0x6c>
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f000 f919 	bl	8008538 <_fflush_r>
 8008306:	b988      	cbnz	r0, 800832c <__swbuf_r+0x90>
 8008308:	4638      	mov	r0, r7
 800830a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <__swbuf_r+0x9c>)
 800830e:	429c      	cmp	r4, r3
 8008310:	d101      	bne.n	8008316 <__swbuf_r+0x7a>
 8008312:	68ac      	ldr	r4, [r5, #8]
 8008314:	e7cf      	b.n	80082b6 <__swbuf_r+0x1a>
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <__swbuf_r+0xa0>)
 8008318:	429c      	cmp	r4, r3
 800831a:	bf08      	it	eq
 800831c:	68ec      	ldreq	r4, [r5, #12]
 800831e:	e7ca      	b.n	80082b6 <__swbuf_r+0x1a>
 8008320:	4621      	mov	r1, r4
 8008322:	4628      	mov	r0, r5
 8008324:	f000 f80c 	bl	8008340 <__swsetup_r>
 8008328:	2800      	cmp	r0, #0
 800832a:	d0cb      	beq.n	80082c4 <__swbuf_r+0x28>
 800832c:	f04f 37ff 	mov.w	r7, #4294967295
 8008330:	e7ea      	b.n	8008308 <__swbuf_r+0x6c>
 8008332:	bf00      	nop
 8008334:	080090e4 	.word	0x080090e4
 8008338:	08009104 	.word	0x08009104
 800833c:	080090c4 	.word	0x080090c4

08008340 <__swsetup_r>:
 8008340:	4b32      	ldr	r3, [pc, #200]	; (800840c <__swsetup_r+0xcc>)
 8008342:	b570      	push	{r4, r5, r6, lr}
 8008344:	681d      	ldr	r5, [r3, #0]
 8008346:	4606      	mov	r6, r0
 8008348:	460c      	mov	r4, r1
 800834a:	b125      	cbz	r5, 8008356 <__swsetup_r+0x16>
 800834c:	69ab      	ldr	r3, [r5, #24]
 800834e:	b913      	cbnz	r3, 8008356 <__swsetup_r+0x16>
 8008350:	4628      	mov	r0, r5
 8008352:	f000 f985 	bl	8008660 <__sinit>
 8008356:	4b2e      	ldr	r3, [pc, #184]	; (8008410 <__swsetup_r+0xd0>)
 8008358:	429c      	cmp	r4, r3
 800835a:	d10f      	bne.n	800837c <__swsetup_r+0x3c>
 800835c:	686c      	ldr	r4, [r5, #4]
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008364:	0719      	lsls	r1, r3, #28
 8008366:	d42c      	bmi.n	80083c2 <__swsetup_r+0x82>
 8008368:	06dd      	lsls	r5, r3, #27
 800836a:	d411      	bmi.n	8008390 <__swsetup_r+0x50>
 800836c:	2309      	movs	r3, #9
 800836e:	6033      	str	r3, [r6, #0]
 8008370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008374:	81a3      	strh	r3, [r4, #12]
 8008376:	f04f 30ff 	mov.w	r0, #4294967295
 800837a:	e03e      	b.n	80083fa <__swsetup_r+0xba>
 800837c:	4b25      	ldr	r3, [pc, #148]	; (8008414 <__swsetup_r+0xd4>)
 800837e:	429c      	cmp	r4, r3
 8008380:	d101      	bne.n	8008386 <__swsetup_r+0x46>
 8008382:	68ac      	ldr	r4, [r5, #8]
 8008384:	e7eb      	b.n	800835e <__swsetup_r+0x1e>
 8008386:	4b24      	ldr	r3, [pc, #144]	; (8008418 <__swsetup_r+0xd8>)
 8008388:	429c      	cmp	r4, r3
 800838a:	bf08      	it	eq
 800838c:	68ec      	ldreq	r4, [r5, #12]
 800838e:	e7e6      	b.n	800835e <__swsetup_r+0x1e>
 8008390:	0758      	lsls	r0, r3, #29
 8008392:	d512      	bpl.n	80083ba <__swsetup_r+0x7a>
 8008394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008396:	b141      	cbz	r1, 80083aa <__swsetup_r+0x6a>
 8008398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800839c:	4299      	cmp	r1, r3
 800839e:	d002      	beq.n	80083a6 <__swsetup_r+0x66>
 80083a0:	4630      	mov	r0, r6
 80083a2:	f000 fa7d 	bl	80088a0 <_free_r>
 80083a6:	2300      	movs	r3, #0
 80083a8:	6363      	str	r3, [r4, #52]	; 0x34
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	2300      	movs	r3, #0
 80083b4:	6063      	str	r3, [r4, #4]
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f043 0308 	orr.w	r3, r3, #8
 80083c0:	81a3      	strh	r3, [r4, #12]
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	b94b      	cbnz	r3, 80083da <__swsetup_r+0x9a>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d0:	d003      	beq.n	80083da <__swsetup_r+0x9a>
 80083d2:	4621      	mov	r1, r4
 80083d4:	4630      	mov	r0, r6
 80083d6:	f000 fa09 	bl	80087ec <__smakebuf_r>
 80083da:	89a0      	ldrh	r0, [r4, #12]
 80083dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083e0:	f010 0301 	ands.w	r3, r0, #1
 80083e4:	d00a      	beq.n	80083fc <__swsetup_r+0xbc>
 80083e6:	2300      	movs	r3, #0
 80083e8:	60a3      	str	r3, [r4, #8]
 80083ea:	6963      	ldr	r3, [r4, #20]
 80083ec:	425b      	negs	r3, r3
 80083ee:	61a3      	str	r3, [r4, #24]
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	b943      	cbnz	r3, 8008406 <__swsetup_r+0xc6>
 80083f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083f8:	d1ba      	bne.n	8008370 <__swsetup_r+0x30>
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	0781      	lsls	r1, r0, #30
 80083fe:	bf58      	it	pl
 8008400:	6963      	ldrpl	r3, [r4, #20]
 8008402:	60a3      	str	r3, [r4, #8]
 8008404:	e7f4      	b.n	80083f0 <__swsetup_r+0xb0>
 8008406:	2000      	movs	r0, #0
 8008408:	e7f7      	b.n	80083fa <__swsetup_r+0xba>
 800840a:	bf00      	nop
 800840c:	20000010 	.word	0x20000010
 8008410:	080090e4 	.word	0x080090e4
 8008414:	08009104 	.word	0x08009104
 8008418:	080090c4 	.word	0x080090c4

0800841c <abort>:
 800841c:	b508      	push	{r3, lr}
 800841e:	2006      	movs	r0, #6
 8008420:	f000 fce0 	bl	8008de4 <raise>
 8008424:	2001      	movs	r0, #1
 8008426:	f7f8 fe27 	bl	8001078 <_exit>
	...

0800842c <__sflush_r>:
 800842c:	898a      	ldrh	r2, [r1, #12]
 800842e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008432:	4605      	mov	r5, r0
 8008434:	0710      	lsls	r0, r2, #28
 8008436:	460c      	mov	r4, r1
 8008438:	d458      	bmi.n	80084ec <__sflush_r+0xc0>
 800843a:	684b      	ldr	r3, [r1, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	dc05      	bgt.n	800844c <__sflush_r+0x20>
 8008440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008442:	2b00      	cmp	r3, #0
 8008444:	dc02      	bgt.n	800844c <__sflush_r+0x20>
 8008446:	2000      	movs	r0, #0
 8008448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800844c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800844e:	2e00      	cmp	r6, #0
 8008450:	d0f9      	beq.n	8008446 <__sflush_r+0x1a>
 8008452:	2300      	movs	r3, #0
 8008454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008458:	682f      	ldr	r7, [r5, #0]
 800845a:	602b      	str	r3, [r5, #0]
 800845c:	d032      	beq.n	80084c4 <__sflush_r+0x98>
 800845e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	075a      	lsls	r2, r3, #29
 8008464:	d505      	bpl.n	8008472 <__sflush_r+0x46>
 8008466:	6863      	ldr	r3, [r4, #4]
 8008468:	1ac0      	subs	r0, r0, r3
 800846a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800846c:	b10b      	cbz	r3, 8008472 <__sflush_r+0x46>
 800846e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008470:	1ac0      	subs	r0, r0, r3
 8008472:	2300      	movs	r3, #0
 8008474:	4602      	mov	r2, r0
 8008476:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008478:	6a21      	ldr	r1, [r4, #32]
 800847a:	4628      	mov	r0, r5
 800847c:	47b0      	blx	r6
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	d106      	bne.n	8008492 <__sflush_r+0x66>
 8008484:	6829      	ldr	r1, [r5, #0]
 8008486:	291d      	cmp	r1, #29
 8008488:	d82c      	bhi.n	80084e4 <__sflush_r+0xb8>
 800848a:	4a2a      	ldr	r2, [pc, #168]	; (8008534 <__sflush_r+0x108>)
 800848c:	40ca      	lsrs	r2, r1
 800848e:	07d6      	lsls	r6, r2, #31
 8008490:	d528      	bpl.n	80084e4 <__sflush_r+0xb8>
 8008492:	2200      	movs	r2, #0
 8008494:	6062      	str	r2, [r4, #4]
 8008496:	04d9      	lsls	r1, r3, #19
 8008498:	6922      	ldr	r2, [r4, #16]
 800849a:	6022      	str	r2, [r4, #0]
 800849c:	d504      	bpl.n	80084a8 <__sflush_r+0x7c>
 800849e:	1c42      	adds	r2, r0, #1
 80084a0:	d101      	bne.n	80084a6 <__sflush_r+0x7a>
 80084a2:	682b      	ldr	r3, [r5, #0]
 80084a4:	b903      	cbnz	r3, 80084a8 <__sflush_r+0x7c>
 80084a6:	6560      	str	r0, [r4, #84]	; 0x54
 80084a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084aa:	602f      	str	r7, [r5, #0]
 80084ac:	2900      	cmp	r1, #0
 80084ae:	d0ca      	beq.n	8008446 <__sflush_r+0x1a>
 80084b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084b4:	4299      	cmp	r1, r3
 80084b6:	d002      	beq.n	80084be <__sflush_r+0x92>
 80084b8:	4628      	mov	r0, r5
 80084ba:	f000 f9f1 	bl	80088a0 <_free_r>
 80084be:	2000      	movs	r0, #0
 80084c0:	6360      	str	r0, [r4, #52]	; 0x34
 80084c2:	e7c1      	b.n	8008448 <__sflush_r+0x1c>
 80084c4:	6a21      	ldr	r1, [r4, #32]
 80084c6:	2301      	movs	r3, #1
 80084c8:	4628      	mov	r0, r5
 80084ca:	47b0      	blx	r6
 80084cc:	1c41      	adds	r1, r0, #1
 80084ce:	d1c7      	bne.n	8008460 <__sflush_r+0x34>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0c4      	beq.n	8008460 <__sflush_r+0x34>
 80084d6:	2b1d      	cmp	r3, #29
 80084d8:	d001      	beq.n	80084de <__sflush_r+0xb2>
 80084da:	2b16      	cmp	r3, #22
 80084dc:	d101      	bne.n	80084e2 <__sflush_r+0xb6>
 80084de:	602f      	str	r7, [r5, #0]
 80084e0:	e7b1      	b.n	8008446 <__sflush_r+0x1a>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	e7ad      	b.n	8008448 <__sflush_r+0x1c>
 80084ec:	690f      	ldr	r7, [r1, #16]
 80084ee:	2f00      	cmp	r7, #0
 80084f0:	d0a9      	beq.n	8008446 <__sflush_r+0x1a>
 80084f2:	0793      	lsls	r3, r2, #30
 80084f4:	680e      	ldr	r6, [r1, #0]
 80084f6:	bf08      	it	eq
 80084f8:	694b      	ldreq	r3, [r1, #20]
 80084fa:	600f      	str	r7, [r1, #0]
 80084fc:	bf18      	it	ne
 80084fe:	2300      	movne	r3, #0
 8008500:	eba6 0807 	sub.w	r8, r6, r7
 8008504:	608b      	str	r3, [r1, #8]
 8008506:	f1b8 0f00 	cmp.w	r8, #0
 800850a:	dd9c      	ble.n	8008446 <__sflush_r+0x1a>
 800850c:	6a21      	ldr	r1, [r4, #32]
 800850e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008510:	4643      	mov	r3, r8
 8008512:	463a      	mov	r2, r7
 8008514:	4628      	mov	r0, r5
 8008516:	47b0      	blx	r6
 8008518:	2800      	cmp	r0, #0
 800851a:	dc06      	bgt.n	800852a <__sflush_r+0xfe>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	e78e      	b.n	8008448 <__sflush_r+0x1c>
 800852a:	4407      	add	r7, r0
 800852c:	eba8 0800 	sub.w	r8, r8, r0
 8008530:	e7e9      	b.n	8008506 <__sflush_r+0xda>
 8008532:	bf00      	nop
 8008534:	20400001 	.word	0x20400001

08008538 <_fflush_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	690b      	ldr	r3, [r1, #16]
 800853c:	4605      	mov	r5, r0
 800853e:	460c      	mov	r4, r1
 8008540:	b913      	cbnz	r3, 8008548 <_fflush_r+0x10>
 8008542:	2500      	movs	r5, #0
 8008544:	4628      	mov	r0, r5
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	b118      	cbz	r0, 8008552 <_fflush_r+0x1a>
 800854a:	6983      	ldr	r3, [r0, #24]
 800854c:	b90b      	cbnz	r3, 8008552 <_fflush_r+0x1a>
 800854e:	f000 f887 	bl	8008660 <__sinit>
 8008552:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <_fflush_r+0x6c>)
 8008554:	429c      	cmp	r4, r3
 8008556:	d11b      	bne.n	8008590 <_fflush_r+0x58>
 8008558:	686c      	ldr	r4, [r5, #4]
 800855a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0ef      	beq.n	8008542 <_fflush_r+0xa>
 8008562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008564:	07d0      	lsls	r0, r2, #31
 8008566:	d404      	bmi.n	8008572 <_fflush_r+0x3a>
 8008568:	0599      	lsls	r1, r3, #22
 800856a:	d402      	bmi.n	8008572 <_fflush_r+0x3a>
 800856c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800856e:	f000 f915 	bl	800879c <__retarget_lock_acquire_recursive>
 8008572:	4628      	mov	r0, r5
 8008574:	4621      	mov	r1, r4
 8008576:	f7ff ff59 	bl	800842c <__sflush_r>
 800857a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800857c:	07da      	lsls	r2, r3, #31
 800857e:	4605      	mov	r5, r0
 8008580:	d4e0      	bmi.n	8008544 <_fflush_r+0xc>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	059b      	lsls	r3, r3, #22
 8008586:	d4dd      	bmi.n	8008544 <_fflush_r+0xc>
 8008588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858a:	f000 f908 	bl	800879e <__retarget_lock_release_recursive>
 800858e:	e7d9      	b.n	8008544 <_fflush_r+0xc>
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <_fflush_r+0x70>)
 8008592:	429c      	cmp	r4, r3
 8008594:	d101      	bne.n	800859a <_fflush_r+0x62>
 8008596:	68ac      	ldr	r4, [r5, #8]
 8008598:	e7df      	b.n	800855a <_fflush_r+0x22>
 800859a:	4b04      	ldr	r3, [pc, #16]	; (80085ac <_fflush_r+0x74>)
 800859c:	429c      	cmp	r4, r3
 800859e:	bf08      	it	eq
 80085a0:	68ec      	ldreq	r4, [r5, #12]
 80085a2:	e7da      	b.n	800855a <_fflush_r+0x22>
 80085a4:	080090e4 	.word	0x080090e4
 80085a8:	08009104 	.word	0x08009104
 80085ac:	080090c4 	.word	0x080090c4

080085b0 <std>:
 80085b0:	2300      	movs	r3, #0
 80085b2:	b510      	push	{r4, lr}
 80085b4:	4604      	mov	r4, r0
 80085b6:	e9c0 3300 	strd	r3, r3, [r0]
 80085ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085be:	6083      	str	r3, [r0, #8]
 80085c0:	8181      	strh	r1, [r0, #12]
 80085c2:	6643      	str	r3, [r0, #100]	; 0x64
 80085c4:	81c2      	strh	r2, [r0, #14]
 80085c6:	6183      	str	r3, [r0, #24]
 80085c8:	4619      	mov	r1, r3
 80085ca:	2208      	movs	r2, #8
 80085cc:	305c      	adds	r0, #92	; 0x5c
 80085ce:	f7ff fb35 	bl	8007c3c <memset>
 80085d2:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <std+0x38>)
 80085d4:	6263      	str	r3, [r4, #36]	; 0x24
 80085d6:	4b05      	ldr	r3, [pc, #20]	; (80085ec <std+0x3c>)
 80085d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80085da:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <std+0x40>)
 80085dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <std+0x44>)
 80085e0:	6224      	str	r4, [r4, #32]
 80085e2:	6323      	str	r3, [r4, #48]	; 0x30
 80085e4:	bd10      	pop	{r4, pc}
 80085e6:	bf00      	nop
 80085e8:	08008e1d 	.word	0x08008e1d
 80085ec:	08008e3f 	.word	0x08008e3f
 80085f0:	08008e77 	.word	0x08008e77
 80085f4:	08008e9b 	.word	0x08008e9b

080085f8 <_cleanup_r>:
 80085f8:	4901      	ldr	r1, [pc, #4]	; (8008600 <_cleanup_r+0x8>)
 80085fa:	f000 b8af 	b.w	800875c <_fwalk_reent>
 80085fe:	bf00      	nop
 8008600:	08008539 	.word	0x08008539

08008604 <__sfmoreglue>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	2268      	movs	r2, #104	; 0x68
 8008608:	1e4d      	subs	r5, r1, #1
 800860a:	4355      	muls	r5, r2
 800860c:	460e      	mov	r6, r1
 800860e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008612:	f000 f9b1 	bl	8008978 <_malloc_r>
 8008616:	4604      	mov	r4, r0
 8008618:	b140      	cbz	r0, 800862c <__sfmoreglue+0x28>
 800861a:	2100      	movs	r1, #0
 800861c:	e9c0 1600 	strd	r1, r6, [r0]
 8008620:	300c      	adds	r0, #12
 8008622:	60a0      	str	r0, [r4, #8]
 8008624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008628:	f7ff fb08 	bl	8007c3c <memset>
 800862c:	4620      	mov	r0, r4
 800862e:	bd70      	pop	{r4, r5, r6, pc}

08008630 <__sfp_lock_acquire>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sfp_lock_acquire+0x8>)
 8008632:	f000 b8b3 	b.w	800879c <__retarget_lock_acquire_recursive>
 8008636:	bf00      	nop
 8008638:	20004415 	.word	0x20004415

0800863c <__sfp_lock_release>:
 800863c:	4801      	ldr	r0, [pc, #4]	; (8008644 <__sfp_lock_release+0x8>)
 800863e:	f000 b8ae 	b.w	800879e <__retarget_lock_release_recursive>
 8008642:	bf00      	nop
 8008644:	20004415 	.word	0x20004415

08008648 <__sinit_lock_acquire>:
 8008648:	4801      	ldr	r0, [pc, #4]	; (8008650 <__sinit_lock_acquire+0x8>)
 800864a:	f000 b8a7 	b.w	800879c <__retarget_lock_acquire_recursive>
 800864e:	bf00      	nop
 8008650:	20004416 	.word	0x20004416

08008654 <__sinit_lock_release>:
 8008654:	4801      	ldr	r0, [pc, #4]	; (800865c <__sinit_lock_release+0x8>)
 8008656:	f000 b8a2 	b.w	800879e <__retarget_lock_release_recursive>
 800865a:	bf00      	nop
 800865c:	20004416 	.word	0x20004416

08008660 <__sinit>:
 8008660:	b510      	push	{r4, lr}
 8008662:	4604      	mov	r4, r0
 8008664:	f7ff fff0 	bl	8008648 <__sinit_lock_acquire>
 8008668:	69a3      	ldr	r3, [r4, #24]
 800866a:	b11b      	cbz	r3, 8008674 <__sinit+0x14>
 800866c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008670:	f7ff bff0 	b.w	8008654 <__sinit_lock_release>
 8008674:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008678:	6523      	str	r3, [r4, #80]	; 0x50
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <__sinit+0x68>)
 800867c:	4a13      	ldr	r2, [pc, #76]	; (80086cc <__sinit+0x6c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	62a2      	str	r2, [r4, #40]	; 0x28
 8008682:	42a3      	cmp	r3, r4
 8008684:	bf04      	itt	eq
 8008686:	2301      	moveq	r3, #1
 8008688:	61a3      	streq	r3, [r4, #24]
 800868a:	4620      	mov	r0, r4
 800868c:	f000 f820 	bl	80086d0 <__sfp>
 8008690:	6060      	str	r0, [r4, #4]
 8008692:	4620      	mov	r0, r4
 8008694:	f000 f81c 	bl	80086d0 <__sfp>
 8008698:	60a0      	str	r0, [r4, #8]
 800869a:	4620      	mov	r0, r4
 800869c:	f000 f818 	bl	80086d0 <__sfp>
 80086a0:	2200      	movs	r2, #0
 80086a2:	60e0      	str	r0, [r4, #12]
 80086a4:	2104      	movs	r1, #4
 80086a6:	6860      	ldr	r0, [r4, #4]
 80086a8:	f7ff ff82 	bl	80085b0 <std>
 80086ac:	68a0      	ldr	r0, [r4, #8]
 80086ae:	2201      	movs	r2, #1
 80086b0:	2109      	movs	r1, #9
 80086b2:	f7ff ff7d 	bl	80085b0 <std>
 80086b6:	68e0      	ldr	r0, [r4, #12]
 80086b8:	2202      	movs	r2, #2
 80086ba:	2112      	movs	r1, #18
 80086bc:	f7ff ff78 	bl	80085b0 <std>
 80086c0:	2301      	movs	r3, #1
 80086c2:	61a3      	str	r3, [r4, #24]
 80086c4:	e7d2      	b.n	800866c <__sinit+0xc>
 80086c6:	bf00      	nop
 80086c8:	0800908c 	.word	0x0800908c
 80086cc:	080085f9 	.word	0x080085f9

080086d0 <__sfp>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	4607      	mov	r7, r0
 80086d4:	f7ff ffac 	bl	8008630 <__sfp_lock_acquire>
 80086d8:	4b1e      	ldr	r3, [pc, #120]	; (8008754 <__sfp+0x84>)
 80086da:	681e      	ldr	r6, [r3, #0]
 80086dc:	69b3      	ldr	r3, [r6, #24]
 80086de:	b913      	cbnz	r3, 80086e6 <__sfp+0x16>
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7ff ffbd 	bl	8008660 <__sinit>
 80086e6:	3648      	adds	r6, #72	; 0x48
 80086e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	d503      	bpl.n	80086f8 <__sfp+0x28>
 80086f0:	6833      	ldr	r3, [r6, #0]
 80086f2:	b30b      	cbz	r3, 8008738 <__sfp+0x68>
 80086f4:	6836      	ldr	r6, [r6, #0]
 80086f6:	e7f7      	b.n	80086e8 <__sfp+0x18>
 80086f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086fc:	b9d5      	cbnz	r5, 8008734 <__sfp+0x64>
 80086fe:	4b16      	ldr	r3, [pc, #88]	; (8008758 <__sfp+0x88>)
 8008700:	60e3      	str	r3, [r4, #12]
 8008702:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008706:	6665      	str	r5, [r4, #100]	; 0x64
 8008708:	f000 f847 	bl	800879a <__retarget_lock_init_recursive>
 800870c:	f7ff ff96 	bl	800863c <__sfp_lock_release>
 8008710:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008714:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008718:	6025      	str	r5, [r4, #0]
 800871a:	61a5      	str	r5, [r4, #24]
 800871c:	2208      	movs	r2, #8
 800871e:	4629      	mov	r1, r5
 8008720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008724:	f7ff fa8a 	bl	8007c3c <memset>
 8008728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800872c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008730:	4620      	mov	r0, r4
 8008732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008734:	3468      	adds	r4, #104	; 0x68
 8008736:	e7d9      	b.n	80086ec <__sfp+0x1c>
 8008738:	2104      	movs	r1, #4
 800873a:	4638      	mov	r0, r7
 800873c:	f7ff ff62 	bl	8008604 <__sfmoreglue>
 8008740:	4604      	mov	r4, r0
 8008742:	6030      	str	r0, [r6, #0]
 8008744:	2800      	cmp	r0, #0
 8008746:	d1d5      	bne.n	80086f4 <__sfp+0x24>
 8008748:	f7ff ff78 	bl	800863c <__sfp_lock_release>
 800874c:	230c      	movs	r3, #12
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	e7ee      	b.n	8008730 <__sfp+0x60>
 8008752:	bf00      	nop
 8008754:	0800908c 	.word	0x0800908c
 8008758:	ffff0001 	.word	0xffff0001

0800875c <_fwalk_reent>:
 800875c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008760:	4606      	mov	r6, r0
 8008762:	4688      	mov	r8, r1
 8008764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008768:	2700      	movs	r7, #0
 800876a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800876e:	f1b9 0901 	subs.w	r9, r9, #1
 8008772:	d505      	bpl.n	8008780 <_fwalk_reent+0x24>
 8008774:	6824      	ldr	r4, [r4, #0]
 8008776:	2c00      	cmp	r4, #0
 8008778:	d1f7      	bne.n	800876a <_fwalk_reent+0xe>
 800877a:	4638      	mov	r0, r7
 800877c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008780:	89ab      	ldrh	r3, [r5, #12]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d907      	bls.n	8008796 <_fwalk_reent+0x3a>
 8008786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800878a:	3301      	adds	r3, #1
 800878c:	d003      	beq.n	8008796 <_fwalk_reent+0x3a>
 800878e:	4629      	mov	r1, r5
 8008790:	4630      	mov	r0, r6
 8008792:	47c0      	blx	r8
 8008794:	4307      	orrs	r7, r0
 8008796:	3568      	adds	r5, #104	; 0x68
 8008798:	e7e9      	b.n	800876e <_fwalk_reent+0x12>

0800879a <__retarget_lock_init_recursive>:
 800879a:	4770      	bx	lr

0800879c <__retarget_lock_acquire_recursive>:
 800879c:	4770      	bx	lr

0800879e <__retarget_lock_release_recursive>:
 800879e:	4770      	bx	lr

080087a0 <__swhatbuf_r>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	460e      	mov	r6, r1
 80087a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a8:	2900      	cmp	r1, #0
 80087aa:	b096      	sub	sp, #88	; 0x58
 80087ac:	4614      	mov	r4, r2
 80087ae:	461d      	mov	r5, r3
 80087b0:	da08      	bge.n	80087c4 <__swhatbuf_r+0x24>
 80087b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	061a      	lsls	r2, r3, #24
 80087bc:	d410      	bmi.n	80087e0 <__swhatbuf_r+0x40>
 80087be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c2:	e00e      	b.n	80087e2 <__swhatbuf_r+0x42>
 80087c4:	466a      	mov	r2, sp
 80087c6:	f000 fb8f 	bl	8008ee8 <_fstat_r>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	dbf1      	blt.n	80087b2 <__swhatbuf_r+0x12>
 80087ce:	9a01      	ldr	r2, [sp, #4]
 80087d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087d8:	425a      	negs	r2, r3
 80087da:	415a      	adcs	r2, r3
 80087dc:	602a      	str	r2, [r5, #0]
 80087de:	e7ee      	b.n	80087be <__swhatbuf_r+0x1e>
 80087e0:	2340      	movs	r3, #64	; 0x40
 80087e2:	2000      	movs	r0, #0
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	b016      	add	sp, #88	; 0x58
 80087e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080087ec <__smakebuf_r>:
 80087ec:	898b      	ldrh	r3, [r1, #12]
 80087ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087f0:	079d      	lsls	r5, r3, #30
 80087f2:	4606      	mov	r6, r0
 80087f4:	460c      	mov	r4, r1
 80087f6:	d507      	bpl.n	8008808 <__smakebuf_r+0x1c>
 80087f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	2301      	movs	r3, #1
 8008802:	6163      	str	r3, [r4, #20]
 8008804:	b002      	add	sp, #8
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	ab01      	add	r3, sp, #4
 800880a:	466a      	mov	r2, sp
 800880c:	f7ff ffc8 	bl	80087a0 <__swhatbuf_r>
 8008810:	9900      	ldr	r1, [sp, #0]
 8008812:	4605      	mov	r5, r0
 8008814:	4630      	mov	r0, r6
 8008816:	f000 f8af 	bl	8008978 <_malloc_r>
 800881a:	b948      	cbnz	r0, 8008830 <__smakebuf_r+0x44>
 800881c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008820:	059a      	lsls	r2, r3, #22
 8008822:	d4ef      	bmi.n	8008804 <__smakebuf_r+0x18>
 8008824:	f023 0303 	bic.w	r3, r3, #3
 8008828:	f043 0302 	orr.w	r3, r3, #2
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	e7e3      	b.n	80087f8 <__smakebuf_r+0xc>
 8008830:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <__smakebuf_r+0x7c>)
 8008832:	62b3      	str	r3, [r6, #40]	; 0x28
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	6020      	str	r0, [r4, #0]
 8008838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	9b00      	ldr	r3, [sp, #0]
 8008840:	6163      	str	r3, [r4, #20]
 8008842:	9b01      	ldr	r3, [sp, #4]
 8008844:	6120      	str	r0, [r4, #16]
 8008846:	b15b      	cbz	r3, 8008860 <__smakebuf_r+0x74>
 8008848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800884c:	4630      	mov	r0, r6
 800884e:	f000 fb5d 	bl	8008f0c <_isatty_r>
 8008852:	b128      	cbz	r0, 8008860 <__smakebuf_r+0x74>
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	f023 0303 	bic.w	r3, r3, #3
 800885a:	f043 0301 	orr.w	r3, r3, #1
 800885e:	81a3      	strh	r3, [r4, #12]
 8008860:	89a0      	ldrh	r0, [r4, #12]
 8008862:	4305      	orrs	r5, r0
 8008864:	81a5      	strh	r5, [r4, #12]
 8008866:	e7cd      	b.n	8008804 <__smakebuf_r+0x18>
 8008868:	080085f9 	.word	0x080085f9

0800886c <memmove>:
 800886c:	4288      	cmp	r0, r1
 800886e:	b510      	push	{r4, lr}
 8008870:	eb01 0402 	add.w	r4, r1, r2
 8008874:	d902      	bls.n	800887c <memmove+0x10>
 8008876:	4284      	cmp	r4, r0
 8008878:	4623      	mov	r3, r4
 800887a:	d807      	bhi.n	800888c <memmove+0x20>
 800887c:	1e43      	subs	r3, r0, #1
 800887e:	42a1      	cmp	r1, r4
 8008880:	d008      	beq.n	8008894 <memmove+0x28>
 8008882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800888a:	e7f8      	b.n	800887e <memmove+0x12>
 800888c:	4402      	add	r2, r0
 800888e:	4601      	mov	r1, r0
 8008890:	428a      	cmp	r2, r1
 8008892:	d100      	bne.n	8008896 <memmove+0x2a>
 8008894:	bd10      	pop	{r4, pc}
 8008896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800889a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800889e:	e7f7      	b.n	8008890 <memmove+0x24>

080088a0 <_free_r>:
 80088a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088a2:	2900      	cmp	r1, #0
 80088a4:	d044      	beq.n	8008930 <_free_r+0x90>
 80088a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088aa:	9001      	str	r0, [sp, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f1a1 0404 	sub.w	r4, r1, #4
 80088b2:	bfb8      	it	lt
 80088b4:	18e4      	addlt	r4, r4, r3
 80088b6:	f000 fb4b 	bl	8008f50 <__malloc_lock>
 80088ba:	4a1e      	ldr	r2, [pc, #120]	; (8008934 <_free_r+0x94>)
 80088bc:	9801      	ldr	r0, [sp, #4]
 80088be:	6813      	ldr	r3, [r2, #0]
 80088c0:	b933      	cbnz	r3, 80088d0 <_free_r+0x30>
 80088c2:	6063      	str	r3, [r4, #4]
 80088c4:	6014      	str	r4, [r2, #0]
 80088c6:	b003      	add	sp, #12
 80088c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088cc:	f000 bb46 	b.w	8008f5c <__malloc_unlock>
 80088d0:	42a3      	cmp	r3, r4
 80088d2:	d908      	bls.n	80088e6 <_free_r+0x46>
 80088d4:	6825      	ldr	r5, [r4, #0]
 80088d6:	1961      	adds	r1, r4, r5
 80088d8:	428b      	cmp	r3, r1
 80088da:	bf01      	itttt	eq
 80088dc:	6819      	ldreq	r1, [r3, #0]
 80088de:	685b      	ldreq	r3, [r3, #4]
 80088e0:	1949      	addeq	r1, r1, r5
 80088e2:	6021      	streq	r1, [r4, #0]
 80088e4:	e7ed      	b.n	80088c2 <_free_r+0x22>
 80088e6:	461a      	mov	r2, r3
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	b10b      	cbz	r3, 80088f0 <_free_r+0x50>
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	d9fa      	bls.n	80088e6 <_free_r+0x46>
 80088f0:	6811      	ldr	r1, [r2, #0]
 80088f2:	1855      	adds	r5, r2, r1
 80088f4:	42a5      	cmp	r5, r4
 80088f6:	d10b      	bne.n	8008910 <_free_r+0x70>
 80088f8:	6824      	ldr	r4, [r4, #0]
 80088fa:	4421      	add	r1, r4
 80088fc:	1854      	adds	r4, r2, r1
 80088fe:	42a3      	cmp	r3, r4
 8008900:	6011      	str	r1, [r2, #0]
 8008902:	d1e0      	bne.n	80088c6 <_free_r+0x26>
 8008904:	681c      	ldr	r4, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	6053      	str	r3, [r2, #4]
 800890a:	4421      	add	r1, r4
 800890c:	6011      	str	r1, [r2, #0]
 800890e:	e7da      	b.n	80088c6 <_free_r+0x26>
 8008910:	d902      	bls.n	8008918 <_free_r+0x78>
 8008912:	230c      	movs	r3, #12
 8008914:	6003      	str	r3, [r0, #0]
 8008916:	e7d6      	b.n	80088c6 <_free_r+0x26>
 8008918:	6825      	ldr	r5, [r4, #0]
 800891a:	1961      	adds	r1, r4, r5
 800891c:	428b      	cmp	r3, r1
 800891e:	bf04      	itt	eq
 8008920:	6819      	ldreq	r1, [r3, #0]
 8008922:	685b      	ldreq	r3, [r3, #4]
 8008924:	6063      	str	r3, [r4, #4]
 8008926:	bf04      	itt	eq
 8008928:	1949      	addeq	r1, r1, r5
 800892a:	6021      	streq	r1, [r4, #0]
 800892c:	6054      	str	r4, [r2, #4]
 800892e:	e7ca      	b.n	80088c6 <_free_r+0x26>
 8008930:	b003      	add	sp, #12
 8008932:	bd30      	pop	{r4, r5, pc}
 8008934:	20004418 	.word	0x20004418

08008938 <sbrk_aligned>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	4e0e      	ldr	r6, [pc, #56]	; (8008974 <sbrk_aligned+0x3c>)
 800893c:	460c      	mov	r4, r1
 800893e:	6831      	ldr	r1, [r6, #0]
 8008940:	4605      	mov	r5, r0
 8008942:	b911      	cbnz	r1, 800894a <sbrk_aligned+0x12>
 8008944:	f000 fa16 	bl	8008d74 <_sbrk_r>
 8008948:	6030      	str	r0, [r6, #0]
 800894a:	4621      	mov	r1, r4
 800894c:	4628      	mov	r0, r5
 800894e:	f000 fa11 	bl	8008d74 <_sbrk_r>
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	d00a      	beq.n	800896c <sbrk_aligned+0x34>
 8008956:	1cc4      	adds	r4, r0, #3
 8008958:	f024 0403 	bic.w	r4, r4, #3
 800895c:	42a0      	cmp	r0, r4
 800895e:	d007      	beq.n	8008970 <sbrk_aligned+0x38>
 8008960:	1a21      	subs	r1, r4, r0
 8008962:	4628      	mov	r0, r5
 8008964:	f000 fa06 	bl	8008d74 <_sbrk_r>
 8008968:	3001      	adds	r0, #1
 800896a:	d101      	bne.n	8008970 <sbrk_aligned+0x38>
 800896c:	f04f 34ff 	mov.w	r4, #4294967295
 8008970:	4620      	mov	r0, r4
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	2000441c 	.word	0x2000441c

08008978 <_malloc_r>:
 8008978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897c:	1ccd      	adds	r5, r1, #3
 800897e:	f025 0503 	bic.w	r5, r5, #3
 8008982:	3508      	adds	r5, #8
 8008984:	2d0c      	cmp	r5, #12
 8008986:	bf38      	it	cc
 8008988:	250c      	movcc	r5, #12
 800898a:	2d00      	cmp	r5, #0
 800898c:	4607      	mov	r7, r0
 800898e:	db01      	blt.n	8008994 <_malloc_r+0x1c>
 8008990:	42a9      	cmp	r1, r5
 8008992:	d905      	bls.n	80089a0 <_malloc_r+0x28>
 8008994:	230c      	movs	r3, #12
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	2600      	movs	r6, #0
 800899a:	4630      	mov	r0, r6
 800899c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a0:	4e2e      	ldr	r6, [pc, #184]	; (8008a5c <_malloc_r+0xe4>)
 80089a2:	f000 fad5 	bl	8008f50 <__malloc_lock>
 80089a6:	6833      	ldr	r3, [r6, #0]
 80089a8:	461c      	mov	r4, r3
 80089aa:	bb34      	cbnz	r4, 80089fa <_malloc_r+0x82>
 80089ac:	4629      	mov	r1, r5
 80089ae:	4638      	mov	r0, r7
 80089b0:	f7ff ffc2 	bl	8008938 <sbrk_aligned>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	4604      	mov	r4, r0
 80089b8:	d14d      	bne.n	8008a56 <_malloc_r+0xde>
 80089ba:	6834      	ldr	r4, [r6, #0]
 80089bc:	4626      	mov	r6, r4
 80089be:	2e00      	cmp	r6, #0
 80089c0:	d140      	bne.n	8008a44 <_malloc_r+0xcc>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	4631      	mov	r1, r6
 80089c6:	4638      	mov	r0, r7
 80089c8:	eb04 0803 	add.w	r8, r4, r3
 80089cc:	f000 f9d2 	bl	8008d74 <_sbrk_r>
 80089d0:	4580      	cmp	r8, r0
 80089d2:	d13a      	bne.n	8008a4a <_malloc_r+0xd2>
 80089d4:	6821      	ldr	r1, [r4, #0]
 80089d6:	3503      	adds	r5, #3
 80089d8:	1a6d      	subs	r5, r5, r1
 80089da:	f025 0503 	bic.w	r5, r5, #3
 80089de:	3508      	adds	r5, #8
 80089e0:	2d0c      	cmp	r5, #12
 80089e2:	bf38      	it	cc
 80089e4:	250c      	movcc	r5, #12
 80089e6:	4629      	mov	r1, r5
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7ff ffa5 	bl	8008938 <sbrk_aligned>
 80089ee:	3001      	adds	r0, #1
 80089f0:	d02b      	beq.n	8008a4a <_malloc_r+0xd2>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	442b      	add	r3, r5
 80089f6:	6023      	str	r3, [r4, #0]
 80089f8:	e00e      	b.n	8008a18 <_malloc_r+0xa0>
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	1b52      	subs	r2, r2, r5
 80089fe:	d41e      	bmi.n	8008a3e <_malloc_r+0xc6>
 8008a00:	2a0b      	cmp	r2, #11
 8008a02:	d916      	bls.n	8008a32 <_malloc_r+0xba>
 8008a04:	1961      	adds	r1, r4, r5
 8008a06:	42a3      	cmp	r3, r4
 8008a08:	6025      	str	r5, [r4, #0]
 8008a0a:	bf18      	it	ne
 8008a0c:	6059      	strne	r1, [r3, #4]
 8008a0e:	6863      	ldr	r3, [r4, #4]
 8008a10:	bf08      	it	eq
 8008a12:	6031      	streq	r1, [r6, #0]
 8008a14:	5162      	str	r2, [r4, r5]
 8008a16:	604b      	str	r3, [r1, #4]
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f104 060b 	add.w	r6, r4, #11
 8008a1e:	f000 fa9d 	bl	8008f5c <__malloc_unlock>
 8008a22:	f026 0607 	bic.w	r6, r6, #7
 8008a26:	1d23      	adds	r3, r4, #4
 8008a28:	1af2      	subs	r2, r6, r3
 8008a2a:	d0b6      	beq.n	800899a <_malloc_r+0x22>
 8008a2c:	1b9b      	subs	r3, r3, r6
 8008a2e:	50a3      	str	r3, [r4, r2]
 8008a30:	e7b3      	b.n	800899a <_malloc_r+0x22>
 8008a32:	6862      	ldr	r2, [r4, #4]
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	bf0c      	ite	eq
 8008a38:	6032      	streq	r2, [r6, #0]
 8008a3a:	605a      	strne	r2, [r3, #4]
 8008a3c:	e7ec      	b.n	8008a18 <_malloc_r+0xa0>
 8008a3e:	4623      	mov	r3, r4
 8008a40:	6864      	ldr	r4, [r4, #4]
 8008a42:	e7b2      	b.n	80089aa <_malloc_r+0x32>
 8008a44:	4634      	mov	r4, r6
 8008a46:	6876      	ldr	r6, [r6, #4]
 8008a48:	e7b9      	b.n	80089be <_malloc_r+0x46>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f000 fa84 	bl	8008f5c <__malloc_unlock>
 8008a54:	e7a1      	b.n	800899a <_malloc_r+0x22>
 8008a56:	6025      	str	r5, [r4, #0]
 8008a58:	e7de      	b.n	8008a18 <_malloc_r+0xa0>
 8008a5a:	bf00      	nop
 8008a5c:	20004418 	.word	0x20004418

08008a60 <_realloc_r>:
 8008a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	4680      	mov	r8, r0
 8008a66:	4614      	mov	r4, r2
 8008a68:	460e      	mov	r6, r1
 8008a6a:	b921      	cbnz	r1, 8008a76 <_realloc_r+0x16>
 8008a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a70:	4611      	mov	r1, r2
 8008a72:	f7ff bf81 	b.w	8008978 <_malloc_r>
 8008a76:	b92a      	cbnz	r2, 8008a84 <_realloc_r+0x24>
 8008a78:	f7ff ff12 	bl	80088a0 <_free_r>
 8008a7c:	4625      	mov	r5, r4
 8008a7e:	4628      	mov	r0, r5
 8008a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a84:	f000 fa70 	bl	8008f68 <_malloc_usable_size_r>
 8008a88:	4284      	cmp	r4, r0
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	d802      	bhi.n	8008a94 <_realloc_r+0x34>
 8008a8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a92:	d812      	bhi.n	8008aba <_realloc_r+0x5a>
 8008a94:	4621      	mov	r1, r4
 8008a96:	4640      	mov	r0, r8
 8008a98:	f7ff ff6e 	bl	8008978 <_malloc_r>
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0ed      	beq.n	8008a7e <_realloc_r+0x1e>
 8008aa2:	42bc      	cmp	r4, r7
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	bf28      	it	cs
 8008aaa:	463a      	movcs	r2, r7
 8008aac:	f7ff f8b8 	bl	8007c20 <memcpy>
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f7ff fef4 	bl	80088a0 <_free_r>
 8008ab8:	e7e1      	b.n	8008a7e <_realloc_r+0x1e>
 8008aba:	4635      	mov	r5, r6
 8008abc:	e7df      	b.n	8008a7e <_realloc_r+0x1e>

08008abe <__ssputs_r>:
 8008abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac2:	688e      	ldr	r6, [r1, #8]
 8008ac4:	429e      	cmp	r6, r3
 8008ac6:	4682      	mov	sl, r0
 8008ac8:	460c      	mov	r4, r1
 8008aca:	4690      	mov	r8, r2
 8008acc:	461f      	mov	r7, r3
 8008ace:	d838      	bhi.n	8008b42 <__ssputs_r+0x84>
 8008ad0:	898a      	ldrh	r2, [r1, #12]
 8008ad2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ad6:	d032      	beq.n	8008b3e <__ssputs_r+0x80>
 8008ad8:	6825      	ldr	r5, [r4, #0]
 8008ada:	6909      	ldr	r1, [r1, #16]
 8008adc:	eba5 0901 	sub.w	r9, r5, r1
 8008ae0:	6965      	ldr	r5, [r4, #20]
 8008ae2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ae6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008aea:	3301      	adds	r3, #1
 8008aec:	444b      	add	r3, r9
 8008aee:	106d      	asrs	r5, r5, #1
 8008af0:	429d      	cmp	r5, r3
 8008af2:	bf38      	it	cc
 8008af4:	461d      	movcc	r5, r3
 8008af6:	0553      	lsls	r3, r2, #21
 8008af8:	d531      	bpl.n	8008b5e <__ssputs_r+0xa0>
 8008afa:	4629      	mov	r1, r5
 8008afc:	f7ff ff3c 	bl	8008978 <_malloc_r>
 8008b00:	4606      	mov	r6, r0
 8008b02:	b950      	cbnz	r0, 8008b1a <__ssputs_r+0x5c>
 8008b04:	230c      	movs	r3, #12
 8008b06:	f8ca 3000 	str.w	r3, [sl]
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	6921      	ldr	r1, [r4, #16]
 8008b1c:	464a      	mov	r2, r9
 8008b1e:	f7ff f87f 	bl	8007c20 <memcpy>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2c:	81a3      	strh	r3, [r4, #12]
 8008b2e:	6126      	str	r6, [r4, #16]
 8008b30:	6165      	str	r5, [r4, #20]
 8008b32:	444e      	add	r6, r9
 8008b34:	eba5 0509 	sub.w	r5, r5, r9
 8008b38:	6026      	str	r6, [r4, #0]
 8008b3a:	60a5      	str	r5, [r4, #8]
 8008b3c:	463e      	mov	r6, r7
 8008b3e:	42be      	cmp	r6, r7
 8008b40:	d900      	bls.n	8008b44 <__ssputs_r+0x86>
 8008b42:	463e      	mov	r6, r7
 8008b44:	6820      	ldr	r0, [r4, #0]
 8008b46:	4632      	mov	r2, r6
 8008b48:	4641      	mov	r1, r8
 8008b4a:	f7ff fe8f 	bl	800886c <memmove>
 8008b4e:	68a3      	ldr	r3, [r4, #8]
 8008b50:	1b9b      	subs	r3, r3, r6
 8008b52:	60a3      	str	r3, [r4, #8]
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	4433      	add	r3, r6
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e7db      	b.n	8008b16 <__ssputs_r+0x58>
 8008b5e:	462a      	mov	r2, r5
 8008b60:	f7ff ff7e 	bl	8008a60 <_realloc_r>
 8008b64:	4606      	mov	r6, r0
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d1e1      	bne.n	8008b2e <__ssputs_r+0x70>
 8008b6a:	6921      	ldr	r1, [r4, #16]
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	f7ff fe97 	bl	80088a0 <_free_r>
 8008b72:	e7c7      	b.n	8008b04 <__ssputs_r+0x46>

08008b74 <_svfiprintf_r>:
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	4698      	mov	r8, r3
 8008b7a:	898b      	ldrh	r3, [r1, #12]
 8008b7c:	061b      	lsls	r3, r3, #24
 8008b7e:	b09d      	sub	sp, #116	; 0x74
 8008b80:	4607      	mov	r7, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	4614      	mov	r4, r2
 8008b86:	d50e      	bpl.n	8008ba6 <_svfiprintf_r+0x32>
 8008b88:	690b      	ldr	r3, [r1, #16]
 8008b8a:	b963      	cbnz	r3, 8008ba6 <_svfiprintf_r+0x32>
 8008b8c:	2140      	movs	r1, #64	; 0x40
 8008b8e:	f7ff fef3 	bl	8008978 <_malloc_r>
 8008b92:	6028      	str	r0, [r5, #0]
 8008b94:	6128      	str	r0, [r5, #16]
 8008b96:	b920      	cbnz	r0, 8008ba2 <_svfiprintf_r+0x2e>
 8008b98:	230c      	movs	r3, #12
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	e0d1      	b.n	8008d46 <_svfiprintf_r+0x1d2>
 8008ba2:	2340      	movs	r3, #64	; 0x40
 8008ba4:	616b      	str	r3, [r5, #20]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8008baa:	2320      	movs	r3, #32
 8008bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb4:	2330      	movs	r3, #48	; 0x30
 8008bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d60 <_svfiprintf_r+0x1ec>
 8008bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bbe:	f04f 0901 	mov.w	r9, #1
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	469a      	mov	sl, r3
 8008bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bca:	b10a      	cbz	r2, 8008bd0 <_svfiprintf_r+0x5c>
 8008bcc:	2a25      	cmp	r2, #37	; 0x25
 8008bce:	d1f9      	bne.n	8008bc4 <_svfiprintf_r+0x50>
 8008bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd4:	d00b      	beq.n	8008bee <_svfiprintf_r+0x7a>
 8008bd6:	465b      	mov	r3, fp
 8008bd8:	4622      	mov	r2, r4
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4638      	mov	r0, r7
 8008bde:	f7ff ff6e 	bl	8008abe <__ssputs_r>
 8008be2:	3001      	adds	r0, #1
 8008be4:	f000 80aa 	beq.w	8008d3c <_svfiprintf_r+0x1c8>
 8008be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bea:	445a      	add	r2, fp
 8008bec:	9209      	str	r2, [sp, #36]	; 0x24
 8008bee:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 80a2 	beq.w	8008d3c <_svfiprintf_r+0x1c8>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c02:	f10a 0a01 	add.w	sl, sl, #1
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	9307      	str	r3, [sp, #28]
 8008c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c10:	4654      	mov	r4, sl
 8008c12:	2205      	movs	r2, #5
 8008c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c18:	4851      	ldr	r0, [pc, #324]	; (8008d60 <_svfiprintf_r+0x1ec>)
 8008c1a:	f7f7 fb19 	bl	8000250 <memchr>
 8008c1e:	9a04      	ldr	r2, [sp, #16]
 8008c20:	b9d8      	cbnz	r0, 8008c5a <_svfiprintf_r+0xe6>
 8008c22:	06d0      	lsls	r0, r2, #27
 8008c24:	bf44      	itt	mi
 8008c26:	2320      	movmi	r3, #32
 8008c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c2c:	0711      	lsls	r1, r2, #28
 8008c2e:	bf44      	itt	mi
 8008c30:	232b      	movmi	r3, #43	; 0x2b
 8008c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c36:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c3c:	d015      	beq.n	8008c6a <_svfiprintf_r+0xf6>
 8008c3e:	9a07      	ldr	r2, [sp, #28]
 8008c40:	4654      	mov	r4, sl
 8008c42:	2000      	movs	r0, #0
 8008c44:	f04f 0c0a 	mov.w	ip, #10
 8008c48:	4621      	mov	r1, r4
 8008c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c4e:	3b30      	subs	r3, #48	; 0x30
 8008c50:	2b09      	cmp	r3, #9
 8008c52:	d94e      	bls.n	8008cf2 <_svfiprintf_r+0x17e>
 8008c54:	b1b0      	cbz	r0, 8008c84 <_svfiprintf_r+0x110>
 8008c56:	9207      	str	r2, [sp, #28]
 8008c58:	e014      	b.n	8008c84 <_svfiprintf_r+0x110>
 8008c5a:	eba0 0308 	sub.w	r3, r0, r8
 8008c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c62:	4313      	orrs	r3, r2
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	46a2      	mov	sl, r4
 8008c68:	e7d2      	b.n	8008c10 <_svfiprintf_r+0x9c>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	1d19      	adds	r1, r3, #4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	9103      	str	r1, [sp, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfbb      	ittet	lt
 8008c76:	425b      	neglt	r3, r3
 8008c78:	f042 0202 	orrlt.w	r2, r2, #2
 8008c7c:	9307      	strge	r3, [sp, #28]
 8008c7e:	9307      	strlt	r3, [sp, #28]
 8008c80:	bfb8      	it	lt
 8008c82:	9204      	strlt	r2, [sp, #16]
 8008c84:	7823      	ldrb	r3, [r4, #0]
 8008c86:	2b2e      	cmp	r3, #46	; 0x2e
 8008c88:	d10c      	bne.n	8008ca4 <_svfiprintf_r+0x130>
 8008c8a:	7863      	ldrb	r3, [r4, #1]
 8008c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8e:	d135      	bne.n	8008cfc <_svfiprintf_r+0x188>
 8008c90:	9b03      	ldr	r3, [sp, #12]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	9203      	str	r2, [sp, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bfb8      	it	lt
 8008c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca0:	3402      	adds	r4, #2
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d70 <_svfiprintf_r+0x1fc>
 8008ca8:	7821      	ldrb	r1, [r4, #0]
 8008caa:	2203      	movs	r2, #3
 8008cac:	4650      	mov	r0, sl
 8008cae:	f7f7 facf 	bl	8000250 <memchr>
 8008cb2:	b140      	cbz	r0, 8008cc6 <_svfiprintf_r+0x152>
 8008cb4:	2340      	movs	r3, #64	; 0x40
 8008cb6:	eba0 000a 	sub.w	r0, r0, sl
 8008cba:	fa03 f000 	lsl.w	r0, r3, r0
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	4303      	orrs	r3, r0
 8008cc2:	3401      	adds	r4, #1
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cca:	4826      	ldr	r0, [pc, #152]	; (8008d64 <_svfiprintf_r+0x1f0>)
 8008ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd0:	2206      	movs	r2, #6
 8008cd2:	f7f7 fabd 	bl	8000250 <memchr>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d038      	beq.n	8008d4c <_svfiprintf_r+0x1d8>
 8008cda:	4b23      	ldr	r3, [pc, #140]	; (8008d68 <_svfiprintf_r+0x1f4>)
 8008cdc:	bb1b      	cbnz	r3, 8008d26 <_svfiprintf_r+0x1b2>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	f023 0307 	bic.w	r3, r3, #7
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	4433      	add	r3, r6
 8008cee:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf0:	e767      	b.n	8008bc2 <_svfiprintf_r+0x4e>
 8008cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	e7a5      	b.n	8008c48 <_svfiprintf_r+0xd4>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	3401      	adds	r4, #1
 8008d00:	9305      	str	r3, [sp, #20]
 8008d02:	4619      	mov	r1, r3
 8008d04:	f04f 0c0a 	mov.w	ip, #10
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0e:	3a30      	subs	r2, #48	; 0x30
 8008d10:	2a09      	cmp	r2, #9
 8008d12:	d903      	bls.n	8008d1c <_svfiprintf_r+0x1a8>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0c5      	beq.n	8008ca4 <_svfiprintf_r+0x130>
 8008d18:	9105      	str	r1, [sp, #20]
 8008d1a:	e7c3      	b.n	8008ca4 <_svfiprintf_r+0x130>
 8008d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d20:	4604      	mov	r4, r0
 8008d22:	2301      	movs	r3, #1
 8008d24:	e7f0      	b.n	8008d08 <_svfiprintf_r+0x194>
 8008d26:	ab03      	add	r3, sp, #12
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <_svfiprintf_r+0x1f8>)
 8008d2e:	a904      	add	r1, sp, #16
 8008d30:	4638      	mov	r0, r7
 8008d32:	f3af 8000 	nop.w
 8008d36:	1c42      	adds	r2, r0, #1
 8008d38:	4606      	mov	r6, r0
 8008d3a:	d1d6      	bne.n	8008cea <_svfiprintf_r+0x176>
 8008d3c:	89ab      	ldrh	r3, [r5, #12]
 8008d3e:	065b      	lsls	r3, r3, #25
 8008d40:	f53f af2c 	bmi.w	8008b9c <_svfiprintf_r+0x28>
 8008d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d46:	b01d      	add	sp, #116	; 0x74
 8008d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4c:	ab03      	add	r3, sp, #12
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	462a      	mov	r2, r5
 8008d52:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <_svfiprintf_r+0x1f8>)
 8008d54:	a904      	add	r1, sp, #16
 8008d56:	4638      	mov	r0, r7
 8008d58:	f7ff f940 	bl	8007fdc <_printf_i>
 8008d5c:	e7eb      	b.n	8008d36 <_svfiprintf_r+0x1c2>
 8008d5e:	bf00      	nop
 8008d60:	08009090 	.word	0x08009090
 8008d64:	0800909a 	.word	0x0800909a
 8008d68:	00000000 	.word	0x00000000
 8008d6c:	08008abf 	.word	0x08008abf
 8008d70:	08009096 	.word	0x08009096

08008d74 <_sbrk_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4d06      	ldr	r5, [pc, #24]	; (8008d90 <_sbrk_r+0x1c>)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	4608      	mov	r0, r1
 8008d7e:	602b      	str	r3, [r5, #0]
 8008d80:	f7f8 f9f2 	bl	8001168 <_sbrk>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_sbrk_r+0x1a>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_sbrk_r+0x1a>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	20004420 	.word	0x20004420

08008d94 <_raise_r>:
 8008d94:	291f      	cmp	r1, #31
 8008d96:	b538      	push	{r3, r4, r5, lr}
 8008d98:	4604      	mov	r4, r0
 8008d9a:	460d      	mov	r5, r1
 8008d9c:	d904      	bls.n	8008da8 <_raise_r+0x14>
 8008d9e:	2316      	movs	r3, #22
 8008da0:	6003      	str	r3, [r0, #0]
 8008da2:	f04f 30ff 	mov.w	r0, #4294967295
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008daa:	b112      	cbz	r2, 8008db2 <_raise_r+0x1e>
 8008dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008db0:	b94b      	cbnz	r3, 8008dc6 <_raise_r+0x32>
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 f830 	bl	8008e18 <_getpid_r>
 8008db8:	462a      	mov	r2, r5
 8008dba:	4601      	mov	r1, r0
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dc2:	f000 b817 	b.w	8008df4 <_kill_r>
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d00a      	beq.n	8008de0 <_raise_r+0x4c>
 8008dca:	1c59      	adds	r1, r3, #1
 8008dcc:	d103      	bne.n	8008dd6 <_raise_r+0x42>
 8008dce:	2316      	movs	r3, #22
 8008dd0:	6003      	str	r3, [r0, #0]
 8008dd2:	2001      	movs	r0, #1
 8008dd4:	e7e7      	b.n	8008da6 <_raise_r+0x12>
 8008dd6:	2400      	movs	r4, #0
 8008dd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ddc:	4628      	mov	r0, r5
 8008dde:	4798      	blx	r3
 8008de0:	2000      	movs	r0, #0
 8008de2:	e7e0      	b.n	8008da6 <_raise_r+0x12>

08008de4 <raise>:
 8008de4:	4b02      	ldr	r3, [pc, #8]	; (8008df0 <raise+0xc>)
 8008de6:	4601      	mov	r1, r0
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	f7ff bfd3 	b.w	8008d94 <_raise_r>
 8008dee:	bf00      	nop
 8008df0:	20000010 	.word	0x20000010

08008df4 <_kill_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	4d07      	ldr	r5, [pc, #28]	; (8008e14 <_kill_r+0x20>)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	4611      	mov	r1, r2
 8008e00:	602b      	str	r3, [r5, #0]
 8008e02:	f7f8 f929 	bl	8001058 <_kill>
 8008e06:	1c43      	adds	r3, r0, #1
 8008e08:	d102      	bne.n	8008e10 <_kill_r+0x1c>
 8008e0a:	682b      	ldr	r3, [r5, #0]
 8008e0c:	b103      	cbz	r3, 8008e10 <_kill_r+0x1c>
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	bd38      	pop	{r3, r4, r5, pc}
 8008e12:	bf00      	nop
 8008e14:	20004420 	.word	0x20004420

08008e18 <_getpid_r>:
 8008e18:	f7f8 b916 	b.w	8001048 <_getpid>

08008e1c <__sread>:
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	460c      	mov	r4, r1
 8008e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e24:	f000 f8a8 	bl	8008f78 <_read_r>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	bfab      	itete	ge
 8008e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e30:	181b      	addge	r3, r3, r0
 8008e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e36:	bfac      	ite	ge
 8008e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e3a:	81a3      	strhlt	r3, [r4, #12]
 8008e3c:	bd10      	pop	{r4, pc}

08008e3e <__swrite>:
 8008e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e42:	461f      	mov	r7, r3
 8008e44:	898b      	ldrh	r3, [r1, #12]
 8008e46:	05db      	lsls	r3, r3, #23
 8008e48:	4605      	mov	r5, r0
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	d505      	bpl.n	8008e5c <__swrite+0x1e>
 8008e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e54:	2302      	movs	r3, #2
 8008e56:	2200      	movs	r2, #0
 8008e58:	f000 f868 	bl	8008f2c <_lseek_r>
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	4632      	mov	r2, r6
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e72:	f000 b817 	b.w	8008ea4 <_write_r>

08008e76 <__sseek>:
 8008e76:	b510      	push	{r4, lr}
 8008e78:	460c      	mov	r4, r1
 8008e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7e:	f000 f855 	bl	8008f2c <_lseek_r>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	bf15      	itete	ne
 8008e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e92:	81a3      	strheq	r3, [r4, #12]
 8008e94:	bf18      	it	ne
 8008e96:	81a3      	strhne	r3, [r4, #12]
 8008e98:	bd10      	pop	{r4, pc}

08008e9a <__sclose>:
 8008e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9e:	f000 b813 	b.w	8008ec8 <_close_r>
	...

08008ea4 <_write_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	; (8008ec4 <_write_r+0x20>)
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	602a      	str	r2, [r5, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f7f8 f907 	bl	80010c6 <_write>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_write_r+0x1e>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_write_r+0x1e>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	20004420 	.word	0x20004420

08008ec8 <_close_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	; (8008ee4 <_close_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f8 f913 	bl	80010fe <_close>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_close_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_close_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20004420 	.word	0x20004420

08008ee8 <_fstat_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	; (8008f08 <_fstat_r+0x20>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	f7f8 f90e 	bl	8001116 <_fstat>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d102      	bne.n	8008f04 <_fstat_r+0x1c>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	b103      	cbz	r3, 8008f04 <_fstat_r+0x1c>
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	bd38      	pop	{r3, r4, r5, pc}
 8008f06:	bf00      	nop
 8008f08:	20004420 	.word	0x20004420

08008f0c <_isatty_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d06      	ldr	r5, [pc, #24]	; (8008f28 <_isatty_r+0x1c>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	f7f8 f90d 	bl	8001136 <_isatty>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_isatty_r+0x1a>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_isatty_r+0x1a>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	20004420 	.word	0x20004420

08008f2c <_lseek_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4d07      	ldr	r5, [pc, #28]	; (8008f4c <_lseek_r+0x20>)
 8008f30:	4604      	mov	r4, r0
 8008f32:	4608      	mov	r0, r1
 8008f34:	4611      	mov	r1, r2
 8008f36:	2200      	movs	r2, #0
 8008f38:	602a      	str	r2, [r5, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f7f8 f906 	bl	800114c <_lseek>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d102      	bne.n	8008f4a <_lseek_r+0x1e>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	b103      	cbz	r3, 8008f4a <_lseek_r+0x1e>
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	20004420 	.word	0x20004420

08008f50 <__malloc_lock>:
 8008f50:	4801      	ldr	r0, [pc, #4]	; (8008f58 <__malloc_lock+0x8>)
 8008f52:	f7ff bc23 	b.w	800879c <__retarget_lock_acquire_recursive>
 8008f56:	bf00      	nop
 8008f58:	20004414 	.word	0x20004414

08008f5c <__malloc_unlock>:
 8008f5c:	4801      	ldr	r0, [pc, #4]	; (8008f64 <__malloc_unlock+0x8>)
 8008f5e:	f7ff bc1e 	b.w	800879e <__retarget_lock_release_recursive>
 8008f62:	bf00      	nop
 8008f64:	20004414 	.word	0x20004414

08008f68 <_malloc_usable_size_r>:
 8008f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6c:	1f18      	subs	r0, r3, #4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfbc      	itt	lt
 8008f72:	580b      	ldrlt	r3, [r1, r0]
 8008f74:	18c0      	addlt	r0, r0, r3
 8008f76:	4770      	bx	lr

08008f78 <_read_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d07      	ldr	r5, [pc, #28]	; (8008f98 <_read_r+0x20>)
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	4608      	mov	r0, r1
 8008f80:	4611      	mov	r1, r2
 8008f82:	2200      	movs	r2, #0
 8008f84:	602a      	str	r2, [r5, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f7f8 f880 	bl	800108c <_read>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	d102      	bne.n	8008f96 <_read_r+0x1e>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	b103      	cbz	r3, 8008f96 <_read_r+0x1e>
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	20004420 	.word	0x20004420

08008f9c <_init>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	bf00      	nop
 8008fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa2:	bc08      	pop	{r3}
 8008fa4:	469e      	mov	lr, r3
 8008fa6:	4770      	bx	lr

08008fa8 <_fini>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	bf00      	nop
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr
