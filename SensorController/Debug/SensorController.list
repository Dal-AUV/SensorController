
SensorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f28  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009128  08009128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009208  08009208  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009208  08009208  00019208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009210  08009210  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009210  08009210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000078  08009290  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000118  08009330  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000041e8  200001b8  080093d0  000201b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200043a0  080093d0  000243a0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b1df  00000000  00000000  000201e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b85  00000000  00000000  0003b3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013e8  00000000  00000000  0003ef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001260  00000000  00000000  00040338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a8aa  00000000  00000000  00041598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018c26  00000000  00000000  0006be42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001017a7  00000000  00000000  00084a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0018620f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000551c  00000000  00000000  00186260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b8 	.word	0x200001b8
 800021c:	00000000 	.word	0x00000000
 8000220:	08009110 	.word	0x08009110

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001bc 	.word	0x200001bc
 800023c:	08009110 	.word	0x08009110

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <i2cWrite>:

	return;

}

void i2cWrite(const char * format, ...) {
 80005f4:	b40f      	push	{r0, r1, r2, r3}
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b08e      	sub	sp, #56	; 0x38
 80005fa:	af00      	add	r7, sp, #0

    char buffer[50];
    va_list args;
    // Get Format and parse it
    va_start(args, format);
 80005fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000600:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer,sizeof(buffer),format, args);
 8000602:	1d38      	adds	r0, r7, #4
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000608:	2132      	movs	r1, #50	; 0x32
 800060a:	f008 f933 	bl	8008874 <vsniprintf>
    va_end(args);

    xSemaphoreTake(TestMutex, portMAX_DELAY);
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <i2cWrite+0x5c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f04f 31ff 	mov.w	r1, #4294967295
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fa42 	bl	8006aa0 <xQueueSemaphoreTake>
    // Transmit via Debug USART
    HAL_UART_Transmit(&huart3,(uint8_t*)buffer,
        strlen(buffer), HAL_MAX_DELAY);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fe0e 	bl	8000240 <strlen>
 8000624:	4603      	mov	r3, r0
    HAL_UART_Transmit(&huart3,(uint8_t*)buffer,
 8000626:	b29a      	uxth	r2, r3
 8000628:	1d39      	adds	r1, r7, #4
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	4809      	ldr	r0, [pc, #36]	; (8000654 <i2cWrite+0x60>)
 8000630:	f004 fab4 	bl	8004b9c <HAL_UART_Transmit>
    // Give the lock
    xSemaphoreGive(TestMutex);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <i2cWrite+0x5c>)
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	f005 ffa3 	bl	8006588 <xQueueGenericSend>

	return;
 8000642:	bf00      	nop
}
 8000644:	3738      	adds	r7, #56	; 0x38
 8000646:	46bd      	mov	sp, r7
 8000648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr
 8000650:	200001d8 	.word	0x200001d8
 8000654:	200005a8 	.word	0x200005a8

08000658 <TASKI2CDebugParser>:
    return;

}


void TASKI2CDebugParser(void){
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	; 0x40
 800065c:	af00      	add	r7, sp, #0
    BaseType_t xStatus = {0};
 800065e:	2300      	movs	r3, #0
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t in;
    uint8_t pos = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t buffer[50];
    while(1){
        xStatus = xQueueReceive(xI2CQueue,&in,portMAX_DELAY);
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <TASKI2CDebugParser+0x8c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8000670:	f04f 32ff 	mov.w	r2, #4294967295
 8000674:	4618      	mov	r0, r3
 8000676:	f006 f92d 	bl	80068d4 <xQueueReceive>
 800067a:	63b8      	str	r0, [r7, #56]	; 0x38
        if(xStatus == pdFALSE) continue;
 800067c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800067e:	2b00      	cmp	r3, #0
 8000680:	d02b      	beq.n	80006da <TASKI2CDebugParser+0x82>
        buffer[pos++] = in;
 8000682:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800068c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000690:	3340      	adds	r3, #64	; 0x40
 8000692:	443b      	add	r3, r7
 8000694:	f803 2c3c 	strb.w	r2, [r3, #-60]
        if((in == '\n') | (in == '\r')){
 8000698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800069c:	2b0a      	cmp	r3, #10
 800069e:	bf0c      	ite	eq
 80006a0:	2301      	moveq	r3, #1
 80006a2:	2300      	movne	r3, #0
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006aa:	2b0d      	cmp	r3, #13
 80006ac:	bf0c      	ite	eq
 80006ae:	2301      	moveq	r3, #1
 80006b0:	2300      	movne	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d010      	beq.n	80006de <TASKI2CDebugParser+0x86>
            pos = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            i2cWrite("%s\n",buffer);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <TASKI2CDebugParser+0x90>)
 80006c8:	f7ff ff94 	bl	80005f4 <i2cWrite>
            memset(&buffer,0,50);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2232      	movs	r2, #50	; 0x32
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 f89a 	bl	800880c <memset>
 80006d8:	e7c6      	b.n	8000668 <TASKI2CDebugParser+0x10>
        if(xStatus == pdFALSE) continue;
 80006da:	bf00      	nop
 80006dc:	e7c4      	b.n	8000668 <TASKI2CDebugParser+0x10>
        }else continue;
 80006de:	bf00      	nop
        xStatus = xQueueReceive(xI2CQueue,&in,portMAX_DELAY);
 80006e0:	e7c2      	b.n	8000668 <TASKI2CDebugParser+0x10>
 80006e2:	bf00      	nop
 80006e4:	200001d4 	.word	0x200001d4
 80006e8:	08009128 	.word	0x08009128

080006ec <HAL_UART_RxCpltCallback>:
uint8_t DebugBuf[MAX_USART_BUF_SIZE];
/* Private Prototypes */

/* Rx ISR Callback */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    
    BaseType_t xStatus ={0};
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <HAL_UART_RxCpltCallback+0x4c>)
 80006fe:	f001 fd96 	bl	800222e <HAL_GPIO_TogglePin>

    if(huart == &huart3){
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a0d      	ldr	r2, [pc, #52]	; (800073c <HAL_UART_RxCpltCallback+0x50>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d109      	bne.n	800071e <HAL_UART_RxCpltCallback+0x32>
        xStatus = xQueueSendToBackFromISR(DebugQueue,DebugBuf,NULL);
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <HAL_UART_RxCpltCallback+0x54>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	2200      	movs	r2, #0
 8000712:	490c      	ldr	r1, [pc, #48]	; (8000744 <HAL_UART_RxCpltCallback+0x58>)
 8000714:	f006 f83e 	bl	8006794 <xQueueGenericSendFromISR>
 8000718:	60f8      	str	r0, [r7, #12]
        Request_Debug_Read();
 800071a:	f000 f815 	bl	8000748 <Request_Debug_Read>
    }
    if(xStatus == pdPASS){
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d105      	bne.n	8000730 <HAL_UART_RxCpltCallback+0x44>
        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <HAL_UART_RxCpltCallback+0x4c>)
 800072a:	f001 fd80 	bl	800222e <HAL_GPIO_TogglePin>
    }

    return;
 800072e:	bf00      	nop
 8000730:	bf00      	nop
}
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40020400 	.word	0x40020400
 800073c:	200005a8 	.word	0x200005a8
 8000740:	200001dc 	.word	0x200001dc
 8000744:	200001e4 	.word	0x200001e4

08000748 <Request_Debug_Read>:

/* Exported Implemtations */
void Request_Debug_Read(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    
    HAL_UART_Receive_IT(&huart3,DebugBuf,1);
 800074c:	2201      	movs	r2, #1
 800074e:	4903      	ldr	r1, [pc, #12]	; (800075c <Request_Debug_Read+0x14>)
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <Request_Debug_Read+0x18>)
 8000752:	f004 faa6 	bl	8004ca2 <HAL_UART_Receive_IT>
    return;
 8000756:	bf00      	nop

}
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200001e4 	.word	0x200001e4
 8000760:	200005a8 	.word	0x200005a8

08000764 <EnableDebug>:

void EnableDebug(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    
    DebugQueue = xQueueCreate(MAX_USART_QUEUE_SIZE, sizeof(uint8_t));
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	2050      	movs	r0, #80	; 0x50
 800076e:	f005 fe77 	bl	8006460 <xQueueGenericCreate>
 8000772:	4603      	mov	r3, r0
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <EnableDebug+0x28>)
 8000776:	6013      	str	r3, [r2, #0]

    DebugMutex = xSemaphoreCreateMutex();
 8000778:	2001      	movs	r0, #1
 800077a:	f005 feec 	bl	8006556 <xQueueCreateMutex>
 800077e:	4603      	mov	r3, r0
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <EnableDebug+0x2c>)
 8000782:	6013      	str	r3, [r2, #0]

    Request_Debug_Read();
 8000784:	f7ff ffe0 	bl	8000748 <Request_Debug_Read>

    return;
 8000788:	bf00      	nop

}
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001dc 	.word	0x200001dc
 8000790:	200001e0 	.word	0x200001e0

08000794 <DebugWrite>:

void DebugWrite(const char * format, ...){
 8000794:	b40f      	push	{r0, r1, r2, r3}
 8000796:	b580      	push	{r7, lr}
 8000798:	b08e      	sub	sp, #56	; 0x38
 800079a:	af00      	add	r7, sp, #0
    
    char buffer[50];
    va_list args;
    // Get Format and parse it
    va_start(args, format);
 800079c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007a0:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer,sizeof(buffer),format, args);
 80007a2:	1d38      	adds	r0, r7, #4
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80007a8:	2132      	movs	r1, #50	; 0x32
 80007aa:	f008 f863 	bl	8008874 <vsniprintf>
    va_end(args);
    // Take the Debug Lock
    xSemaphoreTake(DebugMutex, portMAX_DELAY);
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <DebugWrite+0x5c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f04f 31ff 	mov.w	r1, #4294967295
 80007b6:	4618      	mov	r0, r3
 80007b8:	f006 f972 	bl	8006aa0 <xQueueSemaphoreTake>
    // Transmit via Debug USART
    HAL_UART_Transmit(&huart3,(uint8_t*)buffer,
        strlen(buffer), HAL_MAX_DELAY);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd3e 	bl	8000240 <strlen>
 80007c4:	4603      	mov	r3, r0
    HAL_UART_Transmit(&huart3,(uint8_t*)buffer,
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	1d39      	adds	r1, r7, #4
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <DebugWrite+0x60>)
 80007d0:	f004 f9e4 	bl	8004b9c <HAL_UART_Transmit>
    // Give the lock 
    xSemaphoreGive(DebugMutex);
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <DebugWrite+0x5c>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	2300      	movs	r3, #0
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	f005 fed3 	bl	8006588 <xQueueGenericSend>

    return;
 80007e2:	bf00      	nop
}
 80007e4:	3738      	adds	r7, #56	; 0x38
 80007e6:	46bd      	mov	sp, r7
 80007e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ec:	b004      	add	sp, #16
 80007ee:	4770      	bx	lr
 80007f0:	200001e0 	.word	0x200001e0
 80007f4:	200005a8 	.word	0x200005a8

080007f8 <TASKDebugParser>:
        strlen(buffer), HAL_MAX_DELAY);
    
    return;    
}

void TASKDebugParser(void){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b090      	sub	sp, #64	; 0x40
 80007fc:	af00      	add	r7, sp, #0
    BaseType_t xStatus = {0};
 80007fe:	2300      	movs	r3, #0
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t in;
    uint8_t pos = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t buffer[50];
    while(1){
        xStatus = xQueueReceive(DebugQueue,&in,portMAX_DELAY);
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <TASKDebugParser+0x8c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	4618      	mov	r0, r3
 8000816:	f006 f85d 	bl	80068d4 <xQueueReceive>
 800081a:	63b8      	str	r0, [r7, #56]	; 0x38
        if(xStatus == pdFALSE) continue;
 800081c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800081e:	2b00      	cmp	r3, #0
 8000820:	d02b      	beq.n	800087a <TASKDebugParser+0x82>
        buffer[pos++] = in;
 8000822:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 800082c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000830:	3340      	adds	r3, #64	; 0x40
 8000832:	443b      	add	r3, r7
 8000834:	f803 2c3c 	strb.w	r2, [r3, #-60]
        if((in == '\n') | (in == '\r')){
 8000838:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800083c:	2b0a      	cmp	r3, #10
 800083e:	bf0c      	ite	eq
 8000840:	2301      	moveq	r3, #1
 8000842:	2300      	movne	r3, #0
 8000844:	b2da      	uxtb	r2, r3
 8000846:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800084a:	2b0d      	cmp	r3, #13
 800084c:	bf0c      	ite	eq
 800084e:	2301      	moveq	r3, #1
 8000850:	2300      	movne	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d010      	beq.n	800087e <TASKDebugParser+0x86>
            pos = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            DebugWrite("%s\n",buffer);
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <TASKDebugParser+0x90>)
 8000868:	f7ff ff94 	bl	8000794 <DebugWrite>
            memset(&buffer,0,50);
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2232      	movs	r2, #50	; 0x32
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f007 ffca 	bl	800880c <memset>
 8000878:	e7c6      	b.n	8000808 <TASKDebugParser+0x10>
        if(xStatus == pdFALSE) continue;
 800087a:	bf00      	nop
 800087c:	e7c4      	b.n	8000808 <TASKDebugParser+0x10>
        }else continue;
 800087e:	bf00      	nop
        xStatus = xQueueReceive(DebugQueue,&in,portMAX_DELAY);
 8000880:	e7c2      	b.n	8000808 <TASKDebugParser+0x10>
 8000882:	bf00      	nop
 8000884:	200001dc 	.word	0x200001dc
 8000888:	0800912c 	.word	0x0800912c

0800088c <SysTask_Init>:
void TASKI2C_Communication(void *pvParameters);
void TASKI2C_Write(void);

static const char *i2cMember = &hi2c1; //not sure how to pass this in

uint8_t SysTask_Init(void){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af02      	add	r7, sp, #8
	/* Added task to Kernel List */
	if(pdPASS != xTaskCreate(TASKDebugParser,"DebugParse",
 8000892:	2300      	movs	r3, #0
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	2303      	movs	r3, #3
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2300      	movs	r3, #0
 800089c:	f44f 728b 	mov.w	r2, #278	; 0x116
 80008a0:	4926      	ldr	r1, [pc, #152]	; (800093c <SysTask_Init+0xb0>)
 80008a2:	4827      	ldr	r0, [pc, #156]	; (8000940 <SysTask_Init+0xb4>)
 80008a4:	f006 fb9b 	bl	8006fde <xTaskCreate>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d001      	beq.n	80008b2 <SysTask_Init+0x26>
			configMINIMAL_STACK_SIZE + 150,NULL, tskIDLE_PRIORITY +3,NULL)){
		return -1;
 80008ae:	23ff      	movs	r3, #255	; 0xff
 80008b0:	e041      	b.n	8000936 <SysTask_Init+0xaa>
	}
	if(pdPASS != xTaskCreate(TASKI2CDebugParser,"DebugParse",
 80008b2:	2300      	movs	r3, #0
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	2303      	movs	r3, #3
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2300      	movs	r3, #0
 80008bc:	f44f 728b 	mov.w	r2, #278	; 0x116
 80008c0:	491e      	ldr	r1, [pc, #120]	; (800093c <SysTask_Init+0xb0>)
 80008c2:	4820      	ldr	r0, [pc, #128]	; (8000944 <SysTask_Init+0xb8>)
 80008c4:	f006 fb8b 	bl	8006fde <xTaskCreate>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d001      	beq.n	80008d2 <SysTask_Init+0x46>
			configMINIMAL_STACK_SIZE + 150,NULL, tskIDLE_PRIORITY +3,NULL)){
		return -1;
 80008ce:	23ff      	movs	r3, #255	; 0xff
 80008d0:	e031      	b.n	8000936 <SysTask_Init+0xaa>
	}
	if(pdPASS != xTaskCreate(TASKHeartBeat,"HeartBeat",
 80008d2:	2300      	movs	r3, #0
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	2301      	movs	r3, #1
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	22e4      	movs	r2, #228	; 0xe4
 80008de:	491a      	ldr	r1, [pc, #104]	; (8000948 <SysTask_Init+0xbc>)
 80008e0:	481a      	ldr	r0, [pc, #104]	; (800094c <SysTask_Init+0xc0>)
 80008e2:	f006 fb7c 	bl	8006fde <xTaskCreate>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d001      	beq.n	80008f0 <SysTask_Init+0x64>
			configMINIMAL_STACK_SIZE + 100, NULL, tskIDLE_PRIORITY +1, NULL)){
		return -1;
 80008ec:	23ff      	movs	r3, #255	; 0xff
 80008ee:	e022      	b.n	8000936 <SysTask_Init+0xaa>
	}
	if(pdPASS != xTaskCreate(TASKI2C_Communication, "I2C_Communication",
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <SysTask_Init+0xc4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2200      	movs	r2, #0
 80008f6:	9201      	str	r2, [sp, #4]
 80008f8:	2202      	movs	r2, #2
 80008fa:	9200      	str	r2, [sp, #0]
 80008fc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000900:	4914      	ldr	r1, [pc, #80]	; (8000954 <SysTask_Init+0xc8>)
 8000902:	4815      	ldr	r0, [pc, #84]	; (8000958 <SysTask_Init+0xcc>)
 8000904:	f006 fb6b 	bl	8006fde <xTaskCreate>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d001      	beq.n	8000912 <SysTask_Init+0x86>
			configMINIMAL_STACK_SIZE + 200, (void*) i2cMember, tskIDLE_PRIORITY+2, NULL)) { //will need some guidance on what kind of stack size and prio we need
		return -1;
 800090e:	23ff      	movs	r3, #255	; 0xff
 8000910:	e011      	b.n	8000936 <SysTask_Init+0xaa>
	}
	if(pdPASS != xTaskCreate(TASKI2C_Write, "I2C_Write",
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <SysTask_Init+0xc4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2200      	movs	r2, #0
 8000918:	9201      	str	r2, [sp, #4]
 800091a:	2202      	movs	r2, #2
 800091c:	9200      	str	r2, [sp, #0]
 800091e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <SysTask_Init+0xd0>)
 8000924:	480e      	ldr	r0, [pc, #56]	; (8000960 <SysTask_Init+0xd4>)
 8000926:	f006 fb5a 	bl	8006fde <xTaskCreate>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d001      	beq.n	8000934 <SysTask_Init+0xa8>
			configMINIMAL_STACK_SIZE + 200, (void*) i2cMember, tskIDLE_PRIORITY+2, NULL)) { //will need some guidance on what kind of stack size and prio we need
		return -1;
 8000930:	23ff      	movs	r3, #255	; 0xff
 8000932:	e000      	b.n	8000936 <SysTask_Init+0xaa>
	}

	return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08009130 	.word	0x08009130
 8000940:	080007f9 	.word	0x080007f9
 8000944:	08000659 	.word	0x08000659
 8000948:	0800913c 	.word	0x0800913c
 800094c:	08000965 	.word	0x08000965
 8000950:	20000000 	.word	0x20000000
 8000954:	08009148 	.word	0x08009148
 8000958:	080009d1 	.word	0x080009d1
 800095c:	0800915c 	.word	0x0800915c
 8000960:	0800098d 	.word	0x0800098d

08000964 <TASKHeartBeat>:

static void TASKHeartBeat(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

    uint8_t counter = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	71fb      	strb	r3, [r7, #7]

    while(1){
        DebugWrite("HeartBeat: %X\n\r",counter++);
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	71fa      	strb	r2, [r7, #7]
 8000974:	4619      	mov	r1, r3
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <TASKHeartBeat+0x24>)
 8000978:	f7ff ff0c 	bl	8000794 <DebugWrite>
        //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

        if(counter == 1000) counter = 0;

        vTaskDelay(1000);
 800097c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000980:	f006 fc66 	bl	8007250 <vTaskDelay>
        DebugWrite("HeartBeat: %X\n\r",counter++);
 8000984:	e7f3      	b.n	800096e <TASKHeartBeat+0xa>
 8000986:	bf00      	nop
 8000988:	08009168 	.word	0x08009168

0800098c <TASKI2C_Write>:
    }
}

void TASKI2C_Write(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b09a      	sub	sp, #104	; 0x68
 8000990:	af00      	add	r7, sp, #0

	uint8_t buf[100];

	if(xQueueReceive(xI2CQueue, &buf, NULL) != pdPASS) {
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <TASKI2C_Write+0x3c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4639      	mov	r1, r7
 8000998:	2200      	movs	r2, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f005 ff9a 	bl	80068d4 <xQueueReceive>
		//error
	}
	int i = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	667b      	str	r3, [r7, #100]	; 0x64

	while(1) {
		i2cWrite("Arduino Value: %X", buf[i]);
 80009a4:	463a      	mov	r2, r7
 80009a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <TASKI2C_Write+0x40>)
 80009b0:	f7ff fe20 	bl	80005f4 <i2cWrite>

		if(i == 100) {
 80009b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009b6:	2b64      	cmp	r3, #100	; 0x64
 80009b8:	d101      	bne.n	80009be <TASKI2C_Write+0x32>
			i = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	667b      	str	r3, [r7, #100]	; 0x64
		}

		vTaskDelay(1000);
 80009be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c2:	f006 fc45 	bl	8007250 <vTaskDelay>
		i2cWrite("Arduino Value: %X", buf[i]);
 80009c6:	e7ed      	b.n	80009a4 <TASKI2C_Write+0x18>
 80009c8:	200001d4 	.word	0x200001d4
 80009cc:	08009178 	.word	0x08009178

080009d0 <TASKI2C_Communication>:
}




void TASKI2C_Communication(void *pvParameters) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	6078      	str	r0, [r7, #4]
	uint16_t val;

	static const uint8_t ARD_ADDR = 0x7F << 1; //Address of Arduino
	//static const uint8_t OUTPUT_REG = 0x00 << 1; // Address of Register we want

	buf[0] = 0; //placeholder value
 80009d8:	2300      	movs	r3, #0
 80009da:	733b      	strb	r3, [r7, #12]
	BaseType_t xStatus = {0};
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]



	while(1) {
		//communication for whether to read or write
		ret = HAL_I2C_Master_Transmit(&hi2c1, ARD_ADDR, buf, 1, HAL_MAX_DELAY);
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <TASKI2C_Communication+0xac>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b299      	uxth	r1, r3
 80009e6:	f107 020c 	add.w	r2, r7, #12
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	4823      	ldr	r0, [pc, #140]	; (8000a80 <TASKI2C_Communication+0xb0>)
 80009f4:	f001 fcc6 	bl	8002384 <HAL_I2C_Master_Transmit>
 80009f8:	4603      	mov	r3, r0
 80009fa:	76fb      	strb	r3, [r7, #27]
		//this will trigger the call back, so maybe the following if's should be used elsewhere

		if(ret != HAL_OK) {
 80009fc:	7efb      	ldrb	r3, [r7, #27]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d005      	beq.n	8000a0e <TASKI2C_Communication+0x3e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	481f      	ldr	r0, [pc, #124]	; (8000a84 <TASKI2C_Communication+0xb4>)
 8000a08:	f001 fbf8 	bl	80021fc <HAL_GPIO_WritePin>
 8000a0c:	e7e8      	b.n	80009e0 <TASKI2C_Communication+0x10>
		}
		else {
			//commununication to read the next two bytes from slave
			ret = HAL_I2C_Master_Receive(&hi2c1, ARD_ADDR, buf, 2, HAL_MAX_DELAY);
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <TASKI2C_Communication+0xac>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b299      	uxth	r1, r3
 8000a14:	f107 020c 	add.w	r2, r7, #12
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2302      	movs	r3, #2
 8000a20:	4817      	ldr	r0, [pc, #92]	; (8000a80 <TASKI2C_Communication+0xb0>)
 8000a22:	f001 fda3 	bl	800256c <HAL_I2C_Master_Receive>
 8000a26:	4603      	mov	r3, r0
 8000a28:	76fb      	strb	r3, [r7, #27]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	4815      	ldr	r0, [pc, #84]	; (8000a84 <TASKI2C_Communication+0xb4>)
 8000a30:	f001 fbe4 	bl	80021fc <HAL_GPIO_WritePin>

			if(ret != HAL_OK) {
 8000a34:	7efb      	ldrb	r3, [r7, #27]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d005      	beq.n	8000a46 <TASKI2C_Communication+0x76>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <TASKI2C_Communication+0xb4>)
 8000a40:	f001 fbdc 	bl	80021fc <HAL_GPIO_WritePin>
 8000a44:	e7cc      	b.n	80009e0 <TASKI2C_Communication+0x10>
			}
			else {

				val = ((int16_t)buf[0]) << 4 | (buf[1] >> 4); //combining the bytes
 8000a46:	7b3b      	ldrb	r3, [r7, #12]
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	b21a      	sxth	r2, r3
 8000a4c:	7b7b      	ldrb	r3, [r7, #13]
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	833b      	strh	r3, [r7, #24]

				//sample implementation
				if(xQueueSendToBack(xI2CQueue, val, (TickType_t) 10) != pdPASS) {
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <TASKI2C_Communication+0xb8>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	8b3b      	ldrh	r3, [r7, #24]
 8000a60:	4619      	mov	r1, r3
 8000a62:	2300      	movs	r3, #0
 8000a64:	220a      	movs	r2, #10
 8000a66:	f005 fd8f 	bl	8006588 <xQueueGenericSend>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d1b7      	bne.n	80009e0 <TASKI2C_Communication+0x10>
				//don't turn the light off, still error
				}
				else {
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <TASKI2C_Communication+0xb4>)
 8000a76:	f001 fbc1 	bl	80021fc <HAL_GPIO_WritePin>
		ret = HAL_I2C_Master_Transmit(&hi2c1, ARD_ADDR, buf, 1, HAL_MAX_DELAY);
 8000a7a:	e7b1      	b.n	80009e0 <TASKI2C_Communication+0x10>
 8000a7c:	080091b9 	.word	0x080091b9
 8000a80:	20000554 	.word	0x20000554
 8000a84:	40020400 	.word	0x40020400
 8000a88:	200001d4 	.word	0x200001d4

08000a8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <vApplicationGetIdleTaskMemory+0x30>)
 8000aa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000218 	.word	0x20000218
 8000abc:	2000026c 	.word	0x2000026c

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f000 fc94 	bl	80013f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f827 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f000 f955 	bl	8000d7c <MX_GPIO_Init>
  MX_ETH_Init();
 8000ad2:	f000 f895 	bl	8000c00 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ad6:	f000 f921 	bl	8000d1c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000ada:	f000 f8df 	bl	8000c9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  EnableDebug();
 8000ade:	f7ff fe41 	bl	8000764 <EnableDebug>
  SysTask_Init();
 8000ae2:	f7ff fed3 	bl	800088c <SysTask_Init>
  vTaskStartScheduler();
 8000ae6:	f006 fbe9 	bl	80072bc <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <main+0x54>)
 8000aec:	1d3c      	adds	r4, r7, #4
 8000aee:	461d      	mov	r5, r3
 8000af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 fb2e 	bl	8006162 <osThreadCreate>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <main+0x58>)
 8000b0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b0c:	f005 fb22 	bl	8006154 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <main+0x50>
 8000b12:	bf00      	nop
 8000b14:	08009198 	.word	0x08009198
 8000b18:	20000630 	.word	0x20000630

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	2234      	movs	r2, #52	; 0x34
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f007 fe6e 	bl	800880c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b40:	f002 fe82 	bl	8003848 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <SystemClock_Config+0xdc>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a2b      	ldr	r2, [pc, #172]	; (8000bf8 <SystemClock_Config+0xdc>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <SystemClock_Config+0xdc>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <SystemClock_Config+0xe0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b64:	4a25      	ldr	r2, [pc, #148]	; (8000bfc <SystemClock_Config+0xe0>)
 8000b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <SystemClock_Config+0xe0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b82:	2302      	movs	r3, #2
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b90:	2360      	movs	r3, #96	; 0x60
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 feaf 	bl	8003908 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bb0:	f000 f9ae 	bl	8000f10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bb4:	f002 fe58 	bl	8003868 <HAL_PWREx_EnableOverDrive>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bbe:	f000 f9a7 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	2103      	movs	r1, #3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 f940 	bl	8003e64 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bea:	f000 f991 	bl	8000f10 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_ETH_Init+0x84>)
 8000c06:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <MX_ETH_Init+0x88>)
 8000c08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_ETH_Init+0x8c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_ETH_Init+0x8c>)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ETH_Init+0x8c>)
 8000c18:	22e1      	movs	r2, #225	; 0xe1
 8000c1a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_ETH_Init+0x8c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ETH_Init+0x8c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_ETH_Init+0x8c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_ETH_Init+0x84>)
 8000c30:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <MX_ETH_Init+0x8c>)
 8000c32:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_ETH_Init+0x84>)
 8000c36:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c3a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_ETH_Init+0x84>)
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <MX_ETH_Init+0x90>)
 8000c40:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_ETH_Init+0x84>)
 8000c44:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <MX_ETH_Init+0x94>)
 8000c46:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_ETH_Init+0x84>)
 8000c4a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c4e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_ETH_Init+0x84>)
 8000c52:	f000 fe01 	bl	8001858 <HAL_ETH_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c5c:	f000 f958 	bl	8000f10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c60:	2238      	movs	r2, #56	; 0x38
 8000c62:	2100      	movs	r1, #0
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <MX_ETH_Init+0x98>)
 8000c66:	f007 fdd1 	bl	800880c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_ETH_Init+0x98>)
 8000c6c:	2221      	movs	r2, #33	; 0x21
 8000c6e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_ETH_Init+0x98>)
 8000c72:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c76:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <MX_ETH_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200004a4 	.word	0x200004a4
 8000c88:	40028000 	.word	0x40028000
 8000c8c:	20000634 	.word	0x20000634
 8000c90:	20000118 	.word	0x20000118
 8000c94:	20000078 	.word	0x20000078
 8000c98:	2000046c 	.word	0x2000046c

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <MX_I2C1_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cd8:	f001 fac4 	bl	8002264 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 f915 	bl	8000f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cea:	f002 fd15 	bl	8003718 <HAL_I2CEx_ConfigAnalogFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 f90c 	bl	8000f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_I2C1_Init+0x74>)
 8000cfc:	f002 fd57 	bl	80037ae <HAL_I2CEx_ConfigDigitalFilter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f903 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000554 	.word	0x20000554
 8000d14:	40005400 	.word	0x40005400
 8000d18:	20303e5d 	.word	0x20303e5d

08000d1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <MX_USART3_UART_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d60:	f003 fece 	bl	8004b00 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 f8d1 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200005a8 	.word	0x200005a8
 8000d78:	40004800 	.word	0x40004800

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	; 0x30
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b56      	ldr	r3, [pc, #344]	; (8000eec <MX_GPIO_Init+0x170>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a55      	ldr	r2, [pc, #340]	; (8000eec <MX_GPIO_Init+0x170>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <MX_GPIO_Init+0x170>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	4b50      	ldr	r3, [pc, #320]	; (8000eec <MX_GPIO_Init+0x170>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a4f      	ldr	r2, [pc, #316]	; (8000eec <MX_GPIO_Init+0x170>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <MX_GPIO_Init+0x170>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b4a      	ldr	r3, [pc, #296]	; (8000eec <MX_GPIO_Init+0x170>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a49      	ldr	r2, [pc, #292]	; (8000eec <MX_GPIO_Init+0x170>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b47      	ldr	r3, [pc, #284]	; (8000eec <MX_GPIO_Init+0x170>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b44      	ldr	r3, [pc, #272]	; (8000eec <MX_GPIO_Init+0x170>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a43      	ldr	r2, [pc, #268]	; (8000eec <MX_GPIO_Init+0x170>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b41      	ldr	r3, [pc, #260]	; (8000eec <MX_GPIO_Init+0x170>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <MX_GPIO_Init+0x170>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a3d      	ldr	r2, [pc, #244]	; (8000eec <MX_GPIO_Init+0x170>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <MX_GPIO_Init+0x170>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0a:	4b38      	ldr	r3, [pc, #224]	; (8000eec <MX_GPIO_Init+0x170>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a37      	ldr	r2, [pc, #220]	; (8000eec <MX_GPIO_Init+0x170>)
 8000e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b35      	ldr	r3, [pc, #212]	; (8000eec <MX_GPIO_Init+0x170>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e28:	4831      	ldr	r0, [pc, #196]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e2a:	f001 f9e7 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2140      	movs	r1, #64	; 0x40
 8000e32:	4830      	ldr	r0, [pc, #192]	; (8000ef4 <MX_GPIO_Init+0x178>)
 8000e34:	f001 f9e2 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	482a      	ldr	r0, [pc, #168]	; (8000ef8 <MX_GPIO_Init+0x17c>)
 8000e50:	f001 f828 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e54:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4820      	ldr	r0, [pc, #128]	; (8000ef0 <MX_GPIO_Init+0x174>)
 8000e6e:	f001 f819 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e72:	2340      	movs	r3, #64	; 0x40
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <MX_GPIO_Init+0x178>)
 8000e8a:	f001 f80b 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <MX_GPIO_Init+0x178>)
 8000ea2:	f000 ffff 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ea6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eb8:	230a      	movs	r3, #10
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480e      	ldr	r0, [pc, #56]	; (8000efc <MX_GPIO_Init+0x180>)
 8000ec4:	f000 ffee 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <MX_GPIO_Init+0x180>)
 8000ede:	f000 ffe1 	bl	8001ea4 <HAL_GPIO_Init>

}
 8000ee2:	bf00      	nop
 8000ee4:	3730      	adds	r7, #48	; 0x30
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40021800 	.word	0x40021800
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020000 	.word	0x40020000

08000f00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f005 f976 	bl	80061fa <osDelay>
 8000f0e:	e7fb      	b.n	8000f08 <StartDefaultTask+0x8>

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	210f      	movs	r1, #15
 8000f56:	f06f 0001 	mvn.w	r0, #1
 8000f5a:	f000 fba6 	bl	80016aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a4e      	ldr	r2, [pc, #312]	; (80010c4 <HAL_ETH_MspInit+0x158>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	f040 8096 	bne.w	80010bc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f90:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa4:	623b      	str	r3, [r7, #32]
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a46      	ldr	r2, [pc, #280]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a40      	ldr	r2, [pc, #256]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000fc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fd4:	61bb      	str	r3, [r7, #24]
 8000fd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4a3a      	ldr	r2, [pc, #232]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe4:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a34      	ldr	r2, [pc, #208]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a2e      	ldr	r2, [pc, #184]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 8001026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102a:	6313      	str	r3, [r2, #48]	; 0x30
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001038:	2332      	movs	r3, #50	; 0x32
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001048:	230b      	movs	r3, #11
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	481e      	ldr	r0, [pc, #120]	; (80010cc <HAL_ETH_MspInit+0x160>)
 8001054:	f000 ff26 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001058:	2386      	movs	r3, #134	; 0x86
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001068:	230b      	movs	r3, #11
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4817      	ldr	r0, [pc, #92]	; (80010d0 <HAL_ETH_MspInit+0x164>)
 8001074:	f000 ff16 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108a:	230b      	movs	r3, #11
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <HAL_ETH_MspInit+0x168>)
 8001096:	f000 ff05 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800109a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ac:	230b      	movs	r3, #11
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <HAL_ETH_MspInit+0x16c>)
 80010b8:	f000 fef4 	bl	8001ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3738      	adds	r7, #56	; 0x38
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40028000 	.word	0x40028000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40021800 	.word	0x40021800

080010dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0ae      	sub	sp, #184	; 0xb8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2290      	movs	r2, #144	; 0x90
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f007 fb85 	bl	800880c <memset>
  if(hi2c->Instance==I2C1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <HAL_I2C_MspInit+0xd4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d14c      	bne.n	80011a6 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800110c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001110:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001112:	2300      	movs	r3, #0
 8001114:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4618      	mov	r0, r3
 800111c:	f003 f8c8 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001126:	f7ff fef3 	bl	8000f10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_I2C_MspInit+0xd8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <HAL_I2C_MspInit+0xd8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_I2C_MspInit+0xd8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001142:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114a:	2312      	movs	r3, #18
 800114c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800115c:	2304      	movs	r3, #4
 800115e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001166:	4619      	mov	r1, r3
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <HAL_I2C_MspInit+0xdc>)
 800116a:	f000 fe9b 	bl	8001ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_I2C_MspInit+0xd8>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <HAL_I2C_MspInit+0xd8>)
 8001174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_I2C_MspInit+0xd8>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	201f      	movs	r0, #31
 800118c:	f000 fa8d 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001190:	201f      	movs	r0, #31
 8001192:	f000 faa6 	bl	80016e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2105      	movs	r1, #5
 800119a:	2020      	movs	r0, #32
 800119c:	f000 fa85 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011a0:	2020      	movs	r0, #32
 80011a2:	f000 fa9e 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	37b8      	adds	r7, #184	; 0xb8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ae      	sub	sp, #184	; 0xb8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2290      	movs	r2, #144	; 0x90
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f007 fb15 	bl	800880c <memset>
  if(huart->Instance==USART3)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a26      	ldr	r2, [pc, #152]	; (8001280 <HAL_UART_MspInit+0xc4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d144      	bne.n	8001276 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 f858 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001206:	f7ff fe83 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_UART_MspInit+0xc8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_UART_MspInit+0xc8>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_UART_MspInit+0xc8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_UART_MspInit+0xc8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_UART_MspInit+0xc8>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_UART_MspInit+0xc8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800123a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001254:	2307      	movs	r3, #7
 8001256:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800125e:	4619      	mov	r1, r3
 8001260:	4809      	ldr	r0, [pc, #36]	; (8001288 <HAL_UART_MspInit+0xcc>)
 8001262:	f000 fe1f 	bl	8001ea4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2105      	movs	r1, #5
 800126a:	2027      	movs	r0, #39	; 0x27
 800126c:	f000 fa1d 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001270:	2027      	movs	r0, #39	; 0x27
 8001272:	f000 fa36 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	37b8      	adds	r7, #184	; 0xb8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40004800 	.word	0x40004800
 8001284:	40023800 	.word	0x40023800
 8001288:	40020c00 	.word	0x40020c00

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <NMI_Handler+0x4>

08001292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <MemManage_Handler+0x4>

0800129e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <UsageFault_Handler+0x4>

080012aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012bc:	f000 f8d6 	bl	800146c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012c0:	f006 fc0e 	bl	8007ae0 <xTaskGetSchedulerState>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d001      	beq.n	80012ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012ca:	f006 ffed 	bl	80082a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <I2C1_EV_IRQHandler+0x10>)
 80012da:	f001 fa3d 	bl	8002758 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000554 	.word	0x20000554

080012e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <I2C1_ER_IRQHandler+0x10>)
 80012ee:	f001 fa4d 	bl	800278c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000554 	.word	0x20000554

080012fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <USART3_IRQHandler+0x10>)
 8001302:	f003 fd13 	bl	8004d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200005a8 	.word	0x200005a8

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f007 fa2c 	bl	800879c <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20080000 	.word	0x20080000
 8001370:	00000400 	.word	0x00000400
 8001374:	2000063c 	.word	0x2000063c
 8001378:	200043a0 	.word	0x200043a0

0800137c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013a6:	490e      	ldr	r1, [pc, #56]	; (80013e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013bc:	4c0b      	ldr	r4, [pc, #44]	; (80013ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ca:	f7ff ffd7 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f007 f9eb 	bl	80087a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d2:	f7ff fb75 	bl	8000ac0 <main>
  bx  lr    
 80013d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013e4:	08009218 	.word	0x08009218
  ldr r2, =_sbss
 80013e8:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80013ec:	200043a0 	.word	0x200043a0

080013f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC_IRQHandler>

080013f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f6:	2003      	movs	r0, #3
 80013f8:	f000 f94c 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fc:	200f      	movs	r0, #15
 80013fe:	f000 f805 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001402:	f7ff fd8b 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f967 	bl	80016fe <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f92f 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000004 	.word	0x20000004
 8001464:	2000000c 	.word	0x2000000c
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000000c 	.word	0x2000000c
 8001490:	20000640 	.word	0x20000640

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000640 	.word	0x20000640

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffde 	bl	8001494 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000000c 	.word	0x2000000c

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <__NVIC_SetPriorityGrouping+0x40>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	4313      	orrs	r3, r2
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x40>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00
 8001538:	05fa0000 	.word	0x05fa0000

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff29 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff3e 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff8e 	bl	80015e8 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff31 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff feb6 	bl	8001494 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d008      	beq.n	8001748 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e052      	b.n	80017ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0216 	bic.w	r2, r2, #22
 8001756:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001766:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <HAL_DMA_Abort+0x62>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0208 	bic.w	r2, r2, #8
 8001786:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001798:	e013      	b.n	80017c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800179a:	f7ff fe7b 	bl	8001494 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d90c      	bls.n	80017c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2220      	movs	r2, #32
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e015      	b.n	80017ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e4      	bne.n	800179a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	223f      	movs	r2, #63	; 0x3f
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d004      	beq.n	8001814 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e00c      	b.n	800182e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2205      	movs	r2, #5
 8001818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001848:	b2db      	uxtb	r3, r3
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06a      	b.n	8001940 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001870:	2b00      	cmp	r3, #0
 8001872:	d106      	bne.n	8001882 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2223      	movs	r2, #35	; 0x23
 8001878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fb75 	bl	8000f6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_ETH_Init+0xf0>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a30      	ldr	r2, [pc, #192]	; (8001948 <HAL_ETH_Init+0xf0>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_ETH_Init+0xf0>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <HAL_ETH_Init+0xf4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a2b      	ldr	r2, [pc, #172]	; (800194c <HAL_ETH_Init+0xf4>)
 80018a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <HAL_ETH_Init+0xf4>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4927      	ldr	r1, [pc, #156]	; (800194c <HAL_ETH_Init+0xf4>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_ETH_Init+0xf4>)
 80018b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d0:	f7ff fde0 	bl	8001494 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018d6:	e011      	b.n	80018fc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018d8:	f7ff fddc 	bl	8001494 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018e6:	d909      	bls.n	80018fc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	22e0      	movs	r2, #224	; 0xe0
 80018f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e021      	b.n	8001940 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e4      	bne.n	80018d8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f958 	bl	8001bc4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f9ff 	bl	8001d18 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fa55 	bl	8001dca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	461a      	mov	r2, r3
 8001926:	2100      	movs	r1, #0
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f9bd 	bl	8001ca8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2210      	movs	r2, #16
 800193a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800

08001950 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4b51      	ldr	r3, [pc, #324]	; (8001aac <ETH_SetMACConfig+0x15c>)
 8001966:	4013      	ands	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	7c1b      	ldrb	r3, [r3, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d102      	bne.n	8001978 <ETH_SetMACConfig+0x28>
 8001972:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001976:	e000      	b.n	800197a <ETH_SetMACConfig+0x2a>
 8001978:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	7c5b      	ldrb	r3, [r3, #17]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <ETH_SetMACConfig+0x38>
 8001982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001986:	e000      	b.n	800198a <ETH_SetMACConfig+0x3a>
 8001988:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800198a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001990:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	7fdb      	ldrb	r3, [r3, #31]
 8001996:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001998:	431a      	orrs	r2, r3
                        macconf->Speed |
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800199e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	7f92      	ldrb	r2, [r2, #30]
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d102      	bne.n	80019ae <ETH_SetMACConfig+0x5e>
 80019a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ac:	e000      	b.n	80019b0 <ETH_SetMACConfig+0x60>
 80019ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80019b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	7f1b      	ldrb	r3, [r3, #28]
 80019b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	791b      	ldrb	r3, [r3, #4]
 80019c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80019c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019ce:	2a00      	cmp	r2, #0
 80019d0:	d102      	bne.n	80019d8 <ETH_SetMACConfig+0x88>
 80019d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d6:	e000      	b.n	80019da <ETH_SetMACConfig+0x8a>
 80019d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	7bdb      	ldrb	r3, [r3, #15]
 80019e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019f2:	4313      	orrs	r3, r2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff fd4e 	bl	80014ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a26:	4013      	ands	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	d101      	bne.n	8001a3e <ETH_SetMACConfig+0xee>
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	e000      	b.n	8001a40 <ETH_SetMACConfig+0xf0>
 8001a3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a40:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001a4e:	2a01      	cmp	r2, #1
 8001a50:	d101      	bne.n	8001a56 <ETH_SetMACConfig+0x106>
 8001a52:	2208      	movs	r2, #8
 8001a54:	e000      	b.n	8001a58 <ETH_SetMACConfig+0x108>
 8001a56:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a58:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001a60:	2a01      	cmp	r2, #1
 8001a62:	d101      	bne.n	8001a68 <ETH_SetMACConfig+0x118>
 8001a64:	2204      	movs	r2, #4
 8001a66:	e000      	b.n	8001a6a <ETH_SetMACConfig+0x11a>
 8001a68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001a72:	2a01      	cmp	r2, #1
 8001a74:	d101      	bne.n	8001a7a <ETH_SetMACConfig+0x12a>
 8001a76:	2202      	movs	r2, #2
 8001a78:	e000      	b.n	8001a7c <ETH_SetMACConfig+0x12c>
 8001a7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fd09 	bl	80014ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	ff20810f 	.word	0xff20810f

08001ab0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <ETH_SetDMAConfig+0x110>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7b1b      	ldrb	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <ETH_SetDMAConfig+0x2c>
 8001ad6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ada:	e000      	b.n	8001ade <ETH_SetDMAConfig+0x2e>
 8001adc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	7b5b      	ldrb	r3, [r3, #13]
 8001ae2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ae4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	7f52      	ldrb	r2, [r2, #29]
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d102      	bne.n	8001af4 <ETH_SetDMAConfig+0x44>
 8001aee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001af2:	e000      	b.n	8001af6 <ETH_SetDMAConfig+0x46>
 8001af4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001af6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7b9b      	ldrb	r3, [r3, #14]
 8001afc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001afe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	7f1b      	ldrb	r3, [r3, #28]
 8001b0a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b0c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	7f9b      	ldrb	r3, [r3, #30]
 8001b12:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b14:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b22:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fcb0 	bl	80014ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b54:	461a      	mov	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	791b      	ldrb	r3, [r3, #4]
 8001b5e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b64:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b6a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b70:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b78:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b7a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b82:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b88:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b96:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff fc81 	bl	80014ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	f8de3f23 	.word	0xf8de3f23

08001bc4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0a6      	sub	sp, #152	; 0x98
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c00:	2300      	movs	r3, #0
 8001c02:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe86 	bl	8001950 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c7e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff08 	bl	8001ab0 <ETH_SetDMAConfig>
}
 8001ca0:	bf00      	nop
 8001ca2:	3798      	adds	r7, #152	; 0x98
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3305      	adds	r3, #5
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	3204      	adds	r2, #4
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <ETH_MACAddressConfig+0x68>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	061a      	lsls	r2, r3, #24
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	4313      	orrs	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	7812      	ldrb	r2, [r2, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <ETH_MACAddressConfig+0x6c>)
 8001cfa:	4413      	add	r3, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	6013      	str	r3, [r2, #0]
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40028040 	.word	0x40028040
 8001d14:	40028044 	.word	0x40028044

08001d18 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e03e      	b.n	8001da4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68d9      	ldr	r1, [r3, #12]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	3206      	adds	r2, #6
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d80c      	bhi.n	8001d88 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68d9      	ldr	r1, [r3, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	e004      	b.n	8001d92 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d9bd      	bls.n	8001d26 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbc:	611a      	str	r2, [r3, #16]
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e046      	b.n	8001e66 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6919      	ldr	r1, [r3, #16]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e14:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001e1c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	3212      	adds	r2, #18
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d80c      	bhi.n	8001e56 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6919      	ldr	r1, [r3, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	e004      	b.n	8001e60 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3301      	adds	r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d9b5      	bls.n	8001dd8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e96:	60da      	str	r2, [r3, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e175      	b.n	80021b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	f040 8164 	bne.w	80021aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_GPIO_Init+0x56>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d130      	bne.n	8001f5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d017      	beq.n	8001f98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80be 	beq.w	80021aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <HAL_GPIO_Init+0x324>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a65      	ldr	r2, [pc, #404]	; (80021c8 <HAL_GPIO_Init+0x324>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_GPIO_Init+0x324>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002046:	4a61      	ldr	r2, [pc, #388]	; (80021cc <HAL_GPIO_Init+0x328>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_GPIO_Init+0x32c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d037      	beq.n	80020e2 <HAL_GPIO_Init+0x23e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a57      	ldr	r2, [pc, #348]	; (80021d4 <HAL_GPIO_Init+0x330>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d031      	beq.n	80020de <HAL_GPIO_Init+0x23a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a56      	ldr	r2, [pc, #344]	; (80021d8 <HAL_GPIO_Init+0x334>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x236>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a55      	ldr	r2, [pc, #340]	; (80021dc <HAL_GPIO_Init+0x338>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x232>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a54      	ldr	r2, [pc, #336]	; (80021e0 <HAL_GPIO_Init+0x33c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x22e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a53      	ldr	r2, [pc, #332]	; (80021e4 <HAL_GPIO_Init+0x340>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x22a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_GPIO_Init+0x344>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x226>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_GPIO_Init+0x348>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <HAL_GPIO_Init+0x34c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x21e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_GPIO_Init+0x350>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x21a>
 80020ba:	2309      	movs	r3, #9
 80020bc:	e012      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020be:	230a      	movs	r3, #10
 80020c0:	e010      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020c2:	2308      	movs	r3, #8
 80020c4:	e00e      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e00c      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e00a      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e008      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e004      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020da:	2302      	movs	r3, #2
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020e2:	2300      	movs	r3, #0
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f002 0203 	and.w	r2, r2, #3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4093      	lsls	r3, r2
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020f4:	4935      	ldr	r1, [pc, #212]	; (80021cc <HAL_GPIO_Init+0x328>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002102:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002126:	4a34      	ldr	r2, [pc, #208]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800212c:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <HAL_GPIO_Init+0x354>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002150:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_GPIO_Init+0x354>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_GPIO_Init+0x354>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f67f ae86 	bls.w	8001ec4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40013800 	.word	0x40013800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40021400 	.word	0x40021400
 80021e8:	40021800 	.word	0x40021800
 80021ec:	40021c00 	.word	0x40021c00
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40022400 	.word	0x40022400
 80021f8:	40013c00 	.word	0x40013c00

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	619a      	str	r2, [r3, #24]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	041a      	lsls	r2, r3, #16
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43d9      	mvns	r1, r3
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	400b      	ands	r3, r1
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe ff26 	bl	80010dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	e006      	b.n	80022ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d104      	bne.n	80022fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_I2C_Init+0x11c>)
 800230a:	430b      	orrs	r3, r1
 800230c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800231c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69d9      	ldr	r1, [r3, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1a      	ldr	r2, [r3, #32]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	02008000 	.word	0x02008000

08002384 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	f040 80da 	bne.w	800255a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_I2C_Master_Transmit+0x30>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e0d3      	b.n	800255c <HAL_I2C_Master_Transmit+0x1d8>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023bc:	f7ff f86a 	bl	8001494 <HAL_GetTick>
 80023c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2319      	movs	r3, #25
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fefb 	bl	80031ca <I2C_WaitOnFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0be      	b.n	800255c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2221      	movs	r2, #33	; 0x21
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2210      	movs	r2, #16
 80023ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	893a      	ldrh	r2, [r7, #8]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	2bff      	cmp	r3, #255	; 0xff
 800240e:	d90e      	bls.n	800242e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	22ff      	movs	r2, #255	; 0xff
 8002414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	b2da      	uxtb	r2, r3
 800241c:	8979      	ldrh	r1, [r7, #10]
 800241e:	4b51      	ldr	r3, [pc, #324]	; (8002564 <HAL_I2C_Master_Transmit+0x1e0>)
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f001 f8e6 	bl	80035f8 <I2C_TransferConfig>
 800242c:	e06c      	b.n	8002508 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	b2da      	uxtb	r2, r3
 800243e:	8979      	ldrh	r1, [r7, #10]
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_I2C_Master_Transmit+0x1e0>)
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f001 f8d5 	bl	80035f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800244e:	e05b      	b.n	8002508 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	6a39      	ldr	r1, [r7, #32]
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fef8 	bl	800324a <I2C_WaitOnTXISFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e07b      	b.n	800255c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d034      	beq.n	8002508 <HAL_I2C_Master_Transmit+0x184>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d130      	bne.n	8002508 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fe8a 	bl	80031ca <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e04d      	b.n	800255c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2bff      	cmp	r3, #255	; 0xff
 80024c8:	d90e      	bls.n	80024e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	22ff      	movs	r2, #255	; 0xff
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	8979      	ldrh	r1, [r7, #10]
 80024d8:	2300      	movs	r3, #0
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f001 f889 	bl	80035f8 <I2C_TransferConfig>
 80024e6:	e00f      	b.n	8002508 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	8979      	ldrh	r1, [r7, #10]
 80024fa:	2300      	movs	r3, #0
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f001 f878 	bl	80035f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d19e      	bne.n	8002450 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	6a39      	ldr	r1, [r7, #32]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fed7 	bl	80032ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e01a      	b.n	800255c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2220      	movs	r2, #32
 800252c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_I2C_Master_Transmit+0x1e4>)
 800253a:	400b      	ands	r3, r1
 800253c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
  }
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	80002000 	.word	0x80002000
 8002568:	fe00e800 	.word	0xfe00e800

0800256c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	461a      	mov	r2, r3
 8002578:	460b      	mov	r3, r1
 800257a:	817b      	strh	r3, [r7, #10]
 800257c:	4613      	mov	r3, r2
 800257e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b20      	cmp	r3, #32
 800258a:	f040 80db 	bne.w	8002744 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_I2C_Master_Receive+0x30>
 8002598:	2302      	movs	r3, #2
 800259a:	e0d4      	b.n	8002746 <HAL_I2C_Master_Receive+0x1da>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025a4:	f7fe ff76 	bl	8001494 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2319      	movs	r3, #25
 80025b0:	2201      	movs	r2, #1
 80025b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fe07 	bl	80031ca <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0bf      	b.n	8002746 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2222      	movs	r2, #34	; 0x22
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2210      	movs	r2, #16
 80025d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	893a      	ldrh	r2, [r7, #8]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2bff      	cmp	r3, #255	; 0xff
 80025f6:	d90e      	bls.n	8002616 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	22ff      	movs	r2, #255	; 0xff
 80025fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	b2da      	uxtb	r2, r3
 8002604:	8979      	ldrh	r1, [r7, #10]
 8002606:	4b52      	ldr	r3, [pc, #328]	; (8002750 <HAL_I2C_Master_Receive+0x1e4>)
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fff2 	bl	80035f8 <I2C_TransferConfig>
 8002614:	e06d      	b.n	80026f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	b2da      	uxtb	r2, r3
 8002626:	8979      	ldrh	r1, [r7, #10]
 8002628:	4b49      	ldr	r3, [pc, #292]	; (8002750 <HAL_I2C_Master_Receive+0x1e4>)
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 ffe1 	bl	80035f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002636:	e05c      	b.n	80026f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	6a39      	ldr	r1, [r7, #32]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fe81 	bl	8003344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e07c      	b.n	8002746 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d034      	beq.n	80026f2 <HAL_I2C_Master_Receive+0x186>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	2b00      	cmp	r3, #0
 800268e:	d130      	bne.n	80026f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	2200      	movs	r2, #0
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fd95 	bl	80031ca <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e04d      	b.n	8002746 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2bff      	cmp	r3, #255	; 0xff
 80026b2:	d90e      	bls.n	80026d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	22ff      	movs	r2, #255	; 0xff
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	8979      	ldrh	r1, [r7, #10]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 ff94 	bl	80035f8 <I2C_TransferConfig>
 80026d0:	e00f      	b.n	80026f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	2300      	movs	r3, #0
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 ff83 	bl	80035f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d19d      	bne.n	8002638 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	6a39      	ldr	r1, [r7, #32]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fde2 	bl	80032ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e01a      	b.n	8002746 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2220      	movs	r2, #32
 8002716:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6859      	ldr	r1, [r3, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_I2C_Master_Receive+0x1e8>)
 8002724:	400b      	ands	r3, r1
 8002726:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002744:	2302      	movs	r3, #2
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	80002400 	.word	0x80002400
 8002754:	fe00e800 	.word	0xfe00e800

08002758 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	68f9      	ldr	r1, [r7, #12]
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
  }
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d010      	beq.n	80027d2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	09db      	lsrs	r3, r3, #7
 80027b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	0a9b      	lsrs	r3, r3, #10
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d010      	beq.n	8002800 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	09db      	lsrs	r3, r3, #7
 80027e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f043 0208 	orr.w	r2, r3, #8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	0a5b      	lsrs	r3, r3, #9
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d010      	beq.n	800282e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	09db      	lsrs	r3, r3, #7
 8002810:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	f043 0202 	orr.w	r2, r3, #2
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 030b 	and.w	r3, r3, #11
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800283e:	68f9      	ldr	r1, [r7, #12]
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fb89 	bl	8002f58 <I2C_ITError>
  }
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
 8002882:	4613      	mov	r3, r2
 8002884:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <I2C_Slave_ISR_IT+0x24>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e0ec      	b.n	8002acc <I2C_Slave_ISR_IT+0x1fe>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002912:	6939      	ldr	r1, [r7, #16]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f9bf 	bl	8002c98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d04d      	beq.n	80029c2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800292e:	2b00      	cmp	r3, #0
 8002930:	d047      	beq.n	80029c2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d128      	bne.n	800298e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b28      	cmp	r3, #40	; 0x28
 8002946:	d108      	bne.n	800295a <I2C_Slave_ISR_IT+0x8c>
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800294e:	d104      	bne.n	800295a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002950:	6939      	ldr	r1, [r7, #16]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 faaa 	bl	8002eac <I2C_ITListenCplt>
 8002958:	e032      	b.n	80029c0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b29      	cmp	r3, #41	; 0x29
 8002964:	d10e      	bne.n	8002984 <I2C_Slave_ISR_IT+0xb6>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800296c:	d00a      	beq.n	8002984 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2210      	movs	r2, #16
 8002974:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fbe5 	bl	8003146 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f92d 	bl	8002bdc <I2C_ITSlaveSeqCplt>
 8002982:	e01d      	b.n	80029c0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2210      	movs	r2, #16
 800298a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800298c:	e096      	b.n	8002abc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f043 0204 	orr.w	r2, r3, #4
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <I2C_Slave_ISR_IT+0xe4>
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ae:	f040 8085 	bne.w	8002abc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4619      	mov	r1, r3
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 facd 	bl	8002f58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80029be:	e07d      	b.n	8002abc <I2C_Slave_ISR_IT+0x1ee>
 80029c0:	e07c      	b.n	8002abc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d030      	beq.n	8002a30 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d02a      	beq.n	8002a30 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d018      	beq.n	8002a16 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d14f      	bne.n	8002ac0 <I2C_Slave_ISR_IT+0x1f2>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a26:	d04b      	beq.n	8002ac0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f8d7 	bl	8002bdc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002a2e:	e047      	b.n	8002ac0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	08db      	lsrs	r3, r3, #3
 8002a40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002a48:	6939      	ldr	r1, [r7, #16]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f842 	bl	8002ad4 <I2C_ITAddrCplt>
 8002a50:	e037      	b.n	8002ac2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d031      	beq.n	8002ac2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02b      	beq.n	8002ac2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d018      	beq.n	8002aa6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	851a      	strh	r2, [r3, #40]	; 0x28
 8002aa4:	e00d      	b.n	8002ac2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aac:	d002      	beq.n	8002ab4 <I2C_Slave_ISR_IT+0x1e6>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d106      	bne.n	8002ac2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f891 	bl	8002bdc <I2C_ITSlaveSeqCplt>
 8002aba:	e002      	b.n	8002ac2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002abc:	bf00      	nop
 8002abe:	e000      	b.n	8002ac2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002ac0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002aea:	2b28      	cmp	r3, #40	; 0x28
 8002aec:	d16a      	bne.n	8002bc4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b0c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b28:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d138      	bne.n	8002ba4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002b32:	897b      	ldrh	r3, [r7, #10]
 8002b34:	09db      	lsrs	r3, r3, #7
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	89bb      	ldrh	r3, [r7, #12]
 8002b3a:	4053      	eors	r3, r2
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f003 0306 	and.w	r3, r3, #6
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11c      	bne.n	8002b80 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d13b      	bne.n	8002bd4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2208      	movs	r2, #8
 8002b68:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b72:	89ba      	ldrh	r2, [r7, #12]
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	4619      	mov	r1, r3
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fe7c 	bl	8002876 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b7e:	e029      	b.n	8002bd4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002b80:	893b      	ldrh	r3, [r7, #8]
 8002b82:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fd67 	bl	800365c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b96:	89ba      	ldrh	r2, [r7, #12]
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fe6a 	bl	8002876 <HAL_I2C_AddrCallback>
}
 8002ba2:	e017      	b.n	8002bd4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fd57 	bl	800365c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bb6:	89ba      	ldrh	r2, [r7, #12]
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fe5a 	bl	8002876 <HAL_I2C_AddrCallback>
}
 8002bc2:	e007      	b.n	8002bd4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	0b9b      	lsrs	r3, r3, #14
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e00d      	b.n	8002c2e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	0bdb      	lsrs	r3, r3, #15
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b29      	cmp	r3, #41	; 0x29
 8002c38:	d112      	bne.n	8002c60 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2228      	movs	r2, #40	; 0x28
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2221      	movs	r2, #33	; 0x21
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c48:	2101      	movs	r1, #1
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fd06 	bl	800365c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff fdf8 	bl	800284e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c5e:	e017      	b.n	8002c90 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b2a      	cmp	r3, #42	; 0x2a
 8002c6a:	d111      	bne.n	8002c90 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2228      	movs	r2, #40	; 0x28
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2222      	movs	r2, #34	; 0x22
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fced 	bl	800365c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff fde9 	bl	8002862 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b21      	cmp	r3, #33	; 0x21
 8002cc2:	d002      	beq.n	8002cca <I2C_ITSlaveCplt+0x32>
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b29      	cmp	r3, #41	; 0x29
 8002cc8:	d108      	bne.n	8002cdc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002cca:	f248 0101 	movw	r1, #32769	; 0x8001
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fcc4 	bl	800365c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2221      	movs	r2, #33	; 0x21
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cda:	e00d      	b.n	8002cf8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b22      	cmp	r3, #34	; 0x22
 8002ce0:	d002      	beq.n	8002ce8 <I2C_ITSlaveCplt+0x50>
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ce6:	d107      	bne.n	8002cf8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ce8:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fcb5 	bl	800365c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2222      	movs	r2, #34	; 0x22
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <I2C_ITSlaveCplt+0x20c>)
 8002d14:	400b      	ands	r3, r1
 8002d16:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fa14 	bl	8003146 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	0b9b      	lsrs	r3, r3, #14
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d013      	beq.n	8002d52 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d020      	beq.n	8002d84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d50:	e018      	b.n	8002d84 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	0bdb      	lsrs	r3, r3, #15
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d012      	beq.n	8002d84 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f023 0304 	bic.w	r3, r3, #4
 8002d96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f8a7 	bl	8002f58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b28      	cmp	r3, #40	; 0x28
 8002e14:	d141      	bne.n	8002e9a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f847 	bl	8002eac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e1e:	e03c      	b.n	8002e9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e28:	d014      	beq.n	8002e54 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fed6 	bl	8002bdc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <I2C_ITSlaveCplt+0x210>)
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fd20 	bl	8002892 <HAL_I2C_ListenCpltCallback>
}
 8002e52:	e022      	b.n	8002e9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b22      	cmp	r3, #34	; 0x22
 8002e5e:	d10e      	bne.n	8002e7e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff fcf3 	bl	8002862 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e7c:	e00d      	b.n	8002e9a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fcda 	bl	800284e <HAL_I2C_SlaveTxCpltCallback>
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	fe00e800 	.word	0xfe00e800
 8002ea8:	ffff0000 	.word	0xffff0000

08002eac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <I2C_ITListenCplt+0xa8>)
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d022      	beq.n	8002f2a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d012      	beq.n	8002f2a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	f043 0204 	orr.w	r2, r3, #4
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f2a:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fb94 	bl	800365c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff fca4 	bl	8002892 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	ffff0000 	.word	0xffff0000

08002f58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a5d      	ldr	r2, [pc, #372]	; (80030ec <I2C_ITError+0x194>)
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b28      	cmp	r3, #40	; 0x28
 8002f8e:	d005      	beq.n	8002f9c <I2C_ITError+0x44>
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b29      	cmp	r3, #41	; 0x29
 8002f94:	d002      	beq.n	8002f9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b2a      	cmp	r3, #42	; 0x2a
 8002f9a:	d10b      	bne.n	8002fb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f9c:	2103      	movs	r1, #3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fb5c 	bl	800365c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2228      	movs	r2, #40	; 0x28
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a50      	ldr	r2, [pc, #320]	; (80030f0 <I2C_ITError+0x198>)
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb2:	e011      	b.n	8002fd8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fb4:	f248 0103 	movw	r1, #32771	; 0x8003
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fb4f 	bl	800365c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b60      	cmp	r3, #96	; 0x60
 8002fc8:	d003      	beq.n	8002fd2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d039      	beq.n	800305a <I2C_ITError+0x102>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b11      	cmp	r3, #17
 8002fea:	d002      	beq.n	8002ff2 <I2C_ITError+0x9a>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b21      	cmp	r3, #33	; 0x21
 8002ff0:	d133      	bne.n	800305a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003000:	d107      	bne.n	8003012 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003010:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fc0f 	bl	800183a <HAL_DMA_GetState>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d017      	beq.n	8003052 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	4a33      	ldr	r2, [pc, #204]	; (80030f4 <I2C_ITError+0x19c>)
 8003028:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fbdd 	bl	80017f6 <HAL_DMA_Abort_IT>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04d      	beq.n	80030de <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800304c:	4610      	mov	r0, r2
 800304e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003050:	e045      	b.n	80030de <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f850 	bl	80030f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003058:	e041      	b.n	80030de <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d039      	beq.n	80030d6 <I2C_ITError+0x17e>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b12      	cmp	r3, #18
 8003066:	d002      	beq.n	800306e <I2C_ITError+0x116>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b22      	cmp	r3, #34	; 0x22
 800306c:	d133      	bne.n	80030d6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800307c:	d107      	bne.n	800308e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800308c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fbd1 	bl	800183a <HAL_DMA_GetState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d017      	beq.n	80030ce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <I2C_ITError+0x19c>)
 80030a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fb9f 	bl	80017f6 <HAL_DMA_Abort_IT>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d011      	beq.n	80030e2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030c8:	4610      	mov	r0, r2
 80030ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030cc:	e009      	b.n	80030e2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f812 	bl	80030f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030d4:	e005      	b.n	80030e2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f80e 	bl	80030f8 <I2C_TreatErrorCallback>
  }
}
 80030dc:	e002      	b.n	80030e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030e2:	bf00      	nop
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	ffff0000 	.word	0xffff0000
 80030f0:	080028cf 	.word	0x080028cf
 80030f4:	0800318f 	.word	0x0800318f

080030f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b60      	cmp	r3, #96	; 0x60
 800310a:	d10e      	bne.n	800312a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff fbc9 	bl	80028ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003128:	e009      	b.n	800313e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fbb4 	bl	80028a6 <HAL_I2C_ErrorCallback>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d103      	bne.n	8003164 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2200      	movs	r2, #0
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d007      	beq.n	8003182 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	619a      	str	r2, [r3, #24]
  }
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2200      	movs	r2, #0
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	2200      	movs	r2, #0
 80031ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7ff ff9b 	bl	80030f8 <I2C_TreatErrorCallback>
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031da:	e022      	b.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d01e      	beq.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fe f956 	bl	8001494 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <I2C_WaitOnFlagUntilTimeout+0x30>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d113      	bne.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e00f      	b.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	429a      	cmp	r2, r3
 800323e:	d0cd      	beq.n	80031dc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003256:	e02c      	b.n	80032b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f8eb 	bl	8003438 <I2C_IsErrorOccurred>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e02a      	b.n	80032c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d01e      	beq.n	80032b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003274:	f7fe f90e 	bl	8001494 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	d302      	bcc.n	800328a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d113      	bne.n	80032b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e007      	b.n	80032c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d1cb      	bne.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d6:	e028      	b.n	800332a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f8ab 	bl	8003438 <I2C_IsErrorOccurred>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e026      	b.n	800333a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ec:	f7fe f8d2 	bl	8001494 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d302      	bcc.n	8003302 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d113      	bne.n	800332a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e007      	b.n	800333a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b20      	cmp	r3, #32
 8003336:	d1cf      	bne.n	80032d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003350:	e064      	b.n	800341c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f86e 	bl	8003438 <I2C_IsErrorOccurred>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e062      	b.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b20      	cmp	r3, #32
 8003372:	d138      	bne.n	80033e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d105      	bne.n	800338e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e04e      	b.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b10      	cmp	r3, #16
 800339a:	d107      	bne.n	80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2210      	movs	r2, #16
 80033a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2204      	movs	r2, #4
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44
 80033aa:	e002      	b.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2220      	movs	r2, #32
 80033b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80033c6:	400b      	ands	r3, r1
 80033c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e022      	b.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe f855 	bl	8001494 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10f      	bne.n	800341c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e007      	b.n	800342c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b04      	cmp	r3, #4
 8003428:	d193      	bne.n	8003352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	fe00e800 	.word	0xfe00e800

08003438 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d068      	beq.n	8003536 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2210      	movs	r2, #16
 800346a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800346c:	e049      	b.n	8003502 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d045      	beq.n	8003502 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe f80d 	bl	8001494 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_IsErrorOccurred+0x54>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d13a      	bne.n	8003502 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800349e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ae:	d121      	bne.n	80034f4 <I2C_IsErrorOccurred+0xbc>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b6:	d01d      	beq.n	80034f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d01a      	beq.n	80034f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034ce:	f7fd ffe1 	bl	8001494 <HAL_GetTick>
 80034d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d4:	e00e      	b.n	80034f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034d6:	f7fd ffdd 	bl	8001494 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b19      	cmp	r3, #25
 80034e2:	d907      	bls.n	80034f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f043 0320 	orr.w	r3, r3, #32
 80034ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80034f2:	e006      	b.n	8003502 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d1e9      	bne.n	80034d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b20      	cmp	r3, #32
 800350e:	d003      	beq.n	8003518 <I2C_IsErrorOccurred+0xe0>
 8003510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0aa      	beq.n	800346e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2220      	movs	r2, #32
 8003526:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003558:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800357a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00b      	beq.n	80035a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01c      	beq.n	80035e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff fdca 	bl	8003146 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <I2C_IsErrorOccurred+0x1bc>)
 80035be:	400b      	ands	r3, r1
 80035c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80035e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	fe00e800 	.word	0xfe00e800

080035f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	817b      	strh	r3, [r7, #10]
 8003606:	4613      	mov	r3, r2
 8003608:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003610:	7a7b      	ldrb	r3, [r7, #9]
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003618:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	4313      	orrs	r3, r2
 8003622:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003626:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	0d5b      	lsrs	r3, r3, #21
 8003632:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <I2C_TransferConfig+0x60>)
 8003638:	430b      	orrs	r3, r1
 800363a:	43db      	mvns	r3, r3
 800363c:	ea02 0103 	and.w	r1, r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	03ff63ff 	.word	0x03ff63ff

0800365c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00f      	beq.n	8003696 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800367c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800368a:	2b28      	cmp	r3, #40	; 0x28
 800368c:	d003      	beq.n	8003696 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003694:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003696:	887b      	ldrh	r3, [r7, #2]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00f      	beq.n	80036c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80036a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036b4:	2b28      	cmp	r3, #40	; 0x28
 80036b6:	d003      	beq.n	80036c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80036be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da03      	bge.n	80036d0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d103      	bne.n	80036de <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d103      	bne.n	80036ec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f043 0320 	orr.w	r3, r3, #32
 80036ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d103      	bne.n	80036fa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43da      	mvns	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	400a      	ands	r2, r1
 800370a:	601a      	str	r2, [r3, #0]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b20      	cmp	r3, #32
 800372c:	d138      	bne.n	80037a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003738:	2302      	movs	r3, #2
 800373a:	e032      	b.n	80037a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800376a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d139      	bne.n	8003838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e033      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2224      	movs	r2, #36	; 0x24
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003856:	6013      	str	r3, [r2, #0]
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40007000 	.word	0x40007000

08003868 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_PWREx_EnableOverDrive+0x98>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a22      	ldr	r2, [pc, #136]	; (8003900 <HAL_PWREx_EnableOverDrive+0x98>)
 8003878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_PWREx_EnableOverDrive+0x98>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <HAL_PWREx_EnableOverDrive+0x9c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003894:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003896:	f7fd fdfd 	bl	8001494 <HAL_GetTick>
 800389a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800389c:	e009      	b.n	80038b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800389e:	f7fd fdf9 	bl	8001494 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ac:	d901      	bls.n	80038b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e022      	b.n	80038f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038be:	d1ee      	bne.n	800389e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038cc:	f7fd fde2 	bl	8001494 <HAL_GetTick>
 80038d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038d2:	e009      	b.n	80038e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038d4:	f7fd fdde 	bl	8001494 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038e2:	d901      	bls.n	80038e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e007      	b.n	80038f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f4:	d1ee      	bne.n	80038d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	40007000 	.word	0x40007000

08003908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003910:	2300      	movs	r3, #0
 8003912:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e29b      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8087 	beq.w	8003a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800392c:	4b96      	ldr	r3, [pc, #600]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b04      	cmp	r3, #4
 8003936:	d00c      	beq.n	8003952 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003938:	4b93      	ldr	r3, [pc, #588]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d112      	bne.n	800396a <HAL_RCC_OscConfig+0x62>
 8003944:	4b90      	ldr	r3, [pc, #576]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003950:	d10b      	bne.n	800396a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003952:	4b8d      	ldr	r3, [pc, #564]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d06c      	beq.n	8003a38 <HAL_RCC_OscConfig+0x130>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d168      	bne.n	8003a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e275      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x7a>
 8003974:	4b84      	ldr	r3, [pc, #528]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a83      	ldr	r2, [pc, #524]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e02e      	b.n	80039e0 <HAL_RCC_OscConfig+0xd8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x9c>
 800398a:	4b7f      	ldr	r3, [pc, #508]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a7e      	ldr	r2, [pc, #504]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b7c      	ldr	r3, [pc, #496]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7b      	ldr	r2, [pc, #492]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 800399c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e01d      	b.n	80039e0 <HAL_RCC_OscConfig+0xd8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 80039ae:	4b76      	ldr	r3, [pc, #472]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a75      	ldr	r2, [pc, #468]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b73      	ldr	r3, [pc, #460]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a72      	ldr	r2, [pc, #456]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0xd8>
 80039c8:	4b6f      	ldr	r3, [pc, #444]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a6e      	ldr	r2, [pc, #440]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b6c      	ldr	r3, [pc, #432]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a6b      	ldr	r2, [pc, #428]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 80039da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fd54 	bl	8001494 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd fd50 	bl	8001494 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e229      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b61      	ldr	r3, [pc, #388]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0xe8>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd fd40 	bl	8001494 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fd fd3c 	bl	8001494 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e215      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	4b57      	ldr	r3, [pc, #348]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x110>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d069      	beq.n	8003b1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a46:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a52:	4b4d      	ldr	r3, [pc, #308]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d11c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x190>
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d116      	bne.n	8003a98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_RCC_OscConfig+0x17a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e1e9      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a82:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	493d      	ldr	r1, [pc, #244]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	e040      	b.n	8003b1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d023      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa0:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a38      	ldr	r2, [pc, #224]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fd fcf2 	bl	8001494 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fd fcee 	bl	8001494 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1c7      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4929      	ldr	r1, [pc, #164]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
 8003ae6:	e018      	b.n	8003b1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fd fcce 	bl	8001494 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afc:	f7fd fcca 	bl	8001494 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e1a3      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d038      	beq.n	8003b98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d019      	beq.n	8003b62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3a:	f7fd fcab 	bl	8001494 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b42:	f7fd fca7 	bl	8001494 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e180      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x23a>
 8003b60:	e01a      	b.n	8003b98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b66:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <HAL_RCC_OscConfig+0x280>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fc91 	bl	8001494 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b76:	f7fd fc8d 	bl	8001494 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d903      	bls.n	8003b8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e166      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
 8003b88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	4b92      	ldr	r3, [pc, #584]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80a4 	beq.w	8003cee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba6:	4b8c      	ldr	r3, [pc, #560]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10d      	bne.n	8003bce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	4b89      	ldr	r3, [pc, #548]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	4a88      	ldr	r2, [pc, #544]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bbe:	4b86      	ldr	r3, [pc, #536]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bce:	4b83      	ldr	r3, [pc, #524]	; (8003ddc <HAL_RCC_OscConfig+0x4d4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d118      	bne.n	8003c0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bda:	4b80      	ldr	r3, [pc, #512]	; (8003ddc <HAL_RCC_OscConfig+0x4d4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a7f      	ldr	r2, [pc, #508]	; (8003ddc <HAL_RCC_OscConfig+0x4d4>)
 8003be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be6:	f7fd fc55 	bl	8001494 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bee:	f7fd fc51 	bl	8001494 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b64      	cmp	r3, #100	; 0x64
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e12a      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c00:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCC_OscConfig+0x4d4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d106      	bne.n	8003c22 <HAL_RCC_OscConfig+0x31a>
 8003c14:	4b70      	ldr	r3, [pc, #448]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4a6f      	ldr	r2, [pc, #444]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c20:	e02d      	b.n	8003c7e <HAL_RCC_OscConfig+0x376>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x33c>
 8003c2a:	4b6b      	ldr	r3, [pc, #428]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a6a      	ldr	r2, [pc, #424]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	4b68      	ldr	r3, [pc, #416]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a67      	ldr	r2, [pc, #412]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
 8003c42:	e01c      	b.n	8003c7e <HAL_RCC_OscConfig+0x376>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCC_OscConfig+0x35e>
 8003c4c:	4b62      	ldr	r3, [pc, #392]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a61      	ldr	r2, [pc, #388]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	4b5f      	ldr	r3, [pc, #380]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a5e      	ldr	r2, [pc, #376]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	e00b      	b.n	8003c7e <HAL_RCC_OscConfig+0x376>
 8003c66:	4b5c      	ldr	r3, [pc, #368]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a5b      	ldr	r2, [pc, #364]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
 8003c72:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d015      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fd fc05 	bl	8001494 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fd fc01 	bl	8001494 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e0d8      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ee      	beq.n	8003c8e <HAL_RCC_OscConfig+0x386>
 8003cb0:	e014      	b.n	8003cdc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fbef 	bl	8001494 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f7fd fbeb 	bl	8001494 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e0c2      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd0:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ee      	bne.n	8003cba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a3c      	ldr	r2, [pc, #240]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80ae 	beq.w	8003e54 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf8:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d06d      	beq.n	8003de0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d14b      	bne.n	8003da4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b32      	ldr	r3, [pc, #200]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a31      	ldr	r2, [pc, #196]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fd fbbc 	bl	8001494 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fd fbb8 	bl	8001494 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e091      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	071b      	lsls	r3, r3, #28
 8003d6a:	491b      	ldr	r1, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fb8a 	bl	8001494 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd fb86 	bl	8001494 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e05f      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x47c>
 8003da2:	e057      	b.n	8003e54 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0b      	ldr	r2, [pc, #44]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fd fb70 	bl	8001494 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fd fb6c 	bl	8001494 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e045      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x4b0>
 8003dd6:	e03d      	b.n	8003e54 <HAL_RCC_OscConfig+0x54c>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003de0:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <HAL_RCC_OscConfig+0x558>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d030      	beq.n	8003e50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d129      	bne.n	8003e50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d122      	bne.n	8003e50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d119      	bne.n	8003e50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d10f      	bne.n	8003e50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800

08003e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d0      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b67      	ldr	r3, [pc, #412]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 020f 	bic.w	r2, r3, #15
 8003e92:	4965      	ldr	r1, [pc, #404]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003eca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ece:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ee6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d040      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e073      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4936      	ldr	r1, [pc, #216]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f58:	f7fd fa9c 	bl	8001494 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fd fa98 	bl	8001494 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e053      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d210      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 020f 	bic.w	r2, r3, #15
 8003f9e:	4922      	ldr	r1, [pc, #136]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x1cc>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1d0>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1d4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd f9f8 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023c00 	.word	0x40023c00
 800402c:	40023800 	.word	0x40023800
 8004030:	080091bc 	.word	0x080091bc
 8004034:	20000004 	.word	0x20000004
 8004038:	20000008 	.word	0x20000008

0800403c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b094      	sub	sp, #80	; 0x50
 8004042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	647b      	str	r3, [r7, #68]	; 0x44
 8004048:	2300      	movs	r3, #0
 800404a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404c:	2300      	movs	r3, #0
 800404e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004054:	4b79      	ldr	r3, [pc, #484]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d00d      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x40>
 8004060:	2b08      	cmp	r3, #8
 8004062:	f200 80e1 	bhi.w	8004228 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x34>
 800406a:	2b04      	cmp	r3, #4
 800406c:	d003      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x3a>
 800406e:	e0db      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b73      	ldr	r3, [pc, #460]	; (8004240 <HAL_RCC_GetSysClockFreq+0x204>)
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004074:	e0db      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004076:	4b73      	ldr	r3, [pc, #460]	; (8004244 <HAL_RCC_GetSysClockFreq+0x208>)
 8004078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800407a:	e0d8      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800407c:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004086:	4b6d      	ldr	r3, [pc, #436]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d063      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004092:	4b6a      	ldr	r3, [pc, #424]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	2200      	movs	r2, #0
 800409a:	63bb      	str	r3, [r7, #56]	; 0x38
 800409c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30
 80040a6:	2300      	movs	r3, #0
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
 80040aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040ae:	4622      	mov	r2, r4
 80040b0:	462b      	mov	r3, r5
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	0159      	lsls	r1, r3, #5
 80040bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c0:	0150      	lsls	r0, r2, #5
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4621      	mov	r1, r4
 80040c8:	1a51      	subs	r1, r2, r1
 80040ca:	6139      	str	r1, [r7, #16]
 80040cc:	4629      	mov	r1, r5
 80040ce:	eb63 0301 	sbc.w	r3, r3, r1
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e0:	4659      	mov	r1, fp
 80040e2:	018b      	lsls	r3, r1, #6
 80040e4:	4651      	mov	r1, sl
 80040e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ea:	4651      	mov	r1, sl
 80040ec:	018a      	lsls	r2, r1, #6
 80040ee:	4651      	mov	r1, sl
 80040f0:	ebb2 0801 	subs.w	r8, r2, r1
 80040f4:	4659      	mov	r1, fp
 80040f6:	eb63 0901 	sbc.w	r9, r3, r1
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410e:	4690      	mov	r8, r2
 8004110:	4699      	mov	r9, r3
 8004112:	4623      	mov	r3, r4
 8004114:	eb18 0303 	adds.w	r3, r8, r3
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	462b      	mov	r3, r5
 800411c:	eb49 0303 	adc.w	r3, r9, r3
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800412e:	4629      	mov	r1, r5
 8004130:	024b      	lsls	r3, r1, #9
 8004132:	4621      	mov	r1, r4
 8004134:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004138:	4621      	mov	r1, r4
 800413a:	024a      	lsls	r2, r1, #9
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004142:	2200      	movs	r2, #0
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800414c:	f7fc f8d0 	bl	80002f0 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4613      	mov	r3, r2
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	e058      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415a:	4b38      	ldr	r3, [pc, #224]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	2200      	movs	r2, #0
 8004162:	4618      	mov	r0, r3
 8004164:	4611      	mov	r1, r2
 8004166:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
 8004170:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	0159      	lsls	r1, r3, #5
 8004182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004186:	0150      	lsls	r0, r2, #5
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4641      	mov	r1, r8
 800418e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004192:	4649      	mov	r1, r9
 8004194:	eb63 0b01 	sbc.w	fp, r3, r1
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041ac:	ebb2 040a 	subs.w	r4, r2, sl
 80041b0:	eb63 050b 	sbc.w	r5, r3, fp
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	00eb      	lsls	r3, r5, #3
 80041be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041c2:	00e2      	lsls	r2, r4, #3
 80041c4:	4614      	mov	r4, r2
 80041c6:	461d      	mov	r5, r3
 80041c8:	4643      	mov	r3, r8
 80041ca:	18e3      	adds	r3, r4, r3
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	464b      	mov	r3, r9
 80041d0:	eb45 0303 	adc.w	r3, r5, r3
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041e2:	4629      	mov	r1, r5
 80041e4:	028b      	lsls	r3, r1, #10
 80041e6:	4621      	mov	r1, r4
 80041e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041ec:	4621      	mov	r1, r4
 80041ee:	028a      	lsls	r2, r1, #10
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f6:	2200      	movs	r2, #0
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	61fa      	str	r2, [r7, #28]
 80041fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004200:	f7fc f876 	bl	80002f0 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4613      	mov	r3, r2
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_GetSysClockFreq+0x200>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	3301      	adds	r3, #1
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800421c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800421e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004226:	e002      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCC_GetSysClockFreq+0x204>)
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800422c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800422e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004230:	4618      	mov	r0, r3
 8004232:	3750      	adds	r7, #80	; 0x50
 8004234:	46bd      	mov	sp, r7
 8004236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800
 8004240:	00f42400 	.word	0x00f42400
 8004244:	007a1200 	.word	0x007a1200

08004248 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <HAL_RCC_GetHCLKFreq+0x14>)
 800424e:	681b      	ldr	r3, [r3, #0]
}
 8004250:	4618      	mov	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000004 	.word	0x20000004

08004260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004264:	f7ff fff0 	bl	8004248 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0a9b      	lsrs	r3, r3, #10
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4903      	ldr	r1, [pc, #12]	; (8004284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	080091cc 	.word	0x080091cc

08004288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800428c:	f7ff ffdc 	bl	8004248 <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	0b5b      	lsrs	r3, r3, #13
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4903      	ldr	r1, [pc, #12]	; (80042ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40023800 	.word	0x40023800
 80042ac:	080091cc 	.word	0x080091cc

080042b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042d8:	4b69      	ldr	r3, [pc, #420]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a68      	ldr	r2, [pc, #416]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042e2:	6093      	str	r3, [r2, #8]
 80042e4:	4b66      	ldr	r3, [pc, #408]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ec:	4964      	ldr	r1, [pc, #400]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d017      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800430a:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	4959      	ldr	r1, [pc, #356]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004328:	d101      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800432a:	2301      	movs	r3, #1
 800432c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004336:	2301      	movs	r3, #1
 8004338:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d017      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004346:	4b4e      	ldr	r3, [pc, #312]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	494a      	ldr	r1, [pc, #296]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004364:	d101      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004382:	2301      	movs	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 808b 	beq.w	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004394:	4b3a      	ldr	r3, [pc, #232]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	4a39      	ldr	r2, [pc, #228]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439e:	6413      	str	r3, [r2, #64]	; 0x40
 80043a0:	4b37      	ldr	r3, [pc, #220]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043ac:	4b35      	ldr	r3, [pc, #212]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a34      	ldr	r2, [pc, #208]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b8:	f7fd f86c 	bl	8001494 <HAL_GetTick>
 80043bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7fd f868 	bl	8001494 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e38f      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043d2:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043de:	4b28      	ldr	r3, [pc, #160]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d035      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d02e      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043fc:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004404:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004410:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004412:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800441e:	4a18      	ldr	r2, [pc, #96]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004424:	4b16      	ldr	r3, [pc, #88]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d114      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd f830 	bl	8001494 <HAL_GetTick>
 8004434:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004436:	e00a      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004438:	f7fd f82c 	bl	8001494 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e351      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ee      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004466:	d111      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004476:	400b      	ands	r3, r1
 8004478:	4901      	ldr	r1, [pc, #4]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
 800447e:	e00b      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004480:	40023800 	.word	0x40023800
 8004484:	40007000 	.word	0x40007000
 8004488:	0ffffcff 	.word	0x0ffffcff
 800448c:	4bac      	ldr	r3, [pc, #688]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4aab      	ldr	r2, [pc, #684]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004492:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004496:	6093      	str	r3, [r2, #8]
 8004498:	4ba9      	ldr	r3, [pc, #676]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	49a6      	ldr	r1, [pc, #664]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d010      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044b6:	4ba2      	ldr	r3, [pc, #648]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044bc:	4aa0      	ldr	r2, [pc, #640]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044c6:	4b9e      	ldr	r3, [pc, #632]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	499b      	ldr	r1, [pc, #620]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e4:	4b96      	ldr	r3, [pc, #600]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f2:	4993      	ldr	r1, [pc, #588]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004506:	4b8e      	ldr	r3, [pc, #568]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004514:	498a      	ldr	r1, [pc, #552]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004528:	4b85      	ldr	r3, [pc, #532]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004536:	4982      	ldr	r1, [pc, #520]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800454a:	4b7d      	ldr	r3, [pc, #500]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	4979      	ldr	r1, [pc, #484]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800456c:	4b74      	ldr	r3, [pc, #464]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	f023 0203 	bic.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	4971      	ldr	r1, [pc, #452]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800458e:	4b6c      	ldr	r3, [pc, #432]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	f023 020c 	bic.w	r2, r3, #12
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459c:	4968      	ldr	r1, [pc, #416]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045b0:	4b63      	ldr	r3, [pc, #396]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	4960      	ldr	r1, [pc, #384]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045d2:	4b5b      	ldr	r3, [pc, #364]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	4957      	ldr	r1, [pc, #348]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045f4:	4b52      	ldr	r3, [pc, #328]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	494f      	ldr	r1, [pc, #316]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004616:	4b4a      	ldr	r3, [pc, #296]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	4946      	ldr	r1, [pc, #280]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004638:	4b41      	ldr	r3, [pc, #260]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	493e      	ldr	r1, [pc, #248]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800465a:	4b39      	ldr	r3, [pc, #228]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004668:	4935      	ldr	r1, [pc, #212]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800467c:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800468a:	492d      	ldr	r1, [pc, #180]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d011      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800469e:	4b28      	ldr	r3, [pc, #160]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ac:	4924      	ldr	r1, [pc, #144]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046bc:	d101      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046be:	2301      	movs	r3, #1
 80046c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046ce:	2301      	movs	r3, #1
 80046d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046de:	4b18      	ldr	r3, [pc, #96]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ec:	4914      	ldr	r1, [pc, #80]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00b      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004700:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004710:	490b      	ldr	r1, [pc, #44]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00f      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004734:	4902      	ldr	r1, [pc, #8]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800473c:	e002      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004750:	4b8a      	ldr	r3, [pc, #552]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004756:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	4986      	ldr	r1, [pc, #536]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004774:	4b81      	ldr	r3, [pc, #516]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800477a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004784:	497d      	ldr	r1, [pc, #500]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d006      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80d6 	beq.w	800494c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047a0:	4b76      	ldr	r3, [pc, #472]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a75      	ldr	r2, [pc, #468]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ac:	f7fc fe72 	bl	8001494 <HAL_GetTick>
 80047b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047b4:	f7fc fe6e 	bl	8001494 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e195      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c6:	4b6d      	ldr	r3, [pc, #436]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d021      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11d      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047e6:	4b65      	ldr	r3, [pc, #404]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fa:	0e1b      	lsrs	r3, r3, #24
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	019a      	lsls	r2, r3, #6
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	071b      	lsls	r3, r3, #28
 800481a:	4958      	ldr	r1, [pc, #352]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d004      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004840:	2b00      	cmp	r3, #0
 8004842:	d02e      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484c:	d129      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800485c:	4b47      	ldr	r3, [pc, #284]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800485e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004862:	0f1b      	lsrs	r3, r3, #28
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	019a      	lsls	r2, r3, #6
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	061b      	lsls	r3, r3, #24
 800487c:	431a      	orrs	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	071b      	lsls	r3, r3, #28
 8004882:	493e      	ldr	r1, [pc, #248]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800488a:	4b3c      	ldr	r3, [pc, #240]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800488c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004890:	f023 021f 	bic.w	r2, r3, #31
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	3b01      	subs	r3, #1
 800489a:	4938      	ldr	r1, [pc, #224]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01d      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048ae:	4b33      	ldr	r3, [pc, #204]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b4:	0e1b      	lsrs	r3, r3, #24
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048bc:	4b2f      	ldr	r3, [pc, #188]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c2:	0f1b      	lsrs	r3, r3, #28
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	019a      	lsls	r2, r3, #6
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	431a      	orrs	r2, r3
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	061b      	lsls	r3, r3, #24
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	071b      	lsls	r3, r3, #28
 80048e2:	4926      	ldr	r1, [pc, #152]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d011      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	019a      	lsls	r2, r3, #6
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	061b      	lsls	r3, r3, #24
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	071b      	lsls	r3, r3, #28
 8004912:	491a      	ldr	r1, [pc, #104]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004920:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004926:	f7fc fdb5 	bl	8001494 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800492e:	f7fc fdb1 	bl	8001494 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b64      	cmp	r3, #100	; 0x64
 800493a:	d901      	bls.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0d8      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b01      	cmp	r3, #1
 8004950:	f040 80ce 	bne.w	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a08      	ldr	r2, [pc, #32]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800495a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004960:	f7fc fd98 	bl	8001494 <HAL_GetTick>
 8004964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004966:	e00b      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004968:	f7fc fd94 	bl	8001494 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d904      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e0bb      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004980:	4b5e      	ldr	r3, [pc, #376]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800498c:	d0ec      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d02e      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d12a      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049b6:	4b51      	ldr	r3, [pc, #324]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049c4:	4b4d      	ldr	r3, [pc, #308]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	0f1b      	lsrs	r3, r3, #28
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	019a      	lsls	r2, r3, #6
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	061b      	lsls	r3, r3, #24
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	071b      	lsls	r3, r3, #28
 80049ea:	4944      	ldr	r1, [pc, #272]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049f2:	4b42      	ldr	r3, [pc, #264]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	493d      	ldr	r1, [pc, #244]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d022      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a20:	d11d      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a22:	4b36      	ldr	r3, [pc, #216]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a28:	0e1b      	lsrs	r3, r3, #24
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a30:	4b32      	ldr	r3, [pc, #200]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a36:	0f1b      	lsrs	r3, r3, #28
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	019a      	lsls	r2, r3, #6
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	061b      	lsls	r3, r3, #24
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	071b      	lsls	r3, r3, #28
 8004a56:	4929      	ldr	r1, [pc, #164]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d028      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	0e1b      	lsrs	r3, r3, #24
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	0c1b      	lsrs	r3, r3, #16
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	019a      	lsls	r2, r3, #6
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	431a      	orrs	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	071b      	lsls	r3, r3, #28
 8004a9e:	4917      	ldr	r1, [pc, #92]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	4911      	ldr	r1, [pc, #68]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac8:	f7fc fce4 	bl	8001494 <HAL_GetTick>
 8004acc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ad0:	f7fc fce0 	bl	8001494 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e007      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aee:	d1ef      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800

08004b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e040      	b.n	8004b94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fc fb4a 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fc06 	bl	8005350 <UART_SetConfig>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e022      	b.n	8004b94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fe5e 	bl	8005818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fee5 	bl	800595c <UART_CheckIdleState>
 8004b92:	4603      	mov	r3, r0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	; 0x28
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d171      	bne.n	8004c98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_UART_Transmit+0x24>
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e06a      	b.n	8004c9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2221      	movs	r2, #33	; 0x21
 8004bd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bd2:	f7fc fc5f 	bl	8001494 <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf0:	d108      	bne.n	8004c04 <HAL_UART_Transmit+0x68>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	e003      	b.n	8004c0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c0c:	e02c      	b.n	8004c68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2180      	movs	r1, #128	; 0x80
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 feec 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e038      	b.n	8004c9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	3302      	adds	r3, #2
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	e007      	b.n	8004c56 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3301      	adds	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1cc      	bne.n	8004c0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2140      	movs	r1, #64	; 0x40
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 feb9 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e005      	b.n	8004c9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e000      	b.n	8004c9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
  }
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b08a      	sub	sp, #40	; 0x28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d132      	bne.n	8004d20 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_UART_Receive_IT+0x24>
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e02b      	b.n	8004d22 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d018      	beq.n	8004d10 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	613b      	str	r3, [r7, #16]
   return(result);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	69f9      	ldr	r1, [r7, #28]
 8004d02:	6a3a      	ldr	r2, [r7, #32]
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e6      	bne.n	8004cde <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	461a      	mov	r2, r3
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 ff34 	bl	8005b84 <UART_Start_Receive_IT>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	e000      	b.n	8004d22 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
  }
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3728      	adds	r7, #40	; 0x28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b0ba      	sub	sp, #232	; 0xe8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d56:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d115      	bne.n	8004d94 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00f      	beq.n	8004d94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d009      	beq.n	8004d94 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 82ac 	beq.w	80052e2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
      }
      return;
 8004d92:	e2a6      	b.n	80052e2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8117 	beq.w	8004fcc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004daa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004dae:	4b85      	ldr	r3, [pc, #532]	; (8004fc4 <HAL_UART_IRQHandler+0x298>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 810a 	beq.w	8004fcc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d011      	beq.n	8004de8 <HAL_UART_IRQHandler+0xbc>
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d011      	beq.n	8004e18 <HAL_UART_IRQHandler+0xec>
 8004df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00b      	beq.n	8004e18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2202      	movs	r2, #2
 8004e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d011      	beq.n	8004e48 <HAL_UART_IRQHandler+0x11c>
 8004e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00b      	beq.n	8004e48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2204      	movs	r2, #4
 8004e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3e:	f043 0202 	orr.w	r2, r3, #2
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d017      	beq.n	8004e84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2208      	movs	r2, #8
 8004e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7a:	f043 0208 	orr.w	r2, r3, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d012      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x18a>
 8004e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00c      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ea4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8212 	beq.w	80052e6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00d      	beq.n	8004eea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b40      	cmp	r3, #64	; 0x40
 8004f00:	d005      	beq.n	8004f0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d04f      	beq.n	8004fae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fefe 	bl	8005d10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d141      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3308      	adds	r3, #8
 8004f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3308      	adds	r3, #8
 8004f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1d9      	bne.n	8004f22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d013      	beq.n	8004f9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7a:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <HAL_UART_IRQHandler+0x29c>)
 8004f7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fc fc37 	bl	80017f6 <HAL_DMA_Abort_IT>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d017      	beq.n	8004fbe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9c:	e00f      	b.n	8004fbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9b6 	bl	8005310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	e00b      	b.n	8004fbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f9b2 	bl	8005310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	e007      	b.n	8004fbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f9ae 	bl	8005310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004fbc:	e193      	b.n	80052e6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbe:	bf00      	nop
    return;
 8004fc0:	e191      	b.n	80052e6 <HAL_UART_IRQHandler+0x5ba>
 8004fc2:	bf00      	nop
 8004fc4:	04000120 	.word	0x04000120
 8004fc8:	08005dd9 	.word	0x08005dd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	f040 814c 	bne.w	800526e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8145 	beq.w	800526e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe8:	f003 0310 	and.w	r3, r3, #16
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 813e 	beq.w	800526e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	f040 80b6 	bne.w	8005176 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005016:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8165 	beq.w	80052ea <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800502a:	429a      	cmp	r2, r3
 800502c:	f080 815d 	bcs.w	80052ea <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005036:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005044:	f000 8086 	beq.w	8005154 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800505c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005076:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800507e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800508a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1da      	bne.n	8005048 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3308      	adds	r3, #8
 8005098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3308      	adds	r3, #8
 80050b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e1      	bne.n	8005092 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e3      	bne.n	80050ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005124:	f023 0310 	bic.w	r3, r3, #16
 8005128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005136:	65bb      	str	r3, [r7, #88]	; 0x58
 8005138:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800513c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e4      	bne.n	8005114 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514e:	4618      	mov	r0, r3
 8005150:	f7fc fae1 	bl	8001716 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005166:	b29b      	uxth	r3, r3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	b29b      	uxth	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f8d8 	bl	8005324 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005174:	e0b9      	b.n	80052ea <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005182:	b29b      	uxth	r3, r3
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80ab 	beq.w	80052ee <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80a6 	beq.w	80052ee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051c4:	647b      	str	r3, [r7, #68]	; 0x44
 80051c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e4      	bne.n	80051a2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3308      	adds	r3, #8
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	623b      	str	r3, [r7, #32]
   return(result);
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	f023 0301 	bic.w	r3, r3, #1
 80051ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3308      	adds	r3, #8
 80051f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051fc:	633a      	str	r2, [r7, #48]	; 0x30
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e3      	bne.n	80051d8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	60fb      	str	r3, [r7, #12]
   return(result);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f023 0310 	bic.w	r3, r3, #16
 8005238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	69b9      	ldr	r1, [r7, #24]
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	617b      	str	r3, [r7, #20]
   return(result);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e4      	bne.n	8005224 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f85c 	bl	8005324 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800526c:	e03f      	b.n	80052ee <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00e      	beq.n	8005298 <HAL_UART_IRQHandler+0x56c>
 800527a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800528e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f853 	bl	800533c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005296:	e02d      	b.n	80052f4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80052a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01c      	beq.n	80052f2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	4798      	blx	r3
    }
    return;
 80052c0:	e017      	b.n	80052f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d012      	beq.n	80052f4 <HAL_UART_IRQHandler+0x5c8>
 80052ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fd92 	bl	8005e04 <UART_EndTransmit_IT>
    return;
 80052e0:	e008      	b.n	80052f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80052e2:	bf00      	nop
 80052e4:	e006      	b.n	80052f4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80052e6:	bf00      	nop
 80052e8:	e004      	b.n	80052f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80052ea:	bf00      	nop
 80052ec:	e002      	b.n	80052f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80052f2:	bf00      	nop
  }

}
 80052f4:	37e8      	adds	r7, #232	; 0xe8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop

080052fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4ba6      	ldr	r3, [pc, #664]	; (8005614 <UART_SetConfig+0x2c4>)
 800537c:	4013      	ands	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	6979      	ldr	r1, [r7, #20]
 8005384:	430b      	orrs	r3, r1
 8005386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	430a      	orrs	r2, r1
 80053c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a94      	ldr	r2, [pc, #592]	; (8005618 <UART_SetConfig+0x2c8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d120      	bne.n	800540e <UART_SetConfig+0xbe>
 80053cc:	4b93      	ldr	r3, [pc, #588]	; (800561c <UART_SetConfig+0x2cc>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d816      	bhi.n	8005408 <UART_SetConfig+0xb8>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0x90>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	080053f7 	.word	0x080053f7
 80053ec:	08005403 	.word	0x08005403
 80053f0:	2301      	movs	r3, #1
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e150      	b.n	8005698 <UART_SetConfig+0x348>
 80053f6:	2302      	movs	r3, #2
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e14d      	b.n	8005698 <UART_SetConfig+0x348>
 80053fc:	2304      	movs	r3, #4
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e14a      	b.n	8005698 <UART_SetConfig+0x348>
 8005402:	2308      	movs	r3, #8
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e147      	b.n	8005698 <UART_SetConfig+0x348>
 8005408:	2310      	movs	r3, #16
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e144      	b.n	8005698 <UART_SetConfig+0x348>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a83      	ldr	r2, [pc, #524]	; (8005620 <UART_SetConfig+0x2d0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d132      	bne.n	800547e <UART_SetConfig+0x12e>
 8005418:	4b80      	ldr	r3, [pc, #512]	; (800561c <UART_SetConfig+0x2cc>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b0c      	cmp	r3, #12
 8005424:	d828      	bhi.n	8005478 <UART_SetConfig+0x128>
 8005426:	a201      	add	r2, pc, #4	; (adr r2, 800542c <UART_SetConfig+0xdc>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005461 	.word	0x08005461
 8005430:	08005479 	.word	0x08005479
 8005434:	08005479 	.word	0x08005479
 8005438:	08005479 	.word	0x08005479
 800543c:	0800546d 	.word	0x0800546d
 8005440:	08005479 	.word	0x08005479
 8005444:	08005479 	.word	0x08005479
 8005448:	08005479 	.word	0x08005479
 800544c:	08005467 	.word	0x08005467
 8005450:	08005479 	.word	0x08005479
 8005454:	08005479 	.word	0x08005479
 8005458:	08005479 	.word	0x08005479
 800545c:	08005473 	.word	0x08005473
 8005460:	2300      	movs	r3, #0
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e118      	b.n	8005698 <UART_SetConfig+0x348>
 8005466:	2302      	movs	r3, #2
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e115      	b.n	8005698 <UART_SetConfig+0x348>
 800546c:	2304      	movs	r3, #4
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e112      	b.n	8005698 <UART_SetConfig+0x348>
 8005472:	2308      	movs	r3, #8
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e10f      	b.n	8005698 <UART_SetConfig+0x348>
 8005478:	2310      	movs	r3, #16
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e10c      	b.n	8005698 <UART_SetConfig+0x348>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a68      	ldr	r2, [pc, #416]	; (8005624 <UART_SetConfig+0x2d4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d120      	bne.n	80054ca <UART_SetConfig+0x17a>
 8005488:	4b64      	ldr	r3, [pc, #400]	; (800561c <UART_SetConfig+0x2cc>)
 800548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005492:	2b30      	cmp	r3, #48	; 0x30
 8005494:	d013      	beq.n	80054be <UART_SetConfig+0x16e>
 8005496:	2b30      	cmp	r3, #48	; 0x30
 8005498:	d814      	bhi.n	80054c4 <UART_SetConfig+0x174>
 800549a:	2b20      	cmp	r3, #32
 800549c:	d009      	beq.n	80054b2 <UART_SetConfig+0x162>
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d810      	bhi.n	80054c4 <UART_SetConfig+0x174>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <UART_SetConfig+0x15c>
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d006      	beq.n	80054b8 <UART_SetConfig+0x168>
 80054aa:	e00b      	b.n	80054c4 <UART_SetConfig+0x174>
 80054ac:	2300      	movs	r3, #0
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e0f2      	b.n	8005698 <UART_SetConfig+0x348>
 80054b2:	2302      	movs	r3, #2
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e0ef      	b.n	8005698 <UART_SetConfig+0x348>
 80054b8:	2304      	movs	r3, #4
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e0ec      	b.n	8005698 <UART_SetConfig+0x348>
 80054be:	2308      	movs	r3, #8
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e0e9      	b.n	8005698 <UART_SetConfig+0x348>
 80054c4:	2310      	movs	r3, #16
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e0e6      	b.n	8005698 <UART_SetConfig+0x348>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a56      	ldr	r2, [pc, #344]	; (8005628 <UART_SetConfig+0x2d8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d120      	bne.n	8005516 <UART_SetConfig+0x1c6>
 80054d4:	4b51      	ldr	r3, [pc, #324]	; (800561c <UART_SetConfig+0x2cc>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054de:	2bc0      	cmp	r3, #192	; 0xc0
 80054e0:	d013      	beq.n	800550a <UART_SetConfig+0x1ba>
 80054e2:	2bc0      	cmp	r3, #192	; 0xc0
 80054e4:	d814      	bhi.n	8005510 <UART_SetConfig+0x1c0>
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d009      	beq.n	80054fe <UART_SetConfig+0x1ae>
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d810      	bhi.n	8005510 <UART_SetConfig+0x1c0>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <UART_SetConfig+0x1a8>
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d006      	beq.n	8005504 <UART_SetConfig+0x1b4>
 80054f6:	e00b      	b.n	8005510 <UART_SetConfig+0x1c0>
 80054f8:	2300      	movs	r3, #0
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e0cc      	b.n	8005698 <UART_SetConfig+0x348>
 80054fe:	2302      	movs	r3, #2
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e0c9      	b.n	8005698 <UART_SetConfig+0x348>
 8005504:	2304      	movs	r3, #4
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e0c6      	b.n	8005698 <UART_SetConfig+0x348>
 800550a:	2308      	movs	r3, #8
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e0c3      	b.n	8005698 <UART_SetConfig+0x348>
 8005510:	2310      	movs	r3, #16
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e0c0      	b.n	8005698 <UART_SetConfig+0x348>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a44      	ldr	r2, [pc, #272]	; (800562c <UART_SetConfig+0x2dc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d125      	bne.n	800556c <UART_SetConfig+0x21c>
 8005520:	4b3e      	ldr	r3, [pc, #248]	; (800561c <UART_SetConfig+0x2cc>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800552e:	d017      	beq.n	8005560 <UART_SetConfig+0x210>
 8005530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005534:	d817      	bhi.n	8005566 <UART_SetConfig+0x216>
 8005536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553a:	d00b      	beq.n	8005554 <UART_SetConfig+0x204>
 800553c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005540:	d811      	bhi.n	8005566 <UART_SetConfig+0x216>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <UART_SetConfig+0x1fe>
 8005546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554a:	d006      	beq.n	800555a <UART_SetConfig+0x20a>
 800554c:	e00b      	b.n	8005566 <UART_SetConfig+0x216>
 800554e:	2300      	movs	r3, #0
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e0a1      	b.n	8005698 <UART_SetConfig+0x348>
 8005554:	2302      	movs	r3, #2
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e09e      	b.n	8005698 <UART_SetConfig+0x348>
 800555a:	2304      	movs	r3, #4
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e09b      	b.n	8005698 <UART_SetConfig+0x348>
 8005560:	2308      	movs	r3, #8
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e098      	b.n	8005698 <UART_SetConfig+0x348>
 8005566:	2310      	movs	r3, #16
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e095      	b.n	8005698 <UART_SetConfig+0x348>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2f      	ldr	r2, [pc, #188]	; (8005630 <UART_SetConfig+0x2e0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d125      	bne.n	80055c2 <UART_SetConfig+0x272>
 8005576:	4b29      	ldr	r3, [pc, #164]	; (800561c <UART_SetConfig+0x2cc>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005584:	d017      	beq.n	80055b6 <UART_SetConfig+0x266>
 8005586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800558a:	d817      	bhi.n	80055bc <UART_SetConfig+0x26c>
 800558c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005590:	d00b      	beq.n	80055aa <UART_SetConfig+0x25a>
 8005592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005596:	d811      	bhi.n	80055bc <UART_SetConfig+0x26c>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <UART_SetConfig+0x254>
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a0:	d006      	beq.n	80055b0 <UART_SetConfig+0x260>
 80055a2:	e00b      	b.n	80055bc <UART_SetConfig+0x26c>
 80055a4:	2301      	movs	r3, #1
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e076      	b.n	8005698 <UART_SetConfig+0x348>
 80055aa:	2302      	movs	r3, #2
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e073      	b.n	8005698 <UART_SetConfig+0x348>
 80055b0:	2304      	movs	r3, #4
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e070      	b.n	8005698 <UART_SetConfig+0x348>
 80055b6:	2308      	movs	r3, #8
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e06d      	b.n	8005698 <UART_SetConfig+0x348>
 80055bc:	2310      	movs	r3, #16
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e06a      	b.n	8005698 <UART_SetConfig+0x348>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1b      	ldr	r2, [pc, #108]	; (8005634 <UART_SetConfig+0x2e4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d138      	bne.n	800563e <UART_SetConfig+0x2ee>
 80055cc:	4b13      	ldr	r3, [pc, #76]	; (800561c <UART_SetConfig+0x2cc>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055da:	d017      	beq.n	800560c <UART_SetConfig+0x2bc>
 80055dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055e0:	d82a      	bhi.n	8005638 <UART_SetConfig+0x2e8>
 80055e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e6:	d00b      	beq.n	8005600 <UART_SetConfig+0x2b0>
 80055e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ec:	d824      	bhi.n	8005638 <UART_SetConfig+0x2e8>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <UART_SetConfig+0x2aa>
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	d006      	beq.n	8005606 <UART_SetConfig+0x2b6>
 80055f8:	e01e      	b.n	8005638 <UART_SetConfig+0x2e8>
 80055fa:	2300      	movs	r3, #0
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e04b      	b.n	8005698 <UART_SetConfig+0x348>
 8005600:	2302      	movs	r3, #2
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e048      	b.n	8005698 <UART_SetConfig+0x348>
 8005606:	2304      	movs	r3, #4
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e045      	b.n	8005698 <UART_SetConfig+0x348>
 800560c:	2308      	movs	r3, #8
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e042      	b.n	8005698 <UART_SetConfig+0x348>
 8005612:	bf00      	nop
 8005614:	efff69f3 	.word	0xefff69f3
 8005618:	40011000 	.word	0x40011000
 800561c:	40023800 	.word	0x40023800
 8005620:	40004400 	.word	0x40004400
 8005624:	40004800 	.word	0x40004800
 8005628:	40004c00 	.word	0x40004c00
 800562c:	40005000 	.word	0x40005000
 8005630:	40011400 	.word	0x40011400
 8005634:	40007800 	.word	0x40007800
 8005638:	2310      	movs	r3, #16
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e02c      	b.n	8005698 <UART_SetConfig+0x348>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a72      	ldr	r2, [pc, #456]	; (800580c <UART_SetConfig+0x4bc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d125      	bne.n	8005694 <UART_SetConfig+0x344>
 8005648:	4b71      	ldr	r3, [pc, #452]	; (8005810 <UART_SetConfig+0x4c0>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005652:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005656:	d017      	beq.n	8005688 <UART_SetConfig+0x338>
 8005658:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800565c:	d817      	bhi.n	800568e <UART_SetConfig+0x33e>
 800565e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005662:	d00b      	beq.n	800567c <UART_SetConfig+0x32c>
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005668:	d811      	bhi.n	800568e <UART_SetConfig+0x33e>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <UART_SetConfig+0x326>
 800566e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005672:	d006      	beq.n	8005682 <UART_SetConfig+0x332>
 8005674:	e00b      	b.n	800568e <UART_SetConfig+0x33e>
 8005676:	2300      	movs	r3, #0
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e00d      	b.n	8005698 <UART_SetConfig+0x348>
 800567c:	2302      	movs	r3, #2
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e00a      	b.n	8005698 <UART_SetConfig+0x348>
 8005682:	2304      	movs	r3, #4
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e007      	b.n	8005698 <UART_SetConfig+0x348>
 8005688:	2308      	movs	r3, #8
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e004      	b.n	8005698 <UART_SetConfig+0x348>
 800568e:	2310      	movs	r3, #16
 8005690:	77fb      	strb	r3, [r7, #31]
 8005692:	e001      	b.n	8005698 <UART_SetConfig+0x348>
 8005694:	2310      	movs	r3, #16
 8005696:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	d15b      	bne.n	800575a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80056a2:	7ffb      	ldrb	r3, [r7, #31]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d828      	bhi.n	80056fa <UART_SetConfig+0x3aa>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x360>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056fb 	.word	0x080056fb
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	080056fb 	.word	0x080056fb
 80056d0:	080056f3 	.word	0x080056f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7fe fdc4 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 80056d8:	61b8      	str	r0, [r7, #24]
        break;
 80056da:	e013      	b.n	8005704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056dc:	f7fe fdd4 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 80056e0:	61b8      	str	r0, [r7, #24]
        break;
 80056e2:	e00f      	b.n	8005704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b4b      	ldr	r3, [pc, #300]	; (8005814 <UART_SetConfig+0x4c4>)
 80056e6:	61bb      	str	r3, [r7, #24]
        break;
 80056e8:	e00c      	b.n	8005704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7fe fca7 	bl	800403c <HAL_RCC_GetSysClockFreq>
 80056ee:	61b8      	str	r0, [r7, #24]
        break;
 80056f0:	e008      	b.n	8005704 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f6:	61bb      	str	r3, [r7, #24]
        break;
 80056f8:	e004      	b.n	8005704 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77bb      	strb	r3, [r7, #30]
        break;
 8005702:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d074      	beq.n	80057f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	005a      	lsls	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b0f      	cmp	r3, #15
 8005724:	d916      	bls.n	8005754 <UART_SetConfig+0x404>
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572c:	d212      	bcs.n	8005754 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f023 030f 	bic.w	r3, r3, #15
 8005736:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	b29b      	uxth	r3, r3
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	b29a      	uxth	r2, r3
 8005744:	89fb      	ldrh	r3, [r7, #14]
 8005746:	4313      	orrs	r3, r2
 8005748:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	89fa      	ldrh	r2, [r7, #14]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	e04f      	b.n	80057f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	77bb      	strb	r3, [r7, #30]
 8005758:	e04c      	b.n	80057f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800575a:	7ffb      	ldrb	r3, [r7, #31]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d828      	bhi.n	80057b2 <UART_SetConfig+0x462>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x418>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	080057b3 	.word	0x080057b3
 8005778:	080057a3 	.word	0x080057a3
 800577c:	080057b3 	.word	0x080057b3
 8005780:	080057b3 	.word	0x080057b3
 8005784:	080057b3 	.word	0x080057b3
 8005788:	080057ab 	.word	0x080057ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fe fd68 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8005790:	61b8      	str	r0, [r7, #24]
        break;
 8005792:	e013      	b.n	80057bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7fe fd78 	bl	8004288 <HAL_RCC_GetPCLK2Freq>
 8005798:	61b8      	str	r0, [r7, #24]
        break;
 800579a:	e00f      	b.n	80057bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800579c:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <UART_SetConfig+0x4c4>)
 800579e:	61bb      	str	r3, [r7, #24]
        break;
 80057a0:	e00c      	b.n	80057bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a2:	f7fe fc4b 	bl	800403c <HAL_RCC_GetSysClockFreq>
 80057a6:	61b8      	str	r0, [r7, #24]
        break;
 80057a8:	e008      	b.n	80057bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ae:	61bb      	str	r3, [r7, #24]
        break;
 80057b0:	e004      	b.n	80057bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	77bb      	strb	r3, [r7, #30]
        break;
 80057ba:	bf00      	nop
    }

    if (pclk != 0U)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d018      	beq.n	80057f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	085a      	lsrs	r2, r3, #1
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	441a      	add	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b0f      	cmp	r3, #15
 80057da:	d909      	bls.n	80057f0 <UART_SetConfig+0x4a0>
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e2:	d205      	bcs.n	80057f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	e001      	b.n	80057f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005800:	7fbb      	ldrb	r3, [r7, #30]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40007c00 	.word	0x40007c00
 8005810:	40023800 	.word	0x40023800
 8005814:	00f42400 	.word	0x00f42400

08005818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01a      	beq.n	800592e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005916:	d10a      	bne.n	800592e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  }
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af02      	add	r7, sp, #8
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800596c:	f7fb fd92 	bl	8001494 <HAL_GetTick>
 8005970:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b08      	cmp	r3, #8
 800597e:	d10e      	bne.n	800599e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f831 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e027      	b.n	80059ee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d10e      	bne.n	80059ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f81b 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e011      	b.n	80059ee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b09c      	sub	sp, #112	; 0x70
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	603b      	str	r3, [r7, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a06:	e0a7      	b.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	f000 80a3 	beq.w	8005b58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a12:	f7fb fd3f 	bl	8001494 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d13f      	bne.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a3c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e6      	bne.n	8005a28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3308      	adds	r3, #8
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	663b      	str	r3, [r7, #96]	; 0x60
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e5      	bne.n	8005a5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e068      	b.n	8005b7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d050      	beq.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac4:	d148      	bne.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ace:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
 8005af0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e6      	bne.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	613b      	str	r3, [r7, #16]
   return(result);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b22:	623a      	str	r2, [r7, #32]
 8005b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	69f9      	ldr	r1, [r7, #28]
 8005b28:	6a3a      	ldr	r2, [r7, #32]
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e5      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e010      	b.n	8005b7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69da      	ldr	r2, [r3, #28]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4013      	ands	r3, r2
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	f43f af48 	beq.w	8005a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3770      	adds	r7, #112	; 0x70
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b097      	sub	sp, #92	; 0x5c
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb6:	d10e      	bne.n	8005bd6 <UART_Start_Receive_IT+0x52>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d105      	bne.n	8005bcc <UART_Start_Receive_IT+0x48>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005bc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bca:	e02d      	b.n	8005c28 <UART_Start_Receive_IT+0xa4>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	22ff      	movs	r2, #255	; 0xff
 8005bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bd4:	e028      	b.n	8005c28 <UART_Start_Receive_IT+0xa4>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10d      	bne.n	8005bfa <UART_Start_Receive_IT+0x76>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <UART_Start_Receive_IT+0x6c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	22ff      	movs	r2, #255	; 0xff
 8005bea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bee:	e01b      	b.n	8005c28 <UART_Start_Receive_IT+0xa4>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	227f      	movs	r2, #127	; 0x7f
 8005bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bf8:	e016      	b.n	8005c28 <UART_Start_Receive_IT+0xa4>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c02:	d10d      	bne.n	8005c20 <UART_Start_Receive_IT+0x9c>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <UART_Start_Receive_IT+0x92>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	227f      	movs	r2, #127	; 0x7f
 8005c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c14:	e008      	b.n	8005c28 <UART_Start_Receive_IT+0xa4>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	223f      	movs	r2, #63	; 0x3f
 8005c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c1e:	e003      	b.n	8005c28 <UART_Start_Receive_IT+0xa4>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2222      	movs	r2, #34	; 0x22
 8005c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c58:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e5      	bne.n	8005c38 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c74:	d107      	bne.n	8005c86 <UART_Start_Receive_IT+0x102>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d103      	bne.n	8005c86 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a21      	ldr	r2, [pc, #132]	; (8005d08 <UART_Start_Receive_IT+0x184>)
 8005c82:	669a      	str	r2, [r3, #104]	; 0x68
 8005c84:	e002      	b.n	8005c8c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <UART_Start_Receive_IT+0x188>)
 8005c8a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d019      	beq.n	8005cc8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e6      	bne.n	8005c94 <UART_Start_Receive_IT+0x110>
 8005cc6:	e018      	b.n	8005cfa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f043 0320 	orr.w	r3, r3, #32
 8005cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce6:	623b      	str	r3, [r7, #32]
 8005ce8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	69f9      	ldr	r1, [r7, #28]
 8005cec:	6a3a      	ldr	r2, [r7, #32]
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e6      	bne.n	8005cc8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	375c      	adds	r7, #92	; 0x5c
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	08005fbf 	.word	0x08005fbf
 8005d0c:	08005e59 	.word	0x08005e59

08005d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b095      	sub	sp, #84	; 0x54
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d36:	643b      	str	r3, [r7, #64]	; 0x40
 8005d38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e6      	bne.n	8005d18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e5      	bne.n	8005d4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d118      	bne.n	8005db8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f023 0310 	bic.w	r3, r3, #16
 8005d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6979      	ldr	r1, [r7, #20]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	613b      	str	r3, [r7, #16]
   return(result);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e6      	bne.n	8005d86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005dcc:	bf00      	nop
 8005dce:	3754      	adds	r7, #84	; 0x54
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff fa8a 	bl	8005310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	6979      	ldr	r1, [r7, #20]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	613b      	str	r3, [r7, #16]
   return(result);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e6      	bne.n	8005e0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fa56 	bl	80052fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e50:	bf00      	nop
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b096      	sub	sp, #88	; 0x58
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e70:	2b22      	cmp	r3, #34	; 0x22
 8005e72:	f040 8098 	bne.w	8005fa6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e80:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005e84:	b2d9      	uxtb	r1, r3
 8005e86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	400a      	ands	r2, r1
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d17b      	bne.n	8005fb6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ece:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005edc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ede:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e6      	bne.n	8005ebe <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	623b      	str	r3, [r7, #32]
   return(result);
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f10:	633a      	str	r2, [r7, #48]	; 0x30
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e5      	bne.n	8005ef0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d12e      	bne.n	8005f9e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0310 	bic.w	r3, r3, #16
 8005f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	69b9      	ldr	r1, [r7, #24]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	617b      	str	r3, [r7, #20]
   return(result);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e6      	bne.n	8005f46 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d103      	bne.n	8005f8e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff f9c4 	bl	8005324 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f9c:	e00b      	b.n	8005fb6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fa fba4 	bl	80006ec <HAL_UART_RxCpltCallback>
}
 8005fa4:	e007      	b.n	8005fb6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0208 	orr.w	r2, r2, #8
 8005fb4:	619a      	str	r2, [r3, #24]
}
 8005fb6:	bf00      	nop
 8005fb8:	3758      	adds	r7, #88	; 0x58
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b096      	sub	sp, #88	; 0x58
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fd6:	2b22      	cmp	r3, #34	; 0x22
 8005fd8:	f040 8098 	bne.w	800610c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005fec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005ff0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	1c9a      	adds	r2, r3, #2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d17b      	bne.n	800611c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006042:	643b      	str	r3, [r7, #64]	; 0x40
 8006044:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e6      	bne.n	8006024 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	61fb      	str	r3, [r7, #28]
   return(result);
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	64bb      	str	r3, [r7, #72]	; 0x48
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3308      	adds	r3, #8
 8006074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800607c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e5      	bne.n	8006056 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d12e      	bne.n	8006104 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f023 0310 	bic.w	r3, r3, #16
 80060c0:	647b      	str	r3, [r7, #68]	; 0x44
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6979      	ldr	r1, [r7, #20]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	613b      	str	r3, [r7, #16]
   return(result);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e6      	bne.n	80060ac <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d103      	bne.n	80060f4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2210      	movs	r2, #16
 80060f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff f911 	bl	8005324 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006102:	e00b      	b.n	800611c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7fa faf1 	bl	80006ec <HAL_UART_RxCpltCallback>
}
 800610a:	e007      	b.n	800611c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0208 	orr.w	r2, r2, #8
 800611a:	619a      	str	r2, [r3, #24]
}
 800611c:	bf00      	nop
 800611e:	3758      	adds	r7, #88	; 0x58
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006136:	2b84      	cmp	r3, #132	; 0x84
 8006138:	d005      	beq.n	8006146 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800613a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	3303      	adds	r3, #3
 8006144:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006146:	68fb      	ldr	r3, [r7, #12]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006158:	f001 f8b0 	bl	80072bc <vTaskStartScheduler>
  
  return osOK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	bd80      	pop	{r7, pc}

08006162 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006164:	b089      	sub	sp, #36	; 0x24
 8006166:	af04      	add	r7, sp, #16
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d020      	beq.n	80061b6 <osThreadCreate+0x54>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01c      	beq.n	80061b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685c      	ldr	r4, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681d      	ldr	r5, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691e      	ldr	r6, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff ffc8 	bl	8006124 <makeFreeRtosPriority>
 8006194:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800619e:	9202      	str	r2, [sp, #8]
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	9100      	str	r1, [sp, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	4632      	mov	r2, r6
 80061a8:	4629      	mov	r1, r5
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 feb4 	bl	8006f18 <xTaskCreateStatic>
 80061b0:	4603      	mov	r3, r0
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e01c      	b.n	80061f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685c      	ldr	r4, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061c2:	b29e      	uxth	r6, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff ffaa 	bl	8006124 <makeFreeRtosPriority>
 80061d0:	4602      	mov	r2, r0
 80061d2:	f107 030c 	add.w	r3, r7, #12
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	9200      	str	r2, [sp, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	4632      	mov	r2, r6
 80061de:	4629      	mov	r1, r5
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 fefc 	bl	8006fde <xTaskCreate>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d001      	beq.n	80061f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e000      	b.n	80061f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061f0:	68fb      	ldr	r3, [r7, #12]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <osDelay+0x16>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	e000      	b.n	8006212 <osDelay+0x18>
 8006210:	2301      	movs	r3, #1
 8006212:	4618      	mov	r0, r3
 8006214:	f001 f81c 	bl	8007250 <vTaskDelay>
  
  return osOK;
 8006218:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f103 0208 	add.w	r2, r3, #8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f04f 32ff 	mov.w	r2, #4294967295
 800623a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f103 0208 	add.w	r2, r3, #8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f103 0208 	add.w	r2, r3, #8
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	601a      	str	r2, [r3, #0]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d103      	bne.n	80062e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	e00c      	b.n	80062fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3308      	adds	r3, #8
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e002      	b.n	80062f2 <vListInsert+0x2e>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d2f6      	bcs.n	80062ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6892      	ldr	r2, [r2, #8]
 800634c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6852      	ldr	r2, [r2, #4]
 8006356:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	429a      	cmp	r2, r3
 8006360:	d103      	bne.n	800636a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	1e5a      	subs	r2, r3, #1
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10c      	bne.n	80063ba <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	b672      	cpsid	i
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	b662      	cpsie	i
 80063b4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80063ba:	f001 fedf 	bl	800817c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	441a      	add	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ea:	3b01      	subs	r3, #1
 80063ec:	68f9      	ldr	r1, [r7, #12]
 80063ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	441a      	add	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	22ff      	movs	r2, #255	; 0xff
 80063fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	22ff      	movs	r2, #255	; 0xff
 8006406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d114      	bne.n	800643a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01a      	beq.n	800644e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3310      	adds	r3, #16
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f99b 	bl	8007758 <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d012      	beq.n	800644e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <xQueueGenericReset+0xd0>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	e009      	b.n	800644e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3310      	adds	r3, #16
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff feef 	bl	8006222 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff feea 	bl	8006222 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800644e:	f001 fec9 	bl	80081e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006452:	2301      	movs	r3, #1
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	e000ed04 	.word	0xe000ed04

08006460 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	; 0x28
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10c      	bne.n	800648e <xQueueGenericCreate+0x2e>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	b672      	cpsid	i
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	b662      	cpsie	i
 8006488:	613b      	str	r3, [r7, #16]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006494:	2300      	movs	r3, #0
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	e004      	b.n	80064a4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	3348      	adds	r3, #72	; 0x48
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 ff93 	bl	80083d4 <pvPortMalloc>
 80064ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d011      	beq.n	80064da <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	3348      	adds	r3, #72	; 0x48
 80064be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064c8:	79fa      	ldrb	r2, [r7, #7]
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	4613      	mov	r3, r2
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f805 	bl	80064e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064da:	69bb      	ldr	r3, [r7, #24]
	}
 80064dc:	4618      	mov	r0, r3
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d103      	bne.n	8006500 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e002      	b.n	8006506 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006512:	2101      	movs	r1, #1
 8006514:	69b8      	ldr	r0, [r7, #24]
 8006516:	f7ff ff39 	bl	800638c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00e      	beq.n	800654e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006542:	2300      	movs	r3, #0
 8006544:	2200      	movs	r2, #0
 8006546:	2100      	movs	r1, #0
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f81d 	bl	8006588 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006556:	b580      	push	{r7, lr}
 8006558:	b086      	sub	sp, #24
 800655a:	af00      	add	r7, sp, #0
 800655c:	4603      	mov	r3, r0
 800655e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	2300      	movs	r3, #0
 8006566:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	461a      	mov	r2, r3
 800656c:	6939      	ldr	r1, [r7, #16]
 800656e:	6978      	ldr	r0, [r7, #20]
 8006570:	f7ff ff76 	bl	8006460 <xQueueGenericCreate>
 8006574:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff ffd3 	bl	8006522 <prvInitialiseMutex>

		return xNewQueue;
 800657c:	68fb      	ldr	r3, [r7, #12]
	}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08e      	sub	sp, #56	; 0x38
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006596:	2300      	movs	r3, #0
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10c      	bne.n	80065be <xQueueGenericSend+0x36>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	b672      	cpsid	i
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	b662      	cpsie	i
 80065b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065ba:	bf00      	nop
 80065bc:	e7fe      	b.n	80065bc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d103      	bne.n	80065cc <xQueueGenericSend+0x44>
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <xQueueGenericSend+0x48>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <xQueueGenericSend+0x4a>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10c      	bne.n	80065f0 <xQueueGenericSend+0x68>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	b672      	cpsid	i
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	b662      	cpsie	i
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d103      	bne.n	80065fe <xQueueGenericSend+0x76>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <xQueueGenericSend+0x7a>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <xQueueGenericSend+0x7c>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10c      	bne.n	8006622 <xQueueGenericSend+0x9a>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	b672      	cpsid	i
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	b662      	cpsie	i
 800661c:	623b      	str	r3, [r7, #32]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006622:	f001 fa5d 	bl	8007ae0 <xTaskGetSchedulerState>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <xQueueGenericSend+0xaa>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <xQueueGenericSend+0xae>
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <xQueueGenericSend+0xb0>
 8006636:	2300      	movs	r3, #0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10c      	bne.n	8006656 <xQueueGenericSend+0xce>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	b672      	cpsid	i
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	b662      	cpsie	i
 8006650:	61fb      	str	r3, [r7, #28]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006656:	f001 fd91 	bl	800817c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006662:	429a      	cmp	r2, r3
 8006664:	d302      	bcc.n	800666c <xQueueGenericSend+0xe4>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d129      	bne.n	80066c0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006672:	f000 fb41 	bl	8006cf8 <prvCopyDataToQueue>
 8006676:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d010      	beq.n	80066a2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	3324      	adds	r3, #36	; 0x24
 8006684:	4618      	mov	r0, r3
 8006686:	f001 f867 	bl	8007758 <xTaskRemoveFromEventList>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d013      	beq.n	80066b8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006690:	4b3f      	ldr	r3, [pc, #252]	; (8006790 <xQueueGenericSend+0x208>)
 8006692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	e00a      	b.n	80066b8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80066a8:	4b39      	ldr	r3, [pc, #228]	; (8006790 <xQueueGenericSend+0x208>)
 80066aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066b8:	f001 fd94 	bl	80081e4 <vPortExitCritical>
				return pdPASS;
 80066bc:	2301      	movs	r3, #1
 80066be:	e063      	b.n	8006788 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066c6:	f001 fd8d 	bl	80081e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e05c      	b.n	8006788 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	4618      	mov	r0, r3
 80066da:	f001 f8a1 	bl	8007820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066de:	2301      	movs	r3, #1
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066e2:	f001 fd7f 	bl	80081e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066e6:	f000 fe4d 	bl	8007384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066ea:	f001 fd47 	bl	800817c <vPortEnterCritical>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066f4:	b25b      	sxtb	r3, r3
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d103      	bne.n	8006704 <xQueueGenericSend+0x17c>
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800670a:	b25b      	sxtb	r3, r3
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d103      	bne.n	800671a <xQueueGenericSend+0x192>
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800671a:	f001 fd63 	bl	80081e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800671e:	1d3a      	adds	r2, r7, #4
 8006720:	f107 0314 	add.w	r3, r7, #20
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f001 f890 	bl	800784c <xTaskCheckForTimeOut>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d124      	bne.n	800677c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006734:	f000 fbd8 	bl	8006ee8 <prvIsQueueFull>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d018      	beq.n	8006770 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	3310      	adds	r3, #16
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f000 ffe0 	bl	800770c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800674c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800674e:	f000 fb63 	bl	8006e18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006752:	f000 fe25 	bl	80073a0 <xTaskResumeAll>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	f47f af7c 	bne.w	8006656 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800675e:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <xQueueGenericSend+0x208>)
 8006760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	e772      	b.n	8006656 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006772:	f000 fb51 	bl	8006e18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006776:	f000 fe13 	bl	80073a0 <xTaskResumeAll>
 800677a:	e76c      	b.n	8006656 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800677c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800677e:	f000 fb4b 	bl	8006e18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006782:	f000 fe0d 	bl	80073a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006788:	4618      	mov	r0, r3
 800678a:	3738      	adds	r7, #56	; 0x38
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	e000ed04 	.word	0xe000ed04

08006794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08e      	sub	sp, #56	; 0x38
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10c      	bne.n	80067c6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	b672      	cpsid	i
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	b662      	cpsie	i
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d103      	bne.n	80067d4 <xQueueGenericSendFromISR+0x40>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <xQueueGenericSendFromISR+0x44>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <xQueueGenericSendFromISR+0x46>
 80067d8:	2300      	movs	r3, #0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10c      	bne.n	80067f8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	b672      	cpsid	i
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	b662      	cpsie	i
 80067f2:	623b      	str	r3, [r7, #32]
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d103      	bne.n	8006806 <xQueueGenericSendFromISR+0x72>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <xQueueGenericSendFromISR+0x76>
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <xQueueGenericSendFromISR+0x78>
 800680a:	2300      	movs	r3, #0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10c      	bne.n	800682a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	b672      	cpsid	i
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	b662      	cpsie	i
 8006824:	61fb      	str	r3, [r7, #28]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800682a:	f001 fd8f 	bl	800834c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800682e:	f3ef 8211 	mrs	r2, BASEPRI
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	b672      	cpsid	i
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	b662      	cpsie	i
 8006846:	61ba      	str	r2, [r7, #24]
 8006848:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800684a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006856:	429a      	cmp	r2, r3
 8006858:	d302      	bcc.n	8006860 <xQueueGenericSendFromISR+0xcc>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b02      	cmp	r3, #2
 800685e:	d12c      	bne.n	80068ba <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006870:	f000 fa42 	bl	8006cf8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006874:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687c:	d112      	bne.n	80068a4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d016      	beq.n	80068b4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	3324      	adds	r3, #36	; 0x24
 800688a:	4618      	mov	r0, r3
 800688c:	f000 ff64 	bl	8007758 <xTaskRemoveFromEventList>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00e      	beq.n	80068b4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e007      	b.n	80068b4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068a8:	3301      	adds	r3, #1
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	b25a      	sxtb	r2, r3
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80068b4:	2301      	movs	r3, #1
 80068b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80068b8:	e001      	b.n	80068be <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3738      	adds	r7, #56	; 0x38
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	; 0x30
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068e0:	2300      	movs	r3, #0
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10c      	bne.n	8006908 <xQueueReceive+0x34>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	b672      	cpsid	i
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	b662      	cpsie	i
 8006902:	623b      	str	r3, [r7, #32]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d103      	bne.n	8006916 <xQueueReceive+0x42>
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <xQueueReceive+0x46>
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <xQueueReceive+0x48>
 800691a:	2300      	movs	r3, #0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10c      	bne.n	800693a <xQueueReceive+0x66>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	b672      	cpsid	i
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	b662      	cpsie	i
 8006934:	61fb      	str	r3, [r7, #28]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800693a:	f001 f8d1 	bl	8007ae0 <xTaskGetSchedulerState>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d102      	bne.n	800694a <xQueueReceive+0x76>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <xQueueReceive+0x7a>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <xQueueReceive+0x7c>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10c      	bne.n	800696e <xQueueReceive+0x9a>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	b672      	cpsid	i
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	b662      	cpsie	i
 8006968:	61bb      	str	r3, [r7, #24]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800696e:	f001 fc05 	bl	800817c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01f      	beq.n	80069be <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006982:	f000 fa23 	bl	8006dcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	1e5a      	subs	r2, r3, #1
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00f      	beq.n	80069b6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	3310      	adds	r3, #16
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fedc 	bl	8007758 <xTaskRemoveFromEventList>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069a6:	4b3d      	ldr	r3, [pc, #244]	; (8006a9c <xQueueReceive+0x1c8>)
 80069a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069b6:	f001 fc15 	bl	80081e4 <vPortExitCritical>
				return pdPASS;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e069      	b.n	8006a92 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069c4:	f001 fc0e 	bl	80081e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e062      	b.n	8006a92 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069d2:	f107 0310 	add.w	r3, r7, #16
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 ff22 	bl	8007820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069dc:	2301      	movs	r3, #1
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069e0:	f001 fc00 	bl	80081e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069e4:	f000 fcce 	bl	8007384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069e8:	f001 fbc8 	bl	800817c <vPortEnterCritical>
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d103      	bne.n	8006a02 <xQueueReceive+0x12e>
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d103      	bne.n	8006a18 <xQueueReceive+0x144>
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a18:	f001 fbe4 	bl	80081e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a1c:	1d3a      	adds	r2, r7, #4
 8006a1e:	f107 0310 	add.w	r3, r7, #16
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 ff11 	bl	800784c <xTaskCheckForTimeOut>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d123      	bne.n	8006a78 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a32:	f000 fa43 	bl	8006ebc <prvIsQueueEmpty>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d017      	beq.n	8006a6c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	3324      	adds	r3, #36	; 0x24
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	4611      	mov	r1, r2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fe61 	bl	800770c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4c:	f000 f9e4 	bl	8006e18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a50:	f000 fca6 	bl	80073a0 <xTaskResumeAll>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d189      	bne.n	800696e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006a5a:	4b10      	ldr	r3, [pc, #64]	; (8006a9c <xQueueReceive+0x1c8>)
 8006a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	e780      	b.n	800696e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6e:	f000 f9d3 	bl	8006e18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a72:	f000 fc95 	bl	80073a0 <xTaskResumeAll>
 8006a76:	e77a      	b.n	800696e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a7a:	f000 f9cd 	bl	8006e18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a7e:	f000 fc8f 	bl	80073a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a84:	f000 fa1a 	bl	8006ebc <prvIsQueueEmpty>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f43f af6f 	beq.w	800696e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3730      	adds	r7, #48	; 0x30
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08e      	sub	sp, #56	; 0x38
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10c      	bne.n	8006ad6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	b672      	cpsid	i
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	b662      	cpsie	i
 8006ad0:	623b      	str	r3, [r7, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	b672      	cpsid	i
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	b662      	cpsie	i
 8006af2:	61fb      	str	r3, [r7, #28]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006af8:	f000 fff2 	bl	8007ae0 <xTaskGetSchedulerState>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <xQueueSemaphoreTake+0x68>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <xQueueSemaphoreTake+0x6c>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <xQueueSemaphoreTake+0x6e>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10c      	bne.n	8006b2c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	b672      	cpsid	i
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	b662      	cpsie	i
 8006b26:	61bb      	str	r3, [r7, #24]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b2c:	f001 fb26 	bl	800817c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d024      	beq.n	8006b86 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	1e5a      	subs	r2, r3, #1
 8006b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b4c:	f001 f98e 	bl	8007e6c <pvTaskIncrementMutexHeldCount>
 8006b50:	4602      	mov	r2, r0
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00f      	beq.n	8006b7e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	3310      	adds	r3, #16
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fdf8 	bl	8007758 <xTaskRemoveFromEventList>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d007      	beq.n	8006b7e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b6e:	4b55      	ldr	r3, [pc, #340]	; (8006cc4 <xQueueSemaphoreTake+0x224>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b7e:	f001 fb31 	bl	80081e4 <vPortExitCritical>
				return pdPASS;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e099      	b.n	8006cba <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d113      	bne.n	8006bb4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00c      	beq.n	8006bac <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	b672      	cpsid	i
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	b662      	cpsie	i
 8006ba6:	617b      	str	r3, [r7, #20]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006bac:	f001 fb1a 	bl	80081e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e082      	b.n	8006cba <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bba:	f107 030c 	add.w	r3, r7, #12
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fe2e 	bl	8007820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bc8:	f001 fb0c 	bl	80081e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bcc:	f000 fbda 	bl	8007384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bd0:	f001 fad4 	bl	800817c <vPortEnterCritical>
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bda:	b25b      	sxtb	r3, r3
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d103      	bne.n	8006bea <xQueueSemaphoreTake+0x14a>
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bf0:	b25b      	sxtb	r3, r3
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d103      	bne.n	8006c00 <xQueueSemaphoreTake+0x160>
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c00:	f001 faf0 	bl	80081e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c04:	463a      	mov	r2, r7
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fe1d 	bl	800784c <xTaskCheckForTimeOut>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d132      	bne.n	8006c7e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c1a:	f000 f94f 	bl	8006ebc <prvIsQueueEmpty>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d026      	beq.n	8006c72 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006c2c:	f001 faa6 	bl	800817c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 ff71 	bl	8007b1c <xTaskPriorityInherit>
 8006c3a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006c3c:	f001 fad2 	bl	80081e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	3324      	adds	r3, #36	; 0x24
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fd5f 	bl	800770c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c50:	f000 f8e2 	bl	8006e18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c54:	f000 fba4 	bl	80073a0 <xTaskResumeAll>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f47f af66 	bne.w	8006b2c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006c60:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <xQueueSemaphoreTake+0x224>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	e75c      	b.n	8006b2c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c74:	f000 f8d0 	bl	8006e18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c78:	f000 fb92 	bl	80073a0 <xTaskResumeAll>
 8006c7c:	e756      	b.n	8006b2c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c80:	f000 f8ca 	bl	8006e18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c84:	f000 fb8c 	bl	80073a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c8a:	f000 f917 	bl	8006ebc <prvIsQueueEmpty>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f43f af4b 	beq.w	8006b2c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00d      	beq.n	8006cb8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006c9c:	f001 fa6e 	bl	800817c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ca2:	f000 f811 	bl	8006cc8 <prvGetDisinheritPriorityAfterTimeout>
 8006ca6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f83e 	bl	8007d30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006cb4:	f001 fa96 	bl	80081e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3738      	adds	r7, #56	; 0x38
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f1c3 0307 	rsb	r3, r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e001      	b.n	8006cea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006cea:	68fb      	ldr	r3, [r7, #12]
	}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10d      	bne.n	8006d32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d14d      	bne.n	8006dba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 ff7a 	bl	8007c1c <xTaskPriorityDisinherit>
 8006d28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	609a      	str	r2, [r3, #8]
 8006d30:	e043      	b.n	8006dba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d119      	bne.n	8006d6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6858      	ldr	r0, [r3, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	461a      	mov	r2, r3
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	f001 fd54 	bl	80087f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	441a      	add	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d32b      	bcc.n	8006dba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	605a      	str	r2, [r3, #4]
 8006d6a:	e026      	b.n	8006dba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68d8      	ldr	r0, [r3, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	461a      	mov	r2, r3
 8006d76:	68b9      	ldr	r1, [r7, #8]
 8006d78:	f001 fd3a 	bl	80087f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	425b      	negs	r3, r3
 8006d86:	441a      	add	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d207      	bcs.n	8006da8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	425b      	negs	r3, r3
 8006da2:	441a      	add	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d105      	bne.n	8006dba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006dc2:	697b      	ldr	r3, [r7, #20]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d018      	beq.n	8006e10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	441a      	add	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d303      	bcc.n	8006e00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68d9      	ldr	r1, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6838      	ldr	r0, [r7, #0]
 8006e0c:	f001 fcf0 	bl	80087f0 <memcpy>
	}
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e20:	f001 f9ac 	bl	800817c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e2c:	e011      	b.n	8006e52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d012      	beq.n	8006e5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3324      	adds	r3, #36	; 0x24
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fc8c 	bl	8007758 <xTaskRemoveFromEventList>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e46:	f000 fd67 	bl	8007918 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dce9      	bgt.n	8006e2e <prvUnlockQueue+0x16>
 8006e5a:	e000      	b.n	8006e5e <prvUnlockQueue+0x46>
					break;
 8006e5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	22ff      	movs	r2, #255	; 0xff
 8006e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e66:	f001 f9bd 	bl	80081e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e6a:	f001 f987 	bl	800817c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e76:	e011      	b.n	8006e9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d012      	beq.n	8006ea6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3310      	adds	r3, #16
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fc67 	bl	8007758 <xTaskRemoveFromEventList>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e90:	f000 fd42 	bl	8007918 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dce9      	bgt.n	8006e78 <prvUnlockQueue+0x60>
 8006ea4:	e000      	b.n	8006ea8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ea6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	22ff      	movs	r2, #255	; 0xff
 8006eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006eb0:	f001 f998 	bl	80081e4 <vPortExitCritical>
}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ec4:	f001 f95a 	bl	800817c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d102      	bne.n	8006ed6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e001      	b.n	8006eda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eda:	f001 f983 	bl	80081e4 <vPortExitCritical>

	return xReturn;
 8006ede:	68fb      	ldr	r3, [r7, #12]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ef0:	f001 f944 	bl	800817c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d102      	bne.n	8006f06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e001      	b.n	8006f0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f0a:	f001 f96b 	bl	80081e4 <vPortExitCritical>

	return xReturn;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08e      	sub	sp, #56	; 0x38
 8006f1c:	af04      	add	r7, sp, #16
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10c      	bne.n	8006f46 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	b672      	cpsid	i
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	b662      	cpsie	i
 8006f40:	623b      	str	r3, [r7, #32]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10c      	bne.n	8006f66 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	b672      	cpsid	i
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	b662      	cpsie	i
 8006f60:	61fb      	str	r3, [r7, #28]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f66:	2354      	movs	r3, #84	; 0x54
 8006f68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b54      	cmp	r3, #84	; 0x54
 8006f6e:	d00c      	beq.n	8006f8a <xTaskCreateStatic+0x72>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	b672      	cpsid	i
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	b662      	cpsie	i
 8006f84:	61bb      	str	r3, [r7, #24]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01e      	beq.n	8006fd0 <xTaskCreateStatic+0xb8>
 8006f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01b      	beq.n	8006fd0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006faa:	2300      	movs	r3, #0
 8006fac:	9303      	str	r3, [sp, #12]
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	9302      	str	r3, [sp, #8]
 8006fb2:	f107 0314 	add.w	r3, r7, #20
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f850 	bl	8007068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fca:	f000 f8d7 	bl	800717c <prvAddNewTaskToReadyList>
 8006fce:	e001      	b.n	8006fd4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fd4:	697b      	ldr	r3, [r7, #20]
	}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3728      	adds	r7, #40	; 0x28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b08c      	sub	sp, #48	; 0x30
 8006fe2:	af04      	add	r7, sp, #16
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	603b      	str	r3, [r7, #0]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f9ee 	bl	80083d4 <pvPortMalloc>
 8006ff8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00e      	beq.n	800701e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007000:	2054      	movs	r0, #84	; 0x54
 8007002:	f001 f9e7 	bl	80083d4 <pvPortMalloc>
 8007006:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
 8007014:	e005      	b.n	8007022 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007016:	6978      	ldr	r0, [r7, #20]
 8007018:	f001 faa6 	bl	8008568 <vPortFree>
 800701c:	e001      	b.n	8007022 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d017      	beq.n	8007058 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007030:	88fa      	ldrh	r2, [r7, #6]
 8007032:	2300      	movs	r3, #0
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	9302      	str	r3, [sp, #8]
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f80e 	bl	8007068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800704c:	69f8      	ldr	r0, [r7, #28]
 800704e:	f000 f895 	bl	800717c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007052:	2301      	movs	r3, #1
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	e002      	b.n	800705e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007058:	f04f 33ff 	mov.w	r3, #4294967295
 800705c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800705e:	69bb      	ldr	r3, [r7, #24]
	}
 8007060:	4618      	mov	r0, r3
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007080:	440b      	add	r3, r1
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f023 0307 	bic.w	r3, r3, #7
 800708e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00c      	beq.n	80070b4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	b672      	cpsid	i
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	b662      	cpsie	i
 80070ae:	617b      	str	r3, [r7, #20]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01f      	beq.n	80070fa <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	e012      	b.n	80070e6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	4413      	add	r3, r2
 80070c6:	7819      	ldrb	r1, [r3, #0]
 80070c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	3334      	adds	r3, #52	; 0x34
 80070d0:	460a      	mov	r2, r1
 80070d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	3301      	adds	r3, #1
 80070e4:	61fb      	str	r3, [r7, #28]
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2b0f      	cmp	r3, #15
 80070ea:	d9e9      	bls.n	80070c0 <prvInitialiseNewTask+0x58>
 80070ec:	e000      	b.n	80070f0 <prvInitialiseNewTask+0x88>
			{
				break;
 80070ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070f8:	e003      	b.n	8007102 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	2b06      	cmp	r3, #6
 8007106:	d901      	bls.n	800710c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007108:	2306      	movs	r3, #6
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007110:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007116:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	2200      	movs	r2, #0
 800711c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff f89d 	bl	8006262 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	3318      	adds	r3, #24
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff f898 	bl	8006262 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007136:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	f1c3 0207 	rsb	r2, r3, #7
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007146:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	2200      	movs	r2, #0
 800714c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	68f9      	ldr	r1, [r7, #12]
 800715a:	69b8      	ldr	r0, [r7, #24]
 800715c:	f000 ff00 	bl	8007f60 <pxPortInitialiseStack>
 8007160:	4602      	mov	r2, r0
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007172:	bf00      	nop
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007184:	f000 fffa 	bl	800817c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007188:	4b2a      	ldr	r3, [pc, #168]	; (8007234 <prvAddNewTaskToReadyList+0xb8>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3301      	adds	r3, #1
 800718e:	4a29      	ldr	r2, [pc, #164]	; (8007234 <prvAddNewTaskToReadyList+0xb8>)
 8007190:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007192:	4b29      	ldr	r3, [pc, #164]	; (8007238 <prvAddNewTaskToReadyList+0xbc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800719a:	4a27      	ldr	r2, [pc, #156]	; (8007238 <prvAddNewTaskToReadyList+0xbc>)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071a0:	4b24      	ldr	r3, [pc, #144]	; (8007234 <prvAddNewTaskToReadyList+0xb8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d110      	bne.n	80071ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071a8:	f000 fbda 	bl	8007960 <prvInitialiseTaskLists>
 80071ac:	e00d      	b.n	80071ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071ae:	4b23      	ldr	r3, [pc, #140]	; (800723c <prvAddNewTaskToReadyList+0xc0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071b6:	4b20      	ldr	r3, [pc, #128]	; (8007238 <prvAddNewTaskToReadyList+0xbc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d802      	bhi.n	80071ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071c4:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <prvAddNewTaskToReadyList+0xbc>)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071ca:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <prvAddNewTaskToReadyList+0xc4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3301      	adds	r3, #1
 80071d0:	4a1b      	ldr	r2, [pc, #108]	; (8007240 <prvAddNewTaskToReadyList+0xc4>)
 80071d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	2201      	movs	r2, #1
 80071da:	409a      	lsls	r2, r3
 80071dc:	4b19      	ldr	r3, [pc, #100]	; (8007244 <prvAddNewTaskToReadyList+0xc8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	4a18      	ldr	r2, [pc, #96]	; (8007244 <prvAddNewTaskToReadyList+0xc8>)
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ea:	4613      	mov	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4a15      	ldr	r2, [pc, #84]	; (8007248 <prvAddNewTaskToReadyList+0xcc>)
 80071f4:	441a      	add	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3304      	adds	r3, #4
 80071fa:	4619      	mov	r1, r3
 80071fc:	4610      	mov	r0, r2
 80071fe:	f7ff f83d 	bl	800627c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007202:	f000 ffef 	bl	80081e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <prvAddNewTaskToReadyList+0xc0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00e      	beq.n	800722c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800720e:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <prvAddNewTaskToReadyList+0xbc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	429a      	cmp	r2, r3
 800721a:	d207      	bcs.n	800722c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800721c:	4b0b      	ldr	r3, [pc, #44]	; (800724c <prvAddNewTaskToReadyList+0xd0>)
 800721e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000744 	.word	0x20000744
 8007238:	20000644 	.word	0x20000644
 800723c:	20000750 	.word	0x20000750
 8007240:	20000760 	.word	0x20000760
 8007244:	2000074c 	.word	0x2000074c
 8007248:	20000648 	.word	0x20000648
 800724c:	e000ed04 	.word	0xe000ed04

08007250 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d019      	beq.n	8007296 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <vTaskDelay+0x64>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00c      	beq.n	8007284 <vTaskDelay+0x34>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	b672      	cpsid	i
 8007270:	f383 8811 	msr	BASEPRI, r3
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	b662      	cpsie	i
 800727e:	60bb      	str	r3, [r7, #8]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007284:	f000 f87e 	bl	8007384 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007288:	2100      	movs	r1, #0
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fe02 	bl	8007e94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007290:	f000 f886 	bl	80073a0 <xTaskResumeAll>
 8007294:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d107      	bne.n	80072ac <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <vTaskDelay+0x68>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	2000076c 	.word	0x2000076c
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	; 0x28
 80072c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072ca:	463a      	mov	r2, r7
 80072cc:	1d39      	adds	r1, r7, #4
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7f9 fbda 	bl	8000a8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	9202      	str	r2, [sp, #8]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	2300      	movs	r3, #0
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	2300      	movs	r3, #0
 80072e8:	460a      	mov	r2, r1
 80072ea:	4920      	ldr	r1, [pc, #128]	; (800736c <vTaskStartScheduler+0xb0>)
 80072ec:	4820      	ldr	r0, [pc, #128]	; (8007370 <vTaskStartScheduler+0xb4>)
 80072ee:	f7ff fe13 	bl	8006f18 <xTaskCreateStatic>
 80072f2:	4603      	mov	r3, r0
 80072f4:	4a1f      	ldr	r2, [pc, #124]	; (8007374 <vTaskStartScheduler+0xb8>)
 80072f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072f8:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <vTaskStartScheduler+0xb8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007300:	2301      	movs	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	e001      	b.n	800730a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d118      	bne.n	8007342 <vTaskStartScheduler+0x86>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	b672      	cpsid	i
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	b662      	cpsie	i
 8007324:	613b      	str	r3, [r7, #16]
}
 8007326:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007328:	4b13      	ldr	r3, [pc, #76]	; (8007378 <vTaskStartScheduler+0xbc>)
 800732a:	f04f 32ff 	mov.w	r2, #4294967295
 800732e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007330:	4b12      	ldr	r3, [pc, #72]	; (800737c <vTaskStartScheduler+0xc0>)
 8007332:	2201      	movs	r2, #1
 8007334:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007336:	4b12      	ldr	r3, [pc, #72]	; (8007380 <vTaskStartScheduler+0xc4>)
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800733c:	f000 fea0 	bl	8008080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007340:	e010      	b.n	8007364 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007348:	d10c      	bne.n	8007364 <vTaskStartScheduler+0xa8>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	b672      	cpsid	i
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	b662      	cpsie	i
 800735e:	60fb      	str	r3, [r7, #12]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <vTaskStartScheduler+0xa6>
}
 8007364:	bf00      	nop
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	080091b4 	.word	0x080091b4
 8007370:	08007931 	.word	0x08007931
 8007374:	20000768 	.word	0x20000768
 8007378:	20000764 	.word	0x20000764
 800737c:	20000750 	.word	0x20000750
 8007380:	20000748 	.word	0x20000748

08007384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <vTaskSuspendAll+0x18>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3301      	adds	r3, #1
 800738e:	4a03      	ldr	r2, [pc, #12]	; (800739c <vTaskSuspendAll+0x18>)
 8007390:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007392:	bf00      	nop
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	2000076c 	.word	0x2000076c

080073a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073ae:	4b42      	ldr	r3, [pc, #264]	; (80074b8 <xTaskResumeAll+0x118>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10c      	bne.n	80073d0 <xTaskResumeAll+0x30>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	b672      	cpsid	i
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	b662      	cpsie	i
 80073ca:	603b      	str	r3, [r7, #0]
}
 80073cc:	bf00      	nop
 80073ce:	e7fe      	b.n	80073ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073d0:	f000 fed4 	bl	800817c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073d4:	4b38      	ldr	r3, [pc, #224]	; (80074b8 <xTaskResumeAll+0x118>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3b01      	subs	r3, #1
 80073da:	4a37      	ldr	r2, [pc, #220]	; (80074b8 <xTaskResumeAll+0x118>)
 80073dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073de:	4b36      	ldr	r3, [pc, #216]	; (80074b8 <xTaskResumeAll+0x118>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d161      	bne.n	80074aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073e6:	4b35      	ldr	r3, [pc, #212]	; (80074bc <xTaskResumeAll+0x11c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d05d      	beq.n	80074aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073ee:	e02e      	b.n	800744e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f0:	4b33      	ldr	r3, [pc, #204]	; (80074c0 <xTaskResumeAll+0x120>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3318      	adds	r3, #24
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe ff9a 	bl	8006336 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3304      	adds	r3, #4
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe ff95 	bl	8006336 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	4b2b      	ldr	r3, [pc, #172]	; (80074c4 <xTaskResumeAll+0x124>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4313      	orrs	r3, r2
 800741a:	4a2a      	ldr	r2, [pc, #168]	; (80074c4 <xTaskResumeAll+0x124>)
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4a27      	ldr	r2, [pc, #156]	; (80074c8 <xTaskResumeAll+0x128>)
 800742c:	441a      	add	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7fe ff21 	bl	800627c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	4b23      	ldr	r3, [pc, #140]	; (80074cc <xTaskResumeAll+0x12c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	429a      	cmp	r2, r3
 8007446:	d302      	bcc.n	800744e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007448:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <xTaskResumeAll+0x130>)
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800744e:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <xTaskResumeAll+0x120>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1cc      	bne.n	80073f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800745c:	f000 fb20 	bl	8007aa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007460:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <xTaskResumeAll+0x134>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d010      	beq.n	800748e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800746c:	f000 f836 	bl	80074dc <xTaskIncrementTick>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007476:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <xTaskResumeAll+0x130>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3b01      	subs	r3, #1
 8007480:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1f1      	bne.n	800746c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007488:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <xTaskResumeAll+0x134>)
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800748e:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <xTaskResumeAll+0x130>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007496:	2301      	movs	r3, #1
 8007498:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800749a:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <xTaskResumeAll+0x138>)
 800749c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074aa:	f000 fe9b 	bl	80081e4 <vPortExitCritical>

	return xAlreadyYielded;
 80074ae:	68bb      	ldr	r3, [r7, #8]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	2000076c 	.word	0x2000076c
 80074bc:	20000744 	.word	0x20000744
 80074c0:	20000704 	.word	0x20000704
 80074c4:	2000074c 	.word	0x2000074c
 80074c8:	20000648 	.word	0x20000648
 80074cc:	20000644 	.word	0x20000644
 80074d0:	20000758 	.word	0x20000758
 80074d4:	20000754 	.word	0x20000754
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e6:	4b4f      	ldr	r3, [pc, #316]	; (8007624 <xTaskIncrementTick+0x148>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f040 808a 	bne.w	8007604 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074f0:	4b4d      	ldr	r3, [pc, #308]	; (8007628 <xTaskIncrementTick+0x14c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3301      	adds	r3, #1
 80074f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074f8:	4a4b      	ldr	r2, [pc, #300]	; (8007628 <xTaskIncrementTick+0x14c>)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d122      	bne.n	800754a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007504:	4b49      	ldr	r3, [pc, #292]	; (800762c <xTaskIncrementTick+0x150>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00c      	beq.n	8007528 <xTaskIncrementTick+0x4c>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	b672      	cpsid	i
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	b662      	cpsie	i
 8007522:	603b      	str	r3, [r7, #0]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <xTaskIncrementTick+0x4a>
 8007528:	4b40      	ldr	r3, [pc, #256]	; (800762c <xTaskIncrementTick+0x150>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	4b40      	ldr	r3, [pc, #256]	; (8007630 <xTaskIncrementTick+0x154>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a3e      	ldr	r2, [pc, #248]	; (800762c <xTaskIncrementTick+0x150>)
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4a3e      	ldr	r2, [pc, #248]	; (8007630 <xTaskIncrementTick+0x154>)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	4b3d      	ldr	r3, [pc, #244]	; (8007634 <xTaskIncrementTick+0x158>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	4a3c      	ldr	r2, [pc, #240]	; (8007634 <xTaskIncrementTick+0x158>)
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	f000 faab 	bl	8007aa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800754a:	4b3b      	ldr	r3, [pc, #236]	; (8007638 <xTaskIncrementTick+0x15c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	429a      	cmp	r2, r3
 8007552:	d348      	bcc.n	80075e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007554:	4b35      	ldr	r3, [pc, #212]	; (800762c <xTaskIncrementTick+0x150>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d104      	bne.n	8007568 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800755e:	4b36      	ldr	r3, [pc, #216]	; (8007638 <xTaskIncrementTick+0x15c>)
 8007560:	f04f 32ff 	mov.w	r2, #4294967295
 8007564:	601a      	str	r2, [r3, #0]
					break;
 8007566:	e03e      	b.n	80075e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007568:	4b30      	ldr	r3, [pc, #192]	; (800762c <xTaskIncrementTick+0x150>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	429a      	cmp	r2, r3
 800757e:	d203      	bcs.n	8007588 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007580:	4a2d      	ldr	r2, [pc, #180]	; (8007638 <xTaskIncrementTick+0x15c>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007586:	e02e      	b.n	80075e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3304      	adds	r3, #4
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe fed2 	bl	8006336 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	2b00      	cmp	r3, #0
 8007598:	d004      	beq.n	80075a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	3318      	adds	r3, #24
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fec9 	bl	8006336 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	2201      	movs	r2, #1
 80075aa:	409a      	lsls	r2, r3
 80075ac:	4b23      	ldr	r3, [pc, #140]	; (800763c <xTaskIncrementTick+0x160>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	4a22      	ldr	r2, [pc, #136]	; (800763c <xTaskIncrementTick+0x160>)
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4a1f      	ldr	r2, [pc, #124]	; (8007640 <xTaskIncrementTick+0x164>)
 80075c4:	441a      	add	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4619      	mov	r1, r3
 80075cc:	4610      	mov	r0, r2
 80075ce:	f7fe fe55 	bl	800627c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d6:	4b1b      	ldr	r3, [pc, #108]	; (8007644 <xTaskIncrementTick+0x168>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d3b9      	bcc.n	8007554 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80075e0:	2301      	movs	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e4:	e7b6      	b.n	8007554 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075e6:	4b17      	ldr	r3, [pc, #92]	; (8007644 <xTaskIncrementTick+0x168>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	4914      	ldr	r1, [pc, #80]	; (8007640 <xTaskIncrementTick+0x164>)
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d907      	bls.n	800760e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80075fe:	2301      	movs	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	e004      	b.n	800760e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007604:	4b10      	ldr	r3, [pc, #64]	; (8007648 <xTaskIncrementTick+0x16c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	4a0f      	ldr	r2, [pc, #60]	; (8007648 <xTaskIncrementTick+0x16c>)
 800760c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800760e:	4b0f      	ldr	r3, [pc, #60]	; (800764c <xTaskIncrementTick+0x170>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007616:	2301      	movs	r3, #1
 8007618:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800761a:	697b      	ldr	r3, [r7, #20]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	2000076c 	.word	0x2000076c
 8007628:	20000748 	.word	0x20000748
 800762c:	200006fc 	.word	0x200006fc
 8007630:	20000700 	.word	0x20000700
 8007634:	2000075c 	.word	0x2000075c
 8007638:	20000764 	.word	0x20000764
 800763c:	2000074c 	.word	0x2000074c
 8007640:	20000648 	.word	0x20000648
 8007644:	20000644 	.word	0x20000644
 8007648:	20000754 	.word	0x20000754
 800764c:	20000758 	.word	0x20000758

08007650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007656:	4b28      	ldr	r3, [pc, #160]	; (80076f8 <vTaskSwitchContext+0xa8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800765e:	4b27      	ldr	r3, [pc, #156]	; (80076fc <vTaskSwitchContext+0xac>)
 8007660:	2201      	movs	r2, #1
 8007662:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007664:	e041      	b.n	80076ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007666:	4b25      	ldr	r3, [pc, #148]	; (80076fc <vTaskSwitchContext+0xac>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766c:	4b24      	ldr	r3, [pc, #144]	; (8007700 <vTaskSwitchContext+0xb0>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	fab3 f383 	clz	r3, r3
 8007678:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800767a:	7afb      	ldrb	r3, [r7, #11]
 800767c:	f1c3 031f 	rsb	r3, r3, #31
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	4920      	ldr	r1, [pc, #128]	; (8007704 <vTaskSwitchContext+0xb4>)
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10c      	bne.n	80076b0 <vTaskSwitchContext+0x60>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	b672      	cpsid	i
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	b662      	cpsie	i
 80076aa:	607b      	str	r3, [r7, #4]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <vTaskSwitchContext+0x5e>
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4a12      	ldr	r2, [pc, #72]	; (8007704 <vTaskSwitchContext+0xb4>)
 80076bc:	4413      	add	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	3308      	adds	r3, #8
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d104      	bne.n	80076e0 <vTaskSwitchContext+0x90>
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	605a      	str	r2, [r3, #4]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	4a08      	ldr	r2, [pc, #32]	; (8007708 <vTaskSwitchContext+0xb8>)
 80076e8:	6013      	str	r3, [r2, #0]
}
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	2000076c 	.word	0x2000076c
 80076fc:	20000758 	.word	0x20000758
 8007700:	2000074c 	.word	0x2000074c
 8007704:	20000648 	.word	0x20000648
 8007708:	20000644 	.word	0x20000644

0800770c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10c      	bne.n	8007736 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	b672      	cpsid	i
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	b662      	cpsie	i
 8007730:	60fb      	str	r3, [r7, #12]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007736:	4b07      	ldr	r3, [pc, #28]	; (8007754 <vTaskPlaceOnEventList+0x48>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3318      	adds	r3, #24
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fe fdc0 	bl	80062c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007744:	2101      	movs	r1, #1
 8007746:	6838      	ldr	r0, [r7, #0]
 8007748:	f000 fba4 	bl	8007e94 <prvAddCurrentTaskToDelayedList>
}
 800774c:	bf00      	nop
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000644 	.word	0x20000644

08007758 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10c      	bne.n	8007788 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	b672      	cpsid	i
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	b662      	cpsie	i
 8007782:	60fb      	str	r3, [r7, #12]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	3318      	adds	r3, #24
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fdd2 	bl	8006336 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007792:	4b1d      	ldr	r3, [pc, #116]	; (8007808 <xTaskRemoveFromEventList+0xb0>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d11c      	bne.n	80077d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3304      	adds	r3, #4
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fdc9 	bl	8006336 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	2201      	movs	r2, #1
 80077aa:	409a      	lsls	r2, r3
 80077ac:	4b17      	ldr	r3, [pc, #92]	; (800780c <xTaskRemoveFromEventList+0xb4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	4a16      	ldr	r2, [pc, #88]	; (800780c <xTaskRemoveFromEventList+0xb4>)
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4a13      	ldr	r2, [pc, #76]	; (8007810 <xTaskRemoveFromEventList+0xb8>)
 80077c4:	441a      	add	r2, r3
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	3304      	adds	r3, #4
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f7fe fd55 	bl	800627c <vListInsertEnd>
 80077d2:	e005      	b.n	80077e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	3318      	adds	r3, #24
 80077d8:	4619      	mov	r1, r3
 80077da:	480e      	ldr	r0, [pc, #56]	; (8007814 <xTaskRemoveFromEventList+0xbc>)
 80077dc:	f7fe fd4e 	bl	800627c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <xTaskRemoveFromEventList+0xc0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d905      	bls.n	80077fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077f2:	4b0a      	ldr	r3, [pc, #40]	; (800781c <xTaskRemoveFromEventList+0xc4>)
 80077f4:	2201      	movs	r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e001      	b.n	80077fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077fe:	697b      	ldr	r3, [r7, #20]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	2000076c 	.word	0x2000076c
 800780c:	2000074c 	.word	0x2000074c
 8007810:	20000648 	.word	0x20000648
 8007814:	20000704 	.word	0x20000704
 8007818:	20000644 	.word	0x20000644
 800781c:	20000758 	.word	0x20000758

08007820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007828:	4b06      	ldr	r3, [pc, #24]	; (8007844 <vTaskInternalSetTimeOutState+0x24>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007830:	4b05      	ldr	r3, [pc, #20]	; (8007848 <vTaskInternalSetTimeOutState+0x28>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	605a      	str	r2, [r3, #4]
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	2000075c 	.word	0x2000075c
 8007848:	20000748 	.word	0x20000748

0800784c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10c      	bne.n	8007876 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	b672      	cpsid	i
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	b662      	cpsie	i
 8007870:	613b      	str	r3, [r7, #16]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10c      	bne.n	8007896 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	b672      	cpsid	i
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	b662      	cpsie	i
 8007890:	60fb      	str	r3, [r7, #12]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007896:	f000 fc71 	bl	800817c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800789a:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <xTaskCheckForTimeOut+0xc4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d102      	bne.n	80078ba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	e023      	b.n	8007902 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b15      	ldr	r3, [pc, #84]	; (8007914 <xTaskCheckForTimeOut+0xc8>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d007      	beq.n	80078d6 <xTaskCheckForTimeOut+0x8a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d302      	bcc.n	80078d6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80078d0:	2301      	movs	r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
 80078d4:	e015      	b.n	8007902 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d20b      	bcs.n	80078f8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	1ad2      	subs	r2, r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff ff97 	bl	8007820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	e004      	b.n	8007902 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078fe:	2301      	movs	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007902:	f000 fc6f 	bl	80081e4 <vPortExitCritical>

	return xReturn;
 8007906:	69fb      	ldr	r3, [r7, #28]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3720      	adds	r7, #32
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000748 	.word	0x20000748
 8007914:	2000075c 	.word	0x2000075c

08007918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800791c:	4b03      	ldr	r3, [pc, #12]	; (800792c <vTaskMissedYield+0x14>)
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
}
 8007922:	bf00      	nop
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20000758 	.word	0x20000758

08007930 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007938:	f000 f852 	bl	80079e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800793c:	4b06      	ldr	r3, [pc, #24]	; (8007958 <prvIdleTask+0x28>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d9f9      	bls.n	8007938 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007944:	4b05      	ldr	r3, [pc, #20]	; (800795c <prvIdleTask+0x2c>)
 8007946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007954:	e7f0      	b.n	8007938 <prvIdleTask+0x8>
 8007956:	bf00      	nop
 8007958:	20000648 	.word	0x20000648
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007966:	2300      	movs	r3, #0
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	e00c      	b.n	8007986 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4a12      	ldr	r2, [pc, #72]	; (80079c0 <prvInitialiseTaskLists+0x60>)
 8007978:	4413      	add	r3, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fc51 	bl	8006222 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	3301      	adds	r3, #1
 8007984:	607b      	str	r3, [r7, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b06      	cmp	r3, #6
 800798a:	d9ef      	bls.n	800796c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800798c:	480d      	ldr	r0, [pc, #52]	; (80079c4 <prvInitialiseTaskLists+0x64>)
 800798e:	f7fe fc48 	bl	8006222 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007992:	480d      	ldr	r0, [pc, #52]	; (80079c8 <prvInitialiseTaskLists+0x68>)
 8007994:	f7fe fc45 	bl	8006222 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007998:	480c      	ldr	r0, [pc, #48]	; (80079cc <prvInitialiseTaskLists+0x6c>)
 800799a:	f7fe fc42 	bl	8006222 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800799e:	480c      	ldr	r0, [pc, #48]	; (80079d0 <prvInitialiseTaskLists+0x70>)
 80079a0:	f7fe fc3f 	bl	8006222 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079a4:	480b      	ldr	r0, [pc, #44]	; (80079d4 <prvInitialiseTaskLists+0x74>)
 80079a6:	f7fe fc3c 	bl	8006222 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079aa:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <prvInitialiseTaskLists+0x78>)
 80079ac:	4a05      	ldr	r2, [pc, #20]	; (80079c4 <prvInitialiseTaskLists+0x64>)
 80079ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <prvInitialiseTaskLists+0x7c>)
 80079b2:	4a05      	ldr	r2, [pc, #20]	; (80079c8 <prvInitialiseTaskLists+0x68>)
 80079b4:	601a      	str	r2, [r3, #0]
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000648 	.word	0x20000648
 80079c4:	200006d4 	.word	0x200006d4
 80079c8:	200006e8 	.word	0x200006e8
 80079cc:	20000704 	.word	0x20000704
 80079d0:	20000718 	.word	0x20000718
 80079d4:	20000730 	.word	0x20000730
 80079d8:	200006fc 	.word	0x200006fc
 80079dc:	20000700 	.word	0x20000700

080079e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079e6:	e019      	b.n	8007a1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079e8:	f000 fbc8 	bl	800817c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ec:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <prvCheckTasksWaitingTermination+0x50>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe fc9c 	bl	8006336 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079fe:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <prvCheckTasksWaitingTermination+0x54>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	4a0b      	ldr	r2, [pc, #44]	; (8007a34 <prvCheckTasksWaitingTermination+0x54>)
 8007a06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a08:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <prvCheckTasksWaitingTermination+0x58>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	4a0a      	ldr	r2, [pc, #40]	; (8007a38 <prvCheckTasksWaitingTermination+0x58>)
 8007a10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a12:	f000 fbe7 	bl	80081e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f810 	bl	8007a3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <prvCheckTasksWaitingTermination+0x58>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e1      	bne.n	80079e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000718 	.word	0x20000718
 8007a34:	20000744 	.word	0x20000744
 8007a38:	2000072c 	.word	0x2000072c

08007a3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d108      	bne.n	8007a60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 fd88 	bl	8008568 <vPortFree>
				vPortFree( pxTCB );
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fd85 	bl	8008568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a5e:	e01a      	b.n	8007a96 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d103      	bne.n	8007a72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fd7c 	bl	8008568 <vPortFree>
	}
 8007a70:	e011      	b.n	8007a96 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d00c      	beq.n	8007a96 <prvDeleteTCB+0x5a>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	b672      	cpsid	i
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	b662      	cpsie	i
 8007a90:	60fb      	str	r3, [r7, #12]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <prvDeleteTCB+0x58>
	}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aa6:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <prvResetNextTaskUnblockTime+0x38>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <prvResetNextTaskUnblockTime+0x3c>)
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ab8:	e008      	b.n	8007acc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aba:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <prvResetNextTaskUnblockTime+0x38>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4a04      	ldr	r2, [pc, #16]	; (8007adc <prvResetNextTaskUnblockTime+0x3c>)
 8007aca:	6013      	str	r3, [r2, #0]
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	200006fc 	.word	0x200006fc
 8007adc:	20000764 	.word	0x20000764

08007ae0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <xTaskGetSchedulerState+0x34>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d102      	bne.n	8007af4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007aee:	2301      	movs	r3, #1
 8007af0:	607b      	str	r3, [r7, #4]
 8007af2:	e008      	b.n	8007b06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007af4:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <xTaskGetSchedulerState+0x38>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d102      	bne.n	8007b02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007afc:	2302      	movs	r3, #2
 8007afe:	607b      	str	r3, [r7, #4]
 8007b00:	e001      	b.n	8007b06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b02:	2300      	movs	r3, #0
 8007b04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b06:	687b      	ldr	r3, [r7, #4]
	}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	20000750 	.word	0x20000750
 8007b18:	2000076c 	.word	0x2000076c

08007b1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d069      	beq.n	8007c06 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b36:	4b36      	ldr	r3, [pc, #216]	; (8007c10 <xTaskPriorityInherit+0xf4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d259      	bcs.n	8007bf4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	db06      	blt.n	8007b56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b48:	4b31      	ldr	r3, [pc, #196]	; (8007c10 <xTaskPriorityInherit+0xf4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	f1c3 0207 	rsb	r2, r3, #7
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	6959      	ldr	r1, [r3, #20]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4a2b      	ldr	r2, [pc, #172]	; (8007c14 <xTaskPriorityInherit+0xf8>)
 8007b68:	4413      	add	r3, r2
 8007b6a:	4299      	cmp	r1, r3
 8007b6c:	d13a      	bne.n	8007be4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe fbdf 	bl	8006336 <uxListRemove>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d115      	bne.n	8007baa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b82:	4924      	ldr	r1, [pc, #144]	; (8007c14 <xTaskPriorityInherit+0xf8>)
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xTaskPriorityInherit+0x8e>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	2201      	movs	r2, #1
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	43da      	mvns	r2, r3
 8007ba0:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <xTaskPriorityInherit+0xfc>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <xTaskPriorityInherit+0xfc>)
 8007ba8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007baa:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <xTaskPriorityInherit+0xf4>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	2201      	movs	r2, #1
 8007bba:	409a      	lsls	r2, r3
 8007bbc:	4b16      	ldr	r3, [pc, #88]	; (8007c18 <xTaskPriorityInherit+0xfc>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <xTaskPriorityInherit+0xfc>)
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4a10      	ldr	r2, [pc, #64]	; (8007c14 <xTaskPriorityInherit+0xf8>)
 8007bd4:	441a      	add	r2, r3
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4610      	mov	r0, r2
 8007bde:	f7fe fb4d 	bl	800627c <vListInsertEnd>
 8007be2:	e004      	b.n	8007bee <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <xTaskPriorityInherit+0xf4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e008      	b.n	8007c06 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bf8:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <xTaskPriorityInherit+0xf4>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d201      	bcs.n	8007c06 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c02:	2301      	movs	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c06:	68fb      	ldr	r3, [r7, #12]
	}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000644 	.word	0x20000644
 8007c14:	20000648 	.word	0x20000648
 8007c18:	2000074c 	.word	0x2000074c

08007c1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d072      	beq.n	8007d18 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c32:	4b3c      	ldr	r3, [pc, #240]	; (8007d24 <xTaskPriorityDisinherit+0x108>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d00c      	beq.n	8007c56 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	b672      	cpsid	i
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	b662      	cpsie	i
 8007c50:	60fb      	str	r3, [r7, #12]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10c      	bne.n	8007c78 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	b672      	cpsid	i
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	b662      	cpsie	i
 8007c72:	60bb      	str	r3, [r7, #8]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c7c:	1e5a      	subs	r2, r3, #1
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d044      	beq.n	8007d18 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d140      	bne.n	8007d18 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fb4b 	bl	8006336 <uxListRemove>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d115      	bne.n	8007cd2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007caa:	491f      	ldr	r1, [pc, #124]	; (8007d28 <xTaskPriorityDisinherit+0x10c>)
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <xTaskPriorityDisinherit+0xb6>
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	43da      	mvns	r2, r3
 8007cc8:	4b18      	ldr	r3, [pc, #96]	; (8007d2c <xTaskPriorityDisinherit+0x110>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	4a17      	ldr	r2, [pc, #92]	; (8007d2c <xTaskPriorityDisinherit+0x110>)
 8007cd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	f1c3 0207 	rsb	r2, r3, #7
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	2201      	movs	r2, #1
 8007cec:	409a      	lsls	r2, r3
 8007cee:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <xTaskPriorityDisinherit+0x110>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	4a0d      	ldr	r2, [pc, #52]	; (8007d2c <xTaskPriorityDisinherit+0x110>)
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4a08      	ldr	r2, [pc, #32]	; (8007d28 <xTaskPriorityDisinherit+0x10c>)
 8007d06:	441a      	add	r2, r3
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	f7fe fab4 	bl	800627c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d14:	2301      	movs	r3, #1
 8007d16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d18:	697b      	ldr	r3, [r7, #20]
	}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000644 	.word	0x20000644
 8007d28:	20000648 	.word	0x20000648
 8007d2c:	2000074c 	.word	0x2000074c

08007d30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 8087 	beq.w	8007e58 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10c      	bne.n	8007d6c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	b672      	cpsid	i
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	b662      	cpsie	i
 8007d66:	60fb      	str	r3, [r7, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d902      	bls.n	8007d7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	e002      	b.n	8007d82 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d065      	beq.n	8007e58 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d160      	bne.n	8007e58 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d96:	4b32      	ldr	r3, [pc, #200]	; (8007e60 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d10c      	bne.n	8007dba <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	b672      	cpsid	i
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	b662      	cpsie	i
 8007db4:	60bb      	str	r3, [r7, #8]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	db04      	blt.n	8007dd8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f1c3 0207 	rsb	r2, r3, #7
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	6959      	ldr	r1, [r3, #20]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4a1f      	ldr	r2, [pc, #124]	; (8007e64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007de8:	4413      	add	r3, r2
 8007dea:	4299      	cmp	r1, r3
 8007dec:	d134      	bne.n	8007e58 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fa9f 	bl	8006336 <uxListRemove>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d115      	bne.n	8007e2a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e02:	4918      	ldr	r1, [pc, #96]	; (8007e64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	2201      	movs	r2, #1
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	43da      	mvns	r2, r3
 8007e20:	4b11      	ldr	r3, [pc, #68]	; (8007e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4013      	ands	r3, r2
 8007e26:	4a10      	ldr	r2, [pc, #64]	; (8007e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007e28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	2201      	movs	r2, #1
 8007e30:	409a      	lsls	r2, r3
 8007e32:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	4a0b      	ldr	r2, [pc, #44]	; (8007e68 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4a06      	ldr	r2, [pc, #24]	; (8007e64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007e4a:	441a      	add	r2, r3
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f7fe fa12 	bl	800627c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e58:	bf00      	nop
 8007e5a:	3720      	adds	r7, #32
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20000644 	.word	0x20000644
 8007e64:	20000648 	.word	0x20000648
 8007e68:	2000074c 	.word	0x2000074c

08007e6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e7e:	3201      	adds	r2, #1
 8007e80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007e82:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e84:	681b      	ldr	r3, [r3, #0]
	}
 8007e86:	4618      	mov	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	20000644 	.word	0x20000644

08007e94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e9e:	4b29      	ldr	r3, [pc, #164]	; (8007f44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ea4:	4b28      	ldr	r3, [pc, #160]	; (8007f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fa43 	bl	8006336 <uxListRemove>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10b      	bne.n	8007ece <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007eb6:	4b24      	ldr	r3, [pc, #144]	; (8007f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43da      	mvns	r2, r3
 8007ec4:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	4a20      	ldr	r2, [pc, #128]	; (8007f4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ecc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d10a      	bne.n	8007eec <prvAddCurrentTaskToDelayedList+0x58>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d007      	beq.n	8007eec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007edc:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	481a      	ldr	r0, [pc, #104]	; (8007f50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ee6:	f7fe f9c9 	bl	800627c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007eea:	e026      	b.n	8007f3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d209      	bcs.n	8007f18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f04:	4b13      	ldr	r3, [pc, #76]	; (8007f54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7fe f9d7 	bl	80062c4 <vListInsert>
}
 8007f16:	e010      	b.n	8007f3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f18:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3304      	adds	r3, #4
 8007f22:	4619      	mov	r1, r3
 8007f24:	4610      	mov	r0, r2
 8007f26:	f7fe f9cd 	bl	80062c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f2a:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d202      	bcs.n	8007f3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007f34:	4a09      	ldr	r2, [pc, #36]	; (8007f5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6013      	str	r3, [r2, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20000748 	.word	0x20000748
 8007f48:	20000644 	.word	0x20000644
 8007f4c:	2000074c 	.word	0x2000074c
 8007f50:	20000730 	.word	0x20000730
 8007f54:	20000700 	.word	0x20000700
 8007f58:	200006fc 	.word	0x200006fc
 8007f5c:	20000764 	.word	0x20000764

08007f60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3b04      	subs	r3, #4
 8007f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f023 0201 	bic.w	r2, r3, #1
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3b04      	subs	r3, #4
 8007f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f90:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <pxPortInitialiseStack+0x64>)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3b14      	subs	r3, #20
 8007f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3b04      	subs	r3, #4
 8007fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f06f 0202 	mvn.w	r2, #2
 8007fae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3b20      	subs	r3, #32
 8007fb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	08007fc9 	.word	0x08007fc9

08007fc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fd2:	4b14      	ldr	r3, [pc, #80]	; (8008024 <prvTaskExitError+0x5c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d00c      	beq.n	8007ff6 <prvTaskExitError+0x2e>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	b672      	cpsid	i
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	b662      	cpsie	i
 8007ff0:	60fb      	str	r3, [r7, #12]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <prvTaskExitError+0x2c>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	b672      	cpsid	i
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	b662      	cpsie	i
 800800a:	60bb      	str	r3, [r7, #8]
}
 800800c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800800e:	bf00      	nop
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0fc      	beq.n	8008010 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	20000010 	.word	0x20000010
	...

08008030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <pxCurrentTCBConst2>)
 8008032:	6819      	ldr	r1, [r3, #0]
 8008034:	6808      	ldr	r0, [r1, #0]
 8008036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803a:	f380 8809 	msr	PSP, r0
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	f380 8811 	msr	BASEPRI, r0
 800804a:	4770      	bx	lr
 800804c:	f3af 8000 	nop.w

08008050 <pxCurrentTCBConst2>:
 8008050:	20000644 	.word	0x20000644
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop

08008058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008058:	4808      	ldr	r0, [pc, #32]	; (800807c <prvPortStartFirstTask+0x24>)
 800805a:	6800      	ldr	r0, [r0, #0]
 800805c:	6800      	ldr	r0, [r0, #0]
 800805e:	f380 8808 	msr	MSP, r0
 8008062:	f04f 0000 	mov.w	r0, #0
 8008066:	f380 8814 	msr	CONTROL, r0
 800806a:	b662      	cpsie	i
 800806c:	b661      	cpsie	f
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	df00      	svc	0
 8008078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800807a:	bf00      	nop
 800807c:	e000ed08 	.word	0xe000ed08

08008080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008086:	4b37      	ldr	r3, [pc, #220]	; (8008164 <xPortStartScheduler+0xe4>)
 8008088:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	22ff      	movs	r2, #255	; 0xff
 8008096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	4b2f      	ldr	r3, [pc, #188]	; (8008168 <xPortStartScheduler+0xe8>)
 80080ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080ae:	4b2f      	ldr	r3, [pc, #188]	; (800816c <xPortStartScheduler+0xec>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080b4:	e009      	b.n	80080ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80080b6:	4b2d      	ldr	r3, [pc, #180]	; (800816c <xPortStartScheduler+0xec>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	4a2b      	ldr	r2, [pc, #172]	; (800816c <xPortStartScheduler+0xec>)
 80080be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d0ef      	beq.n	80080b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080d6:	4b25      	ldr	r3, [pc, #148]	; (800816c <xPortStartScheduler+0xec>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f1c3 0307 	rsb	r3, r3, #7
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d00c      	beq.n	80080fc <xPortStartScheduler+0x7c>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	b672      	cpsid	i
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	b662      	cpsie	i
 80080f6:	60bb      	str	r3, [r7, #8]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080fc:	4b1b      	ldr	r3, [pc, #108]	; (800816c <xPortStartScheduler+0xec>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	021b      	lsls	r3, r3, #8
 8008102:	4a1a      	ldr	r2, [pc, #104]	; (800816c <xPortStartScheduler+0xec>)
 8008104:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008106:	4b19      	ldr	r3, [pc, #100]	; (800816c <xPortStartScheduler+0xec>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800810e:	4a17      	ldr	r2, [pc, #92]	; (800816c <xPortStartScheduler+0xec>)
 8008110:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	b2da      	uxtb	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800811a:	4b15      	ldr	r3, [pc, #84]	; (8008170 <xPortStartScheduler+0xf0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a14      	ldr	r2, [pc, #80]	; (8008170 <xPortStartScheduler+0xf0>)
 8008120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008124:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008126:	4b12      	ldr	r3, [pc, #72]	; (8008170 <xPortStartScheduler+0xf0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a11      	ldr	r2, [pc, #68]	; (8008170 <xPortStartScheduler+0xf0>)
 800812c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008130:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008132:	f000 f8dd 	bl	80082f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008136:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <xPortStartScheduler+0xf4>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800813c:	f000 f8fc 	bl	8008338 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008140:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <xPortStartScheduler+0xf8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a0c      	ldr	r2, [pc, #48]	; (8008178 <xPortStartScheduler+0xf8>)
 8008146:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800814a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800814c:	f7ff ff84 	bl	8008058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008150:	f7ff fa7e 	bl	8007650 <vTaskSwitchContext>
	prvTaskExitError();
 8008154:	f7ff ff38 	bl	8007fc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	e000e400 	.word	0xe000e400
 8008168:	20000770 	.word	0x20000770
 800816c:	20000774 	.word	0x20000774
 8008170:	e000ed20 	.word	0xe000ed20
 8008174:	20000010 	.word	0x20000010
 8008178:	e000ef34 	.word	0xe000ef34

0800817c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	b672      	cpsid	i
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	b662      	cpsie	i
 8008196:	607b      	str	r3, [r7, #4]
}
 8008198:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800819a:	4b10      	ldr	r3, [pc, #64]	; (80081dc <vPortEnterCritical+0x60>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3301      	adds	r3, #1
 80081a0:	4a0e      	ldr	r2, [pc, #56]	; (80081dc <vPortEnterCritical+0x60>)
 80081a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081a4:	4b0d      	ldr	r3, [pc, #52]	; (80081dc <vPortEnterCritical+0x60>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d111      	bne.n	80081d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <vPortEnterCritical+0x64>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00c      	beq.n	80081d0 <vPortEnterCritical+0x54>
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	b672      	cpsid	i
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	b662      	cpsie	i
 80081ca:	603b      	str	r3, [r7, #0]
}
 80081cc:	bf00      	nop
 80081ce:	e7fe      	b.n	80081ce <vPortEnterCritical+0x52>
	}
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	20000010 	.word	0x20000010
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081ea:	4b13      	ldr	r3, [pc, #76]	; (8008238 <vPortExitCritical+0x54>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10c      	bne.n	800820c <vPortExitCritical+0x28>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	b672      	cpsid	i
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	b662      	cpsie	i
 8008206:	607b      	str	r3, [r7, #4]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <vPortExitCritical+0x54>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3b01      	subs	r3, #1
 8008212:	4a09      	ldr	r2, [pc, #36]	; (8008238 <vPortExitCritical+0x54>)
 8008214:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008216:	4b08      	ldr	r3, [pc, #32]	; (8008238 <vPortExitCritical+0x54>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <vPortExitCritical+0x46>
 800821e:	2300      	movs	r3, #0
 8008220:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	f383 8811 	msr	BASEPRI, r3
}
 8008228:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	20000010 	.word	0x20000010
 800823c:	00000000 	.word	0x00000000

08008240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008240:	f3ef 8009 	mrs	r0, PSP
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <pxCurrentTCBConst>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	f01e 0f10 	tst.w	lr, #16
 8008250:	bf08      	it	eq
 8008252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	6010      	str	r0, [r2, #0]
 800825c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008264:	b672      	cpsid	i
 8008266:	f380 8811 	msr	BASEPRI, r0
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	b662      	cpsie	i
 8008274:	f7ff f9ec 	bl	8007650 <vTaskSwitchContext>
 8008278:	f04f 0000 	mov.w	r0, #0
 800827c:	f380 8811 	msr	BASEPRI, r0
 8008280:	bc09      	pop	{r0, r3}
 8008282:	6819      	ldr	r1, [r3, #0]
 8008284:	6808      	ldr	r0, [r1, #0]
 8008286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828a:	f01e 0f10 	tst.w	lr, #16
 800828e:	bf08      	it	eq
 8008290:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008294:	f380 8809 	msr	PSP, r0
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <pxCurrentTCBConst>:
 80082a0:	20000644 	.word	0x20000644
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop

080082a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	b672      	cpsid	i
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	b662      	cpsie	i
 80082c2:	607b      	str	r3, [r7, #4]
}
 80082c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082c6:	f7ff f909 	bl	80074dc <xTaskIncrementTick>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <xPortSysTickHandler+0x44>)
 80082d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	2300      	movs	r3, #0
 80082da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f383 8811 	msr	BASEPRI, r3
}
 80082e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	e000ed04 	.word	0xe000ed04

080082f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082f0:	b480      	push	{r7}
 80082f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <vPortSetupTimerInterrupt+0x34>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082fa:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <vPortSetupTimerInterrupt+0x38>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008300:	4b0a      	ldr	r3, [pc, #40]	; (800832c <vPortSetupTimerInterrupt+0x3c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a0a      	ldr	r2, [pc, #40]	; (8008330 <vPortSetupTimerInterrupt+0x40>)
 8008306:	fba2 2303 	umull	r2, r3, r2, r3
 800830a:	099b      	lsrs	r3, r3, #6
 800830c:	4a09      	ldr	r2, [pc, #36]	; (8008334 <vPortSetupTimerInterrupt+0x44>)
 800830e:	3b01      	subs	r3, #1
 8008310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008312:	4b04      	ldr	r3, [pc, #16]	; (8008324 <vPortSetupTimerInterrupt+0x34>)
 8008314:	2207      	movs	r2, #7
 8008316:	601a      	str	r2, [r3, #0]
}
 8008318:	bf00      	nop
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	e000e010 	.word	0xe000e010
 8008328:	e000e018 	.word	0xe000e018
 800832c:	20000004 	.word	0x20000004
 8008330:	10624dd3 	.word	0x10624dd3
 8008334:	e000e014 	.word	0xe000e014

08008338 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008338:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008348 <vPortEnableVFP+0x10>
 800833c:	6801      	ldr	r1, [r0, #0]
 800833e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008342:	6001      	str	r1, [r0, #0]
 8008344:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008346:	bf00      	nop
 8008348:	e000ed88 	.word	0xe000ed88

0800834c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008352:	f3ef 8305 	mrs	r3, IPSR
 8008356:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b0f      	cmp	r3, #15
 800835c:	d916      	bls.n	800838c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800835e:	4a19      	ldr	r2, [pc, #100]	; (80083c4 <vPortValidateInterruptPriority+0x78>)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008368:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <vPortValidateInterruptPriority+0x7c>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	7afa      	ldrb	r2, [r7, #11]
 800836e:	429a      	cmp	r2, r3
 8008370:	d20c      	bcs.n	800838c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	b672      	cpsid	i
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	b662      	cpsie	i
 8008386:	607b      	str	r3, [r7, #4]
}
 8008388:	bf00      	nop
 800838a:	e7fe      	b.n	800838a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800838c:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <vPortValidateInterruptPriority+0x80>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008394:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <vPortValidateInterruptPriority+0x84>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d90c      	bls.n	80083b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	b672      	cpsid	i
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	b662      	cpsie	i
 80083b0:	603b      	str	r3, [r7, #0]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <vPortValidateInterruptPriority+0x68>
	}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	e000e3f0 	.word	0xe000e3f0
 80083c8:	20000770 	.word	0x20000770
 80083cc:	e000ed0c 	.word	0xe000ed0c
 80083d0:	20000774 	.word	0x20000774

080083d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	; 0x28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083dc:	2300      	movs	r3, #0
 80083de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083e0:	f7fe ffd0 	bl	8007384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083e4:	4b5b      	ldr	r3, [pc, #364]	; (8008554 <pvPortMalloc+0x180>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083ec:	f000 f91a 	bl	8008624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083f0:	4b59      	ldr	r3, [pc, #356]	; (8008558 <pvPortMalloc+0x184>)
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4013      	ands	r3, r2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f040 8092 	bne.w	8008522 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01f      	beq.n	8008444 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008404:	2208      	movs	r2, #8
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4413      	add	r3, r2
 800840a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f003 0307 	and.w	r3, r3, #7
 8008412:	2b00      	cmp	r3, #0
 8008414:	d016      	beq.n	8008444 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f023 0307 	bic.w	r3, r3, #7
 800841c:	3308      	adds	r3, #8
 800841e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00c      	beq.n	8008444 <pvPortMalloc+0x70>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	b672      	cpsid	i
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	b662      	cpsie	i
 800843e:	617b      	str	r3, [r7, #20]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d06b      	beq.n	8008522 <pvPortMalloc+0x14e>
 800844a:	4b44      	ldr	r3, [pc, #272]	; (800855c <pvPortMalloc+0x188>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d866      	bhi.n	8008522 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008454:	4b42      	ldr	r3, [pc, #264]	; (8008560 <pvPortMalloc+0x18c>)
 8008456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008458:	4b41      	ldr	r3, [pc, #260]	; (8008560 <pvPortMalloc+0x18c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800845e:	e004      	b.n	800846a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d903      	bls.n	800847c <pvPortMalloc+0xa8>
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f1      	bne.n	8008460 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800847c:	4b35      	ldr	r3, [pc, #212]	; (8008554 <pvPortMalloc+0x180>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	429a      	cmp	r2, r3
 8008484:	d04d      	beq.n	8008522 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2208      	movs	r2, #8
 800848c:	4413      	add	r3, r2
 800848e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	2308      	movs	r3, #8
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d921      	bls.n	80084ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00c      	beq.n	80084d4 <pvPortMalloc+0x100>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	b672      	cpsid	i
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	b662      	cpsie	i
 80084ce:	613b      	str	r3, [r7, #16]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	1ad2      	subs	r2, r2, r3
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084e6:	69b8      	ldr	r0, [r7, #24]
 80084e8:	f000 f8fe 	bl	80086e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <pvPortMalloc+0x188>)
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	4a19      	ldr	r2, [pc, #100]	; (800855c <pvPortMalloc+0x188>)
 80084f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084fa:	4b18      	ldr	r3, [pc, #96]	; (800855c <pvPortMalloc+0x188>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4b19      	ldr	r3, [pc, #100]	; (8008564 <pvPortMalloc+0x190>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d203      	bcs.n	800850e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008506:	4b15      	ldr	r3, [pc, #84]	; (800855c <pvPortMalloc+0x188>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a16      	ldr	r2, [pc, #88]	; (8008564 <pvPortMalloc+0x190>)
 800850c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	4b11      	ldr	r3, [pc, #68]	; (8008558 <pvPortMalloc+0x184>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	431a      	orrs	r2, r3
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008522:	f7fe ff3d 	bl	80073a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00c      	beq.n	800854a <pvPortMalloc+0x176>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	b672      	cpsid	i
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	b662      	cpsie	i
 8008544:	60fb      	str	r3, [r7, #12]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <pvPortMalloc+0x174>
	return pvReturn;
 800854a:	69fb      	ldr	r3, [r7, #28]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3728      	adds	r7, #40	; 0x28
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20004380 	.word	0x20004380
 8008558:	2000438c 	.word	0x2000438c
 800855c:	20004384 	.word	0x20004384
 8008560:	20004378 	.word	0x20004378
 8008564:	20004388 	.word	0x20004388

08008568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d04c      	beq.n	8008614 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800857a:	2308      	movs	r3, #8
 800857c:	425b      	negs	r3, r3
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	4413      	add	r3, r2
 8008582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	4b23      	ldr	r3, [pc, #140]	; (800861c <vPortFree+0xb4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4013      	ands	r3, r2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10c      	bne.n	80085b0 <vPortFree+0x48>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	b672      	cpsid	i
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	b662      	cpsie	i
 80085aa:	60fb      	str	r3, [r7, #12]
}
 80085ac:	bf00      	nop
 80085ae:	e7fe      	b.n	80085ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00c      	beq.n	80085d2 <vPortFree+0x6a>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	b672      	cpsid	i
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	b662      	cpsie	i
 80085cc:	60bb      	str	r3, [r7, #8]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	4b11      	ldr	r3, [pc, #68]	; (800861c <vPortFree+0xb4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4013      	ands	r3, r2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d019      	beq.n	8008614 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d115      	bne.n	8008614 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	4b0b      	ldr	r3, [pc, #44]	; (800861c <vPortFree+0xb4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	43db      	mvns	r3, r3
 80085f2:	401a      	ands	r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085f8:	f7fe fec4 	bl	8007384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	4b07      	ldr	r3, [pc, #28]	; (8008620 <vPortFree+0xb8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4413      	add	r3, r2
 8008606:	4a06      	ldr	r2, [pc, #24]	; (8008620 <vPortFree+0xb8>)
 8008608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800860a:	6938      	ldr	r0, [r7, #16]
 800860c:	f000 f86c 	bl	80086e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008610:	f7fe fec6 	bl	80073a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008614:	bf00      	nop
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	2000438c 	.word	0x2000438c
 8008620:	20004384 	.word	0x20004384

08008624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800862a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800862e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008630:	4b27      	ldr	r3, [pc, #156]	; (80086d0 <prvHeapInit+0xac>)
 8008632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00c      	beq.n	8008658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3307      	adds	r3, #7
 8008642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 0307 	bic.w	r3, r3, #7
 800864a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	4a1f      	ldr	r2, [pc, #124]	; (80086d0 <prvHeapInit+0xac>)
 8008654:	4413      	add	r3, r2
 8008656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800865c:	4a1d      	ldr	r2, [pc, #116]	; (80086d4 <prvHeapInit+0xb0>)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008662:	4b1c      	ldr	r3, [pc, #112]	; (80086d4 <prvHeapInit+0xb0>)
 8008664:	2200      	movs	r2, #0
 8008666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	4413      	add	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008670:	2208      	movs	r2, #8
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0307 	bic.w	r3, r3, #7
 800867e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4a15      	ldr	r2, [pc, #84]	; (80086d8 <prvHeapInit+0xb4>)
 8008684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008686:	4b14      	ldr	r3, [pc, #80]	; (80086d8 <prvHeapInit+0xb4>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2200      	movs	r2, #0
 800868c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800868e:	4b12      	ldr	r3, [pc, #72]	; (80086d8 <prvHeapInit+0xb4>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	1ad2      	subs	r2, r2, r3
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086a4:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <prvHeapInit+0xb4>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <prvHeapInit+0xb8>)
 80086b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	4a09      	ldr	r2, [pc, #36]	; (80086e0 <prvHeapInit+0xbc>)
 80086ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086bc:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <prvHeapInit+0xc0>)
 80086be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086c2:	601a      	str	r2, [r3, #0]
}
 80086c4:	bf00      	nop
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	20000778 	.word	0x20000778
 80086d4:	20004378 	.word	0x20004378
 80086d8:	20004380 	.word	0x20004380
 80086dc:	20004388 	.word	0x20004388
 80086e0:	20004384 	.word	0x20004384
 80086e4:	2000438c 	.word	0x2000438c

080086e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086f0:	4b28      	ldr	r3, [pc, #160]	; (8008794 <prvInsertBlockIntoFreeList+0xac>)
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e002      	b.n	80086fc <prvInsertBlockIntoFreeList+0x14>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	429a      	cmp	r2, r3
 8008704:	d8f7      	bhi.n	80086f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	4413      	add	r3, r2
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	429a      	cmp	r2, r3
 8008716:	d108      	bne.n	800872a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	441a      	add	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	441a      	add	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d118      	bne.n	8008770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	4b15      	ldr	r3, [pc, #84]	; (8008798 <prvInsertBlockIntoFreeList+0xb0>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d00d      	beq.n	8008766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	441a      	add	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	e008      	b.n	8008778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008766:	4b0c      	ldr	r3, [pc, #48]	; (8008798 <prvInsertBlockIntoFreeList+0xb0>)
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	e003      	b.n	8008778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	429a      	cmp	r2, r3
 800877e:	d002      	beq.n	8008786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008786:	bf00      	nop
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20004378 	.word	0x20004378
 8008798:	20004380 	.word	0x20004380

0800879c <__errno>:
 800879c:	4b01      	ldr	r3, [pc, #4]	; (80087a4 <__errno+0x8>)
 800879e:	6818      	ldr	r0, [r3, #0]
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	20000014 	.word	0x20000014

080087a8 <__libc_init_array>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	4d0d      	ldr	r5, [pc, #52]	; (80087e0 <__libc_init_array+0x38>)
 80087ac:	4c0d      	ldr	r4, [pc, #52]	; (80087e4 <__libc_init_array+0x3c>)
 80087ae:	1b64      	subs	r4, r4, r5
 80087b0:	10a4      	asrs	r4, r4, #2
 80087b2:	2600      	movs	r6, #0
 80087b4:	42a6      	cmp	r6, r4
 80087b6:	d109      	bne.n	80087cc <__libc_init_array+0x24>
 80087b8:	4d0b      	ldr	r5, [pc, #44]	; (80087e8 <__libc_init_array+0x40>)
 80087ba:	4c0c      	ldr	r4, [pc, #48]	; (80087ec <__libc_init_array+0x44>)
 80087bc:	f000 fca8 	bl	8009110 <_init>
 80087c0:	1b64      	subs	r4, r4, r5
 80087c2:	10a4      	asrs	r4, r4, #2
 80087c4:	2600      	movs	r6, #0
 80087c6:	42a6      	cmp	r6, r4
 80087c8:	d105      	bne.n	80087d6 <__libc_init_array+0x2e>
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d0:	4798      	blx	r3
 80087d2:	3601      	adds	r6, #1
 80087d4:	e7ee      	b.n	80087b4 <__libc_init_array+0xc>
 80087d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087da:	4798      	blx	r3
 80087dc:	3601      	adds	r6, #1
 80087de:	e7f2      	b.n	80087c6 <__libc_init_array+0x1e>
 80087e0:	08009210 	.word	0x08009210
 80087e4:	08009210 	.word	0x08009210
 80087e8:	08009210 	.word	0x08009210
 80087ec:	08009214 	.word	0x08009214

080087f0 <memcpy>:
 80087f0:	440a      	add	r2, r1
 80087f2:	4291      	cmp	r1, r2
 80087f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087f8:	d100      	bne.n	80087fc <memcpy+0xc>
 80087fa:	4770      	bx	lr
 80087fc:	b510      	push	{r4, lr}
 80087fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008806:	4291      	cmp	r1, r2
 8008808:	d1f9      	bne.n	80087fe <memcpy+0xe>
 800880a:	bd10      	pop	{r4, pc}

0800880c <memset>:
 800880c:	4402      	add	r2, r0
 800880e:	4603      	mov	r3, r0
 8008810:	4293      	cmp	r3, r2
 8008812:	d100      	bne.n	8008816 <memset+0xa>
 8008814:	4770      	bx	lr
 8008816:	f803 1b01 	strb.w	r1, [r3], #1
 800881a:	e7f9      	b.n	8008810 <memset+0x4>

0800881c <_vsniprintf_r>:
 800881c:	b530      	push	{r4, r5, lr}
 800881e:	4614      	mov	r4, r2
 8008820:	2c00      	cmp	r4, #0
 8008822:	b09b      	sub	sp, #108	; 0x6c
 8008824:	4605      	mov	r5, r0
 8008826:	461a      	mov	r2, r3
 8008828:	da05      	bge.n	8008836 <_vsniprintf_r+0x1a>
 800882a:	238b      	movs	r3, #139	; 0x8b
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	b01b      	add	sp, #108	; 0x6c
 8008834:	bd30      	pop	{r4, r5, pc}
 8008836:	f44f 7302 	mov.w	r3, #520	; 0x208
 800883a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800883e:	bf14      	ite	ne
 8008840:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008844:	4623      	moveq	r3, r4
 8008846:	9302      	str	r3, [sp, #8]
 8008848:	9305      	str	r3, [sp, #20]
 800884a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800884e:	9100      	str	r1, [sp, #0]
 8008850:	9104      	str	r1, [sp, #16]
 8008852:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008856:	4669      	mov	r1, sp
 8008858:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800885a:	f000 f875 	bl	8008948 <_svfiprintf_r>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	bfbc      	itt	lt
 8008862:	238b      	movlt	r3, #139	; 0x8b
 8008864:	602b      	strlt	r3, [r5, #0]
 8008866:	2c00      	cmp	r4, #0
 8008868:	d0e3      	beq.n	8008832 <_vsniprintf_r+0x16>
 800886a:	9b00      	ldr	r3, [sp, #0]
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	e7df      	b.n	8008832 <_vsniprintf_r+0x16>
	...

08008874 <vsniprintf>:
 8008874:	b507      	push	{r0, r1, r2, lr}
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	4613      	mov	r3, r2
 800887a:	460a      	mov	r2, r1
 800887c:	4601      	mov	r1, r0
 800887e:	4803      	ldr	r0, [pc, #12]	; (800888c <vsniprintf+0x18>)
 8008880:	6800      	ldr	r0, [r0, #0]
 8008882:	f7ff ffcb 	bl	800881c <_vsniprintf_r>
 8008886:	b003      	add	sp, #12
 8008888:	f85d fb04 	ldr.w	pc, [sp], #4
 800888c:	20000014 	.word	0x20000014

08008890 <__ssputs_r>:
 8008890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008894:	688e      	ldr	r6, [r1, #8]
 8008896:	429e      	cmp	r6, r3
 8008898:	4682      	mov	sl, r0
 800889a:	460c      	mov	r4, r1
 800889c:	4690      	mov	r8, r2
 800889e:	461f      	mov	r7, r3
 80088a0:	d838      	bhi.n	8008914 <__ssputs_r+0x84>
 80088a2:	898a      	ldrh	r2, [r1, #12]
 80088a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088a8:	d032      	beq.n	8008910 <__ssputs_r+0x80>
 80088aa:	6825      	ldr	r5, [r4, #0]
 80088ac:	6909      	ldr	r1, [r1, #16]
 80088ae:	eba5 0901 	sub.w	r9, r5, r1
 80088b2:	6965      	ldr	r5, [r4, #20]
 80088b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088bc:	3301      	adds	r3, #1
 80088be:	444b      	add	r3, r9
 80088c0:	106d      	asrs	r5, r5, #1
 80088c2:	429d      	cmp	r5, r3
 80088c4:	bf38      	it	cc
 80088c6:	461d      	movcc	r5, r3
 80088c8:	0553      	lsls	r3, r2, #21
 80088ca:	d531      	bpl.n	8008930 <__ssputs_r+0xa0>
 80088cc:	4629      	mov	r1, r5
 80088ce:	f000 fb55 	bl	8008f7c <_malloc_r>
 80088d2:	4606      	mov	r6, r0
 80088d4:	b950      	cbnz	r0, 80088ec <__ssputs_r+0x5c>
 80088d6:	230c      	movs	r3, #12
 80088d8:	f8ca 3000 	str.w	r3, [sl]
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ec:	6921      	ldr	r1, [r4, #16]
 80088ee:	464a      	mov	r2, r9
 80088f0:	f7ff ff7e 	bl	80087f0 <memcpy>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	6126      	str	r6, [r4, #16]
 8008902:	6165      	str	r5, [r4, #20]
 8008904:	444e      	add	r6, r9
 8008906:	eba5 0509 	sub.w	r5, r5, r9
 800890a:	6026      	str	r6, [r4, #0]
 800890c:	60a5      	str	r5, [r4, #8]
 800890e:	463e      	mov	r6, r7
 8008910:	42be      	cmp	r6, r7
 8008912:	d900      	bls.n	8008916 <__ssputs_r+0x86>
 8008914:	463e      	mov	r6, r7
 8008916:	6820      	ldr	r0, [r4, #0]
 8008918:	4632      	mov	r2, r6
 800891a:	4641      	mov	r1, r8
 800891c:	f000 faa8 	bl	8008e70 <memmove>
 8008920:	68a3      	ldr	r3, [r4, #8]
 8008922:	1b9b      	subs	r3, r3, r6
 8008924:	60a3      	str	r3, [r4, #8]
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	4433      	add	r3, r6
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	2000      	movs	r0, #0
 800892e:	e7db      	b.n	80088e8 <__ssputs_r+0x58>
 8008930:	462a      	mov	r2, r5
 8008932:	f000 fb97 	bl	8009064 <_realloc_r>
 8008936:	4606      	mov	r6, r0
 8008938:	2800      	cmp	r0, #0
 800893a:	d1e1      	bne.n	8008900 <__ssputs_r+0x70>
 800893c:	6921      	ldr	r1, [r4, #16]
 800893e:	4650      	mov	r0, sl
 8008940:	f000 fab0 	bl	8008ea4 <_free_r>
 8008944:	e7c7      	b.n	80088d6 <__ssputs_r+0x46>
	...

08008948 <_svfiprintf_r>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	4698      	mov	r8, r3
 800894e:	898b      	ldrh	r3, [r1, #12]
 8008950:	061b      	lsls	r3, r3, #24
 8008952:	b09d      	sub	sp, #116	; 0x74
 8008954:	4607      	mov	r7, r0
 8008956:	460d      	mov	r5, r1
 8008958:	4614      	mov	r4, r2
 800895a:	d50e      	bpl.n	800897a <_svfiprintf_r+0x32>
 800895c:	690b      	ldr	r3, [r1, #16]
 800895e:	b963      	cbnz	r3, 800897a <_svfiprintf_r+0x32>
 8008960:	2140      	movs	r1, #64	; 0x40
 8008962:	f000 fb0b 	bl	8008f7c <_malloc_r>
 8008966:	6028      	str	r0, [r5, #0]
 8008968:	6128      	str	r0, [r5, #16]
 800896a:	b920      	cbnz	r0, 8008976 <_svfiprintf_r+0x2e>
 800896c:	230c      	movs	r3, #12
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	e0d1      	b.n	8008b1a <_svfiprintf_r+0x1d2>
 8008976:	2340      	movs	r3, #64	; 0x40
 8008978:	616b      	str	r3, [r5, #20]
 800897a:	2300      	movs	r3, #0
 800897c:	9309      	str	r3, [sp, #36]	; 0x24
 800897e:	2320      	movs	r3, #32
 8008980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008984:	f8cd 800c 	str.w	r8, [sp, #12]
 8008988:	2330      	movs	r3, #48	; 0x30
 800898a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b34 <_svfiprintf_r+0x1ec>
 800898e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008992:	f04f 0901 	mov.w	r9, #1
 8008996:	4623      	mov	r3, r4
 8008998:	469a      	mov	sl, r3
 800899a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800899e:	b10a      	cbz	r2, 80089a4 <_svfiprintf_r+0x5c>
 80089a0:	2a25      	cmp	r2, #37	; 0x25
 80089a2:	d1f9      	bne.n	8008998 <_svfiprintf_r+0x50>
 80089a4:	ebba 0b04 	subs.w	fp, sl, r4
 80089a8:	d00b      	beq.n	80089c2 <_svfiprintf_r+0x7a>
 80089aa:	465b      	mov	r3, fp
 80089ac:	4622      	mov	r2, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7ff ff6d 	bl	8008890 <__ssputs_r>
 80089b6:	3001      	adds	r0, #1
 80089b8:	f000 80aa 	beq.w	8008b10 <_svfiprintf_r+0x1c8>
 80089bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089be:	445a      	add	r2, fp
 80089c0:	9209      	str	r2, [sp, #36]	; 0x24
 80089c2:	f89a 3000 	ldrb.w	r3, [sl]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 80a2 	beq.w	8008b10 <_svfiprintf_r+0x1c8>
 80089cc:	2300      	movs	r3, #0
 80089ce:	f04f 32ff 	mov.w	r2, #4294967295
 80089d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089d6:	f10a 0a01 	add.w	sl, sl, #1
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	9307      	str	r3, [sp, #28]
 80089de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089e2:	931a      	str	r3, [sp, #104]	; 0x68
 80089e4:	4654      	mov	r4, sl
 80089e6:	2205      	movs	r2, #5
 80089e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ec:	4851      	ldr	r0, [pc, #324]	; (8008b34 <_svfiprintf_r+0x1ec>)
 80089ee:	f7f7 fc2f 	bl	8000250 <memchr>
 80089f2:	9a04      	ldr	r2, [sp, #16]
 80089f4:	b9d8      	cbnz	r0, 8008a2e <_svfiprintf_r+0xe6>
 80089f6:	06d0      	lsls	r0, r2, #27
 80089f8:	bf44      	itt	mi
 80089fa:	2320      	movmi	r3, #32
 80089fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a00:	0711      	lsls	r1, r2, #28
 8008a02:	bf44      	itt	mi
 8008a04:	232b      	movmi	r3, #43	; 0x2b
 8008a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a10:	d015      	beq.n	8008a3e <_svfiprintf_r+0xf6>
 8008a12:	9a07      	ldr	r2, [sp, #28]
 8008a14:	4654      	mov	r4, sl
 8008a16:	2000      	movs	r0, #0
 8008a18:	f04f 0c0a 	mov.w	ip, #10
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a22:	3b30      	subs	r3, #48	; 0x30
 8008a24:	2b09      	cmp	r3, #9
 8008a26:	d94e      	bls.n	8008ac6 <_svfiprintf_r+0x17e>
 8008a28:	b1b0      	cbz	r0, 8008a58 <_svfiprintf_r+0x110>
 8008a2a:	9207      	str	r2, [sp, #28]
 8008a2c:	e014      	b.n	8008a58 <_svfiprintf_r+0x110>
 8008a2e:	eba0 0308 	sub.w	r3, r0, r8
 8008a32:	fa09 f303 	lsl.w	r3, r9, r3
 8008a36:	4313      	orrs	r3, r2
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	46a2      	mov	sl, r4
 8008a3c:	e7d2      	b.n	80089e4 <_svfiprintf_r+0x9c>
 8008a3e:	9b03      	ldr	r3, [sp, #12]
 8008a40:	1d19      	adds	r1, r3, #4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	9103      	str	r1, [sp, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	bfbb      	ittet	lt
 8008a4a:	425b      	neglt	r3, r3
 8008a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a50:	9307      	strge	r3, [sp, #28]
 8008a52:	9307      	strlt	r3, [sp, #28]
 8008a54:	bfb8      	it	lt
 8008a56:	9204      	strlt	r2, [sp, #16]
 8008a58:	7823      	ldrb	r3, [r4, #0]
 8008a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a5c:	d10c      	bne.n	8008a78 <_svfiprintf_r+0x130>
 8008a5e:	7863      	ldrb	r3, [r4, #1]
 8008a60:	2b2a      	cmp	r3, #42	; 0x2a
 8008a62:	d135      	bne.n	8008ad0 <_svfiprintf_r+0x188>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	1d1a      	adds	r2, r3, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	9203      	str	r2, [sp, #12]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bfb8      	it	lt
 8008a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a74:	3402      	adds	r4, #2
 8008a76:	9305      	str	r3, [sp, #20]
 8008a78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b44 <_svfiprintf_r+0x1fc>
 8008a7c:	7821      	ldrb	r1, [r4, #0]
 8008a7e:	2203      	movs	r2, #3
 8008a80:	4650      	mov	r0, sl
 8008a82:	f7f7 fbe5 	bl	8000250 <memchr>
 8008a86:	b140      	cbz	r0, 8008a9a <_svfiprintf_r+0x152>
 8008a88:	2340      	movs	r3, #64	; 0x40
 8008a8a:	eba0 000a 	sub.w	r0, r0, sl
 8008a8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a92:	9b04      	ldr	r3, [sp, #16]
 8008a94:	4303      	orrs	r3, r0
 8008a96:	3401      	adds	r4, #1
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a9e:	4826      	ldr	r0, [pc, #152]	; (8008b38 <_svfiprintf_r+0x1f0>)
 8008aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aa4:	2206      	movs	r2, #6
 8008aa6:	f7f7 fbd3 	bl	8000250 <memchr>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d038      	beq.n	8008b20 <_svfiprintf_r+0x1d8>
 8008aae:	4b23      	ldr	r3, [pc, #140]	; (8008b3c <_svfiprintf_r+0x1f4>)
 8008ab0:	bb1b      	cbnz	r3, 8008afa <_svfiprintf_r+0x1b2>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	3307      	adds	r3, #7
 8008ab6:	f023 0307 	bic.w	r3, r3, #7
 8008aba:	3308      	adds	r3, #8
 8008abc:	9303      	str	r3, [sp, #12]
 8008abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac0:	4433      	add	r3, r6
 8008ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac4:	e767      	b.n	8008996 <_svfiprintf_r+0x4e>
 8008ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aca:	460c      	mov	r4, r1
 8008acc:	2001      	movs	r0, #1
 8008ace:	e7a5      	b.n	8008a1c <_svfiprintf_r+0xd4>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	3401      	adds	r4, #1
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	f04f 0c0a 	mov.w	ip, #10
 8008adc:	4620      	mov	r0, r4
 8008ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ae2:	3a30      	subs	r2, #48	; 0x30
 8008ae4:	2a09      	cmp	r2, #9
 8008ae6:	d903      	bls.n	8008af0 <_svfiprintf_r+0x1a8>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0c5      	beq.n	8008a78 <_svfiprintf_r+0x130>
 8008aec:	9105      	str	r1, [sp, #20]
 8008aee:	e7c3      	b.n	8008a78 <_svfiprintf_r+0x130>
 8008af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008af4:	4604      	mov	r4, r0
 8008af6:	2301      	movs	r3, #1
 8008af8:	e7f0      	b.n	8008adc <_svfiprintf_r+0x194>
 8008afa:	ab03      	add	r3, sp, #12
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	462a      	mov	r2, r5
 8008b00:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <_svfiprintf_r+0x1f8>)
 8008b02:	a904      	add	r1, sp, #16
 8008b04:	4638      	mov	r0, r7
 8008b06:	f3af 8000 	nop.w
 8008b0a:	1c42      	adds	r2, r0, #1
 8008b0c:	4606      	mov	r6, r0
 8008b0e:	d1d6      	bne.n	8008abe <_svfiprintf_r+0x176>
 8008b10:	89ab      	ldrh	r3, [r5, #12]
 8008b12:	065b      	lsls	r3, r3, #25
 8008b14:	f53f af2c 	bmi.w	8008970 <_svfiprintf_r+0x28>
 8008b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b1a:	b01d      	add	sp, #116	; 0x74
 8008b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b20:	ab03      	add	r3, sp, #12
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	462a      	mov	r2, r5
 8008b26:	4b06      	ldr	r3, [pc, #24]	; (8008b40 <_svfiprintf_r+0x1f8>)
 8008b28:	a904      	add	r1, sp, #16
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	f000 f87a 	bl	8008c24 <_printf_i>
 8008b30:	e7eb      	b.n	8008b0a <_svfiprintf_r+0x1c2>
 8008b32:	bf00      	nop
 8008b34:	080091d4 	.word	0x080091d4
 8008b38:	080091de 	.word	0x080091de
 8008b3c:	00000000 	.word	0x00000000
 8008b40:	08008891 	.word	0x08008891
 8008b44:	080091da 	.word	0x080091da

08008b48 <_printf_common>:
 8008b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	4699      	mov	r9, r3
 8008b50:	688a      	ldr	r2, [r1, #8]
 8008b52:	690b      	ldr	r3, [r1, #16]
 8008b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	bfb8      	it	lt
 8008b5c:	4613      	movlt	r3, r2
 8008b5e:	6033      	str	r3, [r6, #0]
 8008b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b64:	4607      	mov	r7, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	b10a      	cbz	r2, 8008b6e <_printf_common+0x26>
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	6033      	str	r3, [r6, #0]
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	0699      	lsls	r1, r3, #26
 8008b72:	bf42      	ittt	mi
 8008b74:	6833      	ldrmi	r3, [r6, #0]
 8008b76:	3302      	addmi	r3, #2
 8008b78:	6033      	strmi	r3, [r6, #0]
 8008b7a:	6825      	ldr	r5, [r4, #0]
 8008b7c:	f015 0506 	ands.w	r5, r5, #6
 8008b80:	d106      	bne.n	8008b90 <_printf_common+0x48>
 8008b82:	f104 0a19 	add.w	sl, r4, #25
 8008b86:	68e3      	ldr	r3, [r4, #12]
 8008b88:	6832      	ldr	r2, [r6, #0]
 8008b8a:	1a9b      	subs	r3, r3, r2
 8008b8c:	42ab      	cmp	r3, r5
 8008b8e:	dc26      	bgt.n	8008bde <_printf_common+0x96>
 8008b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b94:	1e13      	subs	r3, r2, #0
 8008b96:	6822      	ldr	r2, [r4, #0]
 8008b98:	bf18      	it	ne
 8008b9a:	2301      	movne	r3, #1
 8008b9c:	0692      	lsls	r2, r2, #26
 8008b9e:	d42b      	bmi.n	8008bf8 <_printf_common+0xb0>
 8008ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	47c0      	blx	r8
 8008baa:	3001      	adds	r0, #1
 8008bac:	d01e      	beq.n	8008bec <_printf_common+0xa4>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	68e5      	ldr	r5, [r4, #12]
 8008bb2:	6832      	ldr	r2, [r6, #0]
 8008bb4:	f003 0306 	and.w	r3, r3, #6
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	bf08      	it	eq
 8008bbc:	1aad      	subeq	r5, r5, r2
 8008bbe:	68a3      	ldr	r3, [r4, #8]
 8008bc0:	6922      	ldr	r2, [r4, #16]
 8008bc2:	bf0c      	ite	eq
 8008bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bc8:	2500      	movne	r5, #0
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	bfc4      	itt	gt
 8008bce:	1a9b      	subgt	r3, r3, r2
 8008bd0:	18ed      	addgt	r5, r5, r3
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	341a      	adds	r4, #26
 8008bd6:	42b5      	cmp	r5, r6
 8008bd8:	d11a      	bne.n	8008c10 <_printf_common+0xc8>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	e008      	b.n	8008bf0 <_printf_common+0xa8>
 8008bde:	2301      	movs	r3, #1
 8008be0:	4652      	mov	r2, sl
 8008be2:	4649      	mov	r1, r9
 8008be4:	4638      	mov	r0, r7
 8008be6:	47c0      	blx	r8
 8008be8:	3001      	adds	r0, #1
 8008bea:	d103      	bne.n	8008bf4 <_printf_common+0xac>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf4:	3501      	adds	r5, #1
 8008bf6:	e7c6      	b.n	8008b86 <_printf_common+0x3e>
 8008bf8:	18e1      	adds	r1, r4, r3
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	2030      	movs	r0, #48	; 0x30
 8008bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c02:	4422      	add	r2, r4
 8008c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	e7c7      	b.n	8008ba0 <_printf_common+0x58>
 8008c10:	2301      	movs	r3, #1
 8008c12:	4622      	mov	r2, r4
 8008c14:	4649      	mov	r1, r9
 8008c16:	4638      	mov	r0, r7
 8008c18:	47c0      	blx	r8
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	d0e6      	beq.n	8008bec <_printf_common+0xa4>
 8008c1e:	3601      	adds	r6, #1
 8008c20:	e7d9      	b.n	8008bd6 <_printf_common+0x8e>
	...

08008c24 <_printf_i>:
 8008c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c28:	7e0f      	ldrb	r7, [r1, #24]
 8008c2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c2c:	2f78      	cmp	r7, #120	; 0x78
 8008c2e:	4691      	mov	r9, r2
 8008c30:	4680      	mov	r8, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	469a      	mov	sl, r3
 8008c36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c3a:	d807      	bhi.n	8008c4c <_printf_i+0x28>
 8008c3c:	2f62      	cmp	r7, #98	; 0x62
 8008c3e:	d80a      	bhi.n	8008c56 <_printf_i+0x32>
 8008c40:	2f00      	cmp	r7, #0
 8008c42:	f000 80d8 	beq.w	8008df6 <_printf_i+0x1d2>
 8008c46:	2f58      	cmp	r7, #88	; 0x58
 8008c48:	f000 80a3 	beq.w	8008d92 <_printf_i+0x16e>
 8008c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c54:	e03a      	b.n	8008ccc <_printf_i+0xa8>
 8008c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c5a:	2b15      	cmp	r3, #21
 8008c5c:	d8f6      	bhi.n	8008c4c <_printf_i+0x28>
 8008c5e:	a101      	add	r1, pc, #4	; (adr r1, 8008c64 <_printf_i+0x40>)
 8008c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c64:	08008cbd 	.word	0x08008cbd
 8008c68:	08008cd1 	.word	0x08008cd1
 8008c6c:	08008c4d 	.word	0x08008c4d
 8008c70:	08008c4d 	.word	0x08008c4d
 8008c74:	08008c4d 	.word	0x08008c4d
 8008c78:	08008c4d 	.word	0x08008c4d
 8008c7c:	08008cd1 	.word	0x08008cd1
 8008c80:	08008c4d 	.word	0x08008c4d
 8008c84:	08008c4d 	.word	0x08008c4d
 8008c88:	08008c4d 	.word	0x08008c4d
 8008c8c:	08008c4d 	.word	0x08008c4d
 8008c90:	08008ddd 	.word	0x08008ddd
 8008c94:	08008d01 	.word	0x08008d01
 8008c98:	08008dbf 	.word	0x08008dbf
 8008c9c:	08008c4d 	.word	0x08008c4d
 8008ca0:	08008c4d 	.word	0x08008c4d
 8008ca4:	08008dff 	.word	0x08008dff
 8008ca8:	08008c4d 	.word	0x08008c4d
 8008cac:	08008d01 	.word	0x08008d01
 8008cb0:	08008c4d 	.word	0x08008c4d
 8008cb4:	08008c4d 	.word	0x08008c4d
 8008cb8:	08008dc7 	.word	0x08008dc7
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	1d1a      	adds	r2, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	602a      	str	r2, [r5, #0]
 8008cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e0a3      	b.n	8008e18 <_printf_i+0x1f4>
 8008cd0:	6820      	ldr	r0, [r4, #0]
 8008cd2:	6829      	ldr	r1, [r5, #0]
 8008cd4:	0606      	lsls	r6, r0, #24
 8008cd6:	f101 0304 	add.w	r3, r1, #4
 8008cda:	d50a      	bpl.n	8008cf2 <_printf_i+0xce>
 8008cdc:	680e      	ldr	r6, [r1, #0]
 8008cde:	602b      	str	r3, [r5, #0]
 8008ce0:	2e00      	cmp	r6, #0
 8008ce2:	da03      	bge.n	8008cec <_printf_i+0xc8>
 8008ce4:	232d      	movs	r3, #45	; 0x2d
 8008ce6:	4276      	negs	r6, r6
 8008ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cec:	485e      	ldr	r0, [pc, #376]	; (8008e68 <_printf_i+0x244>)
 8008cee:	230a      	movs	r3, #10
 8008cf0:	e019      	b.n	8008d26 <_printf_i+0x102>
 8008cf2:	680e      	ldr	r6, [r1, #0]
 8008cf4:	602b      	str	r3, [r5, #0]
 8008cf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cfa:	bf18      	it	ne
 8008cfc:	b236      	sxthne	r6, r6
 8008cfe:	e7ef      	b.n	8008ce0 <_printf_i+0xbc>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	6820      	ldr	r0, [r4, #0]
 8008d04:	1d19      	adds	r1, r3, #4
 8008d06:	6029      	str	r1, [r5, #0]
 8008d08:	0601      	lsls	r1, r0, #24
 8008d0a:	d501      	bpl.n	8008d10 <_printf_i+0xec>
 8008d0c:	681e      	ldr	r6, [r3, #0]
 8008d0e:	e002      	b.n	8008d16 <_printf_i+0xf2>
 8008d10:	0646      	lsls	r6, r0, #25
 8008d12:	d5fb      	bpl.n	8008d0c <_printf_i+0xe8>
 8008d14:	881e      	ldrh	r6, [r3, #0]
 8008d16:	4854      	ldr	r0, [pc, #336]	; (8008e68 <_printf_i+0x244>)
 8008d18:	2f6f      	cmp	r7, #111	; 0x6f
 8008d1a:	bf0c      	ite	eq
 8008d1c:	2308      	moveq	r3, #8
 8008d1e:	230a      	movne	r3, #10
 8008d20:	2100      	movs	r1, #0
 8008d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d26:	6865      	ldr	r5, [r4, #4]
 8008d28:	60a5      	str	r5, [r4, #8]
 8008d2a:	2d00      	cmp	r5, #0
 8008d2c:	bfa2      	ittt	ge
 8008d2e:	6821      	ldrge	r1, [r4, #0]
 8008d30:	f021 0104 	bicge.w	r1, r1, #4
 8008d34:	6021      	strge	r1, [r4, #0]
 8008d36:	b90e      	cbnz	r6, 8008d3c <_printf_i+0x118>
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	d04d      	beq.n	8008dd8 <_printf_i+0x1b4>
 8008d3c:	4615      	mov	r5, r2
 8008d3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d42:	fb03 6711 	mls	r7, r3, r1, r6
 8008d46:	5dc7      	ldrb	r7, [r0, r7]
 8008d48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d4c:	4637      	mov	r7, r6
 8008d4e:	42bb      	cmp	r3, r7
 8008d50:	460e      	mov	r6, r1
 8008d52:	d9f4      	bls.n	8008d3e <_printf_i+0x11a>
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d10b      	bne.n	8008d70 <_printf_i+0x14c>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	07de      	lsls	r6, r3, #31
 8008d5c:	d508      	bpl.n	8008d70 <_printf_i+0x14c>
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	6861      	ldr	r1, [r4, #4]
 8008d62:	4299      	cmp	r1, r3
 8008d64:	bfde      	ittt	le
 8008d66:	2330      	movle	r3, #48	; 0x30
 8008d68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d70:	1b52      	subs	r2, r2, r5
 8008d72:	6122      	str	r2, [r4, #16]
 8008d74:	f8cd a000 	str.w	sl, [sp]
 8008d78:	464b      	mov	r3, r9
 8008d7a:	aa03      	add	r2, sp, #12
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4640      	mov	r0, r8
 8008d80:	f7ff fee2 	bl	8008b48 <_printf_common>
 8008d84:	3001      	adds	r0, #1
 8008d86:	d14c      	bne.n	8008e22 <_printf_i+0x1fe>
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8c:	b004      	add	sp, #16
 8008d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d92:	4835      	ldr	r0, [pc, #212]	; (8008e68 <_printf_i+0x244>)
 8008d94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d98:	6829      	ldr	r1, [r5, #0]
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008da0:	6029      	str	r1, [r5, #0]
 8008da2:	061d      	lsls	r5, r3, #24
 8008da4:	d514      	bpl.n	8008dd0 <_printf_i+0x1ac>
 8008da6:	07df      	lsls	r7, r3, #31
 8008da8:	bf44      	itt	mi
 8008daa:	f043 0320 	orrmi.w	r3, r3, #32
 8008dae:	6023      	strmi	r3, [r4, #0]
 8008db0:	b91e      	cbnz	r6, 8008dba <_printf_i+0x196>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	f023 0320 	bic.w	r3, r3, #32
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	2310      	movs	r3, #16
 8008dbc:	e7b0      	b.n	8008d20 <_printf_i+0xfc>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	f043 0320 	orr.w	r3, r3, #32
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	2378      	movs	r3, #120	; 0x78
 8008dc8:	4828      	ldr	r0, [pc, #160]	; (8008e6c <_printf_i+0x248>)
 8008dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dce:	e7e3      	b.n	8008d98 <_printf_i+0x174>
 8008dd0:	0659      	lsls	r1, r3, #25
 8008dd2:	bf48      	it	mi
 8008dd4:	b2b6      	uxthmi	r6, r6
 8008dd6:	e7e6      	b.n	8008da6 <_printf_i+0x182>
 8008dd8:	4615      	mov	r5, r2
 8008dda:	e7bb      	b.n	8008d54 <_printf_i+0x130>
 8008ddc:	682b      	ldr	r3, [r5, #0]
 8008dde:	6826      	ldr	r6, [r4, #0]
 8008de0:	6961      	ldr	r1, [r4, #20]
 8008de2:	1d18      	adds	r0, r3, #4
 8008de4:	6028      	str	r0, [r5, #0]
 8008de6:	0635      	lsls	r5, r6, #24
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	d501      	bpl.n	8008df0 <_printf_i+0x1cc>
 8008dec:	6019      	str	r1, [r3, #0]
 8008dee:	e002      	b.n	8008df6 <_printf_i+0x1d2>
 8008df0:	0670      	lsls	r0, r6, #25
 8008df2:	d5fb      	bpl.n	8008dec <_printf_i+0x1c8>
 8008df4:	8019      	strh	r1, [r3, #0]
 8008df6:	2300      	movs	r3, #0
 8008df8:	6123      	str	r3, [r4, #16]
 8008dfa:	4615      	mov	r5, r2
 8008dfc:	e7ba      	b.n	8008d74 <_printf_i+0x150>
 8008dfe:	682b      	ldr	r3, [r5, #0]
 8008e00:	1d1a      	adds	r2, r3, #4
 8008e02:	602a      	str	r2, [r5, #0]
 8008e04:	681d      	ldr	r5, [r3, #0]
 8008e06:	6862      	ldr	r2, [r4, #4]
 8008e08:	2100      	movs	r1, #0
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f7f7 fa20 	bl	8000250 <memchr>
 8008e10:	b108      	cbz	r0, 8008e16 <_printf_i+0x1f2>
 8008e12:	1b40      	subs	r0, r0, r5
 8008e14:	6060      	str	r0, [r4, #4]
 8008e16:	6863      	ldr	r3, [r4, #4]
 8008e18:	6123      	str	r3, [r4, #16]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e20:	e7a8      	b.n	8008d74 <_printf_i+0x150>
 8008e22:	6923      	ldr	r3, [r4, #16]
 8008e24:	462a      	mov	r2, r5
 8008e26:	4649      	mov	r1, r9
 8008e28:	4640      	mov	r0, r8
 8008e2a:	47d0      	blx	sl
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d0ab      	beq.n	8008d88 <_printf_i+0x164>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	079b      	lsls	r3, r3, #30
 8008e34:	d413      	bmi.n	8008e5e <_printf_i+0x23a>
 8008e36:	68e0      	ldr	r0, [r4, #12]
 8008e38:	9b03      	ldr	r3, [sp, #12]
 8008e3a:	4298      	cmp	r0, r3
 8008e3c:	bfb8      	it	lt
 8008e3e:	4618      	movlt	r0, r3
 8008e40:	e7a4      	b.n	8008d8c <_printf_i+0x168>
 8008e42:	2301      	movs	r3, #1
 8008e44:	4632      	mov	r2, r6
 8008e46:	4649      	mov	r1, r9
 8008e48:	4640      	mov	r0, r8
 8008e4a:	47d0      	blx	sl
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d09b      	beq.n	8008d88 <_printf_i+0x164>
 8008e50:	3501      	adds	r5, #1
 8008e52:	68e3      	ldr	r3, [r4, #12]
 8008e54:	9903      	ldr	r1, [sp, #12]
 8008e56:	1a5b      	subs	r3, r3, r1
 8008e58:	42ab      	cmp	r3, r5
 8008e5a:	dcf2      	bgt.n	8008e42 <_printf_i+0x21e>
 8008e5c:	e7eb      	b.n	8008e36 <_printf_i+0x212>
 8008e5e:	2500      	movs	r5, #0
 8008e60:	f104 0619 	add.w	r6, r4, #25
 8008e64:	e7f5      	b.n	8008e52 <_printf_i+0x22e>
 8008e66:	bf00      	nop
 8008e68:	080091e5 	.word	0x080091e5
 8008e6c:	080091f6 	.word	0x080091f6

08008e70 <memmove>:
 8008e70:	4288      	cmp	r0, r1
 8008e72:	b510      	push	{r4, lr}
 8008e74:	eb01 0402 	add.w	r4, r1, r2
 8008e78:	d902      	bls.n	8008e80 <memmove+0x10>
 8008e7a:	4284      	cmp	r4, r0
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	d807      	bhi.n	8008e90 <memmove+0x20>
 8008e80:	1e43      	subs	r3, r0, #1
 8008e82:	42a1      	cmp	r1, r4
 8008e84:	d008      	beq.n	8008e98 <memmove+0x28>
 8008e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e8e:	e7f8      	b.n	8008e82 <memmove+0x12>
 8008e90:	4402      	add	r2, r0
 8008e92:	4601      	mov	r1, r0
 8008e94:	428a      	cmp	r2, r1
 8008e96:	d100      	bne.n	8008e9a <memmove+0x2a>
 8008e98:	bd10      	pop	{r4, pc}
 8008e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ea2:	e7f7      	b.n	8008e94 <memmove+0x24>

08008ea4 <_free_r>:
 8008ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	d044      	beq.n	8008f34 <_free_r+0x90>
 8008eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eae:	9001      	str	r0, [sp, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8008eb6:	bfb8      	it	lt
 8008eb8:	18e4      	addlt	r4, r4, r3
 8008eba:	f000 f913 	bl	80090e4 <__malloc_lock>
 8008ebe:	4a1e      	ldr	r2, [pc, #120]	; (8008f38 <_free_r+0x94>)
 8008ec0:	9801      	ldr	r0, [sp, #4]
 8008ec2:	6813      	ldr	r3, [r2, #0]
 8008ec4:	b933      	cbnz	r3, 8008ed4 <_free_r+0x30>
 8008ec6:	6063      	str	r3, [r4, #4]
 8008ec8:	6014      	str	r4, [r2, #0]
 8008eca:	b003      	add	sp, #12
 8008ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ed0:	f000 b90e 	b.w	80090f0 <__malloc_unlock>
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	d908      	bls.n	8008eea <_free_r+0x46>
 8008ed8:	6825      	ldr	r5, [r4, #0]
 8008eda:	1961      	adds	r1, r4, r5
 8008edc:	428b      	cmp	r3, r1
 8008ede:	bf01      	itttt	eq
 8008ee0:	6819      	ldreq	r1, [r3, #0]
 8008ee2:	685b      	ldreq	r3, [r3, #4]
 8008ee4:	1949      	addeq	r1, r1, r5
 8008ee6:	6021      	streq	r1, [r4, #0]
 8008ee8:	e7ed      	b.n	8008ec6 <_free_r+0x22>
 8008eea:	461a      	mov	r2, r3
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	b10b      	cbz	r3, 8008ef4 <_free_r+0x50>
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d9fa      	bls.n	8008eea <_free_r+0x46>
 8008ef4:	6811      	ldr	r1, [r2, #0]
 8008ef6:	1855      	adds	r5, r2, r1
 8008ef8:	42a5      	cmp	r5, r4
 8008efa:	d10b      	bne.n	8008f14 <_free_r+0x70>
 8008efc:	6824      	ldr	r4, [r4, #0]
 8008efe:	4421      	add	r1, r4
 8008f00:	1854      	adds	r4, r2, r1
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	6011      	str	r1, [r2, #0]
 8008f06:	d1e0      	bne.n	8008eca <_free_r+0x26>
 8008f08:	681c      	ldr	r4, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	6053      	str	r3, [r2, #4]
 8008f0e:	4421      	add	r1, r4
 8008f10:	6011      	str	r1, [r2, #0]
 8008f12:	e7da      	b.n	8008eca <_free_r+0x26>
 8008f14:	d902      	bls.n	8008f1c <_free_r+0x78>
 8008f16:	230c      	movs	r3, #12
 8008f18:	6003      	str	r3, [r0, #0]
 8008f1a:	e7d6      	b.n	8008eca <_free_r+0x26>
 8008f1c:	6825      	ldr	r5, [r4, #0]
 8008f1e:	1961      	adds	r1, r4, r5
 8008f20:	428b      	cmp	r3, r1
 8008f22:	bf04      	itt	eq
 8008f24:	6819      	ldreq	r1, [r3, #0]
 8008f26:	685b      	ldreq	r3, [r3, #4]
 8008f28:	6063      	str	r3, [r4, #4]
 8008f2a:	bf04      	itt	eq
 8008f2c:	1949      	addeq	r1, r1, r5
 8008f2e:	6021      	streq	r1, [r4, #0]
 8008f30:	6054      	str	r4, [r2, #4]
 8008f32:	e7ca      	b.n	8008eca <_free_r+0x26>
 8008f34:	b003      	add	sp, #12
 8008f36:	bd30      	pop	{r4, r5, pc}
 8008f38:	20004390 	.word	0x20004390

08008f3c <sbrk_aligned>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	4e0e      	ldr	r6, [pc, #56]	; (8008f78 <sbrk_aligned+0x3c>)
 8008f40:	460c      	mov	r4, r1
 8008f42:	6831      	ldr	r1, [r6, #0]
 8008f44:	4605      	mov	r5, r0
 8008f46:	b911      	cbnz	r1, 8008f4e <sbrk_aligned+0x12>
 8008f48:	f000 f8bc 	bl	80090c4 <_sbrk_r>
 8008f4c:	6030      	str	r0, [r6, #0]
 8008f4e:	4621      	mov	r1, r4
 8008f50:	4628      	mov	r0, r5
 8008f52:	f000 f8b7 	bl	80090c4 <_sbrk_r>
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	d00a      	beq.n	8008f70 <sbrk_aligned+0x34>
 8008f5a:	1cc4      	adds	r4, r0, #3
 8008f5c:	f024 0403 	bic.w	r4, r4, #3
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d007      	beq.n	8008f74 <sbrk_aligned+0x38>
 8008f64:	1a21      	subs	r1, r4, r0
 8008f66:	4628      	mov	r0, r5
 8008f68:	f000 f8ac 	bl	80090c4 <_sbrk_r>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d101      	bne.n	8008f74 <sbrk_aligned+0x38>
 8008f70:	f04f 34ff 	mov.w	r4, #4294967295
 8008f74:	4620      	mov	r0, r4
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	20004394 	.word	0x20004394

08008f7c <_malloc_r>:
 8008f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f80:	1ccd      	adds	r5, r1, #3
 8008f82:	f025 0503 	bic.w	r5, r5, #3
 8008f86:	3508      	adds	r5, #8
 8008f88:	2d0c      	cmp	r5, #12
 8008f8a:	bf38      	it	cc
 8008f8c:	250c      	movcc	r5, #12
 8008f8e:	2d00      	cmp	r5, #0
 8008f90:	4607      	mov	r7, r0
 8008f92:	db01      	blt.n	8008f98 <_malloc_r+0x1c>
 8008f94:	42a9      	cmp	r1, r5
 8008f96:	d905      	bls.n	8008fa4 <_malloc_r+0x28>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	2600      	movs	r6, #0
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	4e2e      	ldr	r6, [pc, #184]	; (8009060 <_malloc_r+0xe4>)
 8008fa6:	f000 f89d 	bl	80090e4 <__malloc_lock>
 8008faa:	6833      	ldr	r3, [r6, #0]
 8008fac:	461c      	mov	r4, r3
 8008fae:	bb34      	cbnz	r4, 8008ffe <_malloc_r+0x82>
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f7ff ffc2 	bl	8008f3c <sbrk_aligned>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	4604      	mov	r4, r0
 8008fbc:	d14d      	bne.n	800905a <_malloc_r+0xde>
 8008fbe:	6834      	ldr	r4, [r6, #0]
 8008fc0:	4626      	mov	r6, r4
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	d140      	bne.n	8009048 <_malloc_r+0xcc>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4638      	mov	r0, r7
 8008fcc:	eb04 0803 	add.w	r8, r4, r3
 8008fd0:	f000 f878 	bl	80090c4 <_sbrk_r>
 8008fd4:	4580      	cmp	r8, r0
 8008fd6:	d13a      	bne.n	800904e <_malloc_r+0xd2>
 8008fd8:	6821      	ldr	r1, [r4, #0]
 8008fda:	3503      	adds	r5, #3
 8008fdc:	1a6d      	subs	r5, r5, r1
 8008fde:	f025 0503 	bic.w	r5, r5, #3
 8008fe2:	3508      	adds	r5, #8
 8008fe4:	2d0c      	cmp	r5, #12
 8008fe6:	bf38      	it	cc
 8008fe8:	250c      	movcc	r5, #12
 8008fea:	4629      	mov	r1, r5
 8008fec:	4638      	mov	r0, r7
 8008fee:	f7ff ffa5 	bl	8008f3c <sbrk_aligned>
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d02b      	beq.n	800904e <_malloc_r+0xd2>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	442b      	add	r3, r5
 8008ffa:	6023      	str	r3, [r4, #0]
 8008ffc:	e00e      	b.n	800901c <_malloc_r+0xa0>
 8008ffe:	6822      	ldr	r2, [r4, #0]
 8009000:	1b52      	subs	r2, r2, r5
 8009002:	d41e      	bmi.n	8009042 <_malloc_r+0xc6>
 8009004:	2a0b      	cmp	r2, #11
 8009006:	d916      	bls.n	8009036 <_malloc_r+0xba>
 8009008:	1961      	adds	r1, r4, r5
 800900a:	42a3      	cmp	r3, r4
 800900c:	6025      	str	r5, [r4, #0]
 800900e:	bf18      	it	ne
 8009010:	6059      	strne	r1, [r3, #4]
 8009012:	6863      	ldr	r3, [r4, #4]
 8009014:	bf08      	it	eq
 8009016:	6031      	streq	r1, [r6, #0]
 8009018:	5162      	str	r2, [r4, r5]
 800901a:	604b      	str	r3, [r1, #4]
 800901c:	4638      	mov	r0, r7
 800901e:	f104 060b 	add.w	r6, r4, #11
 8009022:	f000 f865 	bl	80090f0 <__malloc_unlock>
 8009026:	f026 0607 	bic.w	r6, r6, #7
 800902a:	1d23      	adds	r3, r4, #4
 800902c:	1af2      	subs	r2, r6, r3
 800902e:	d0b6      	beq.n	8008f9e <_malloc_r+0x22>
 8009030:	1b9b      	subs	r3, r3, r6
 8009032:	50a3      	str	r3, [r4, r2]
 8009034:	e7b3      	b.n	8008f9e <_malloc_r+0x22>
 8009036:	6862      	ldr	r2, [r4, #4]
 8009038:	42a3      	cmp	r3, r4
 800903a:	bf0c      	ite	eq
 800903c:	6032      	streq	r2, [r6, #0]
 800903e:	605a      	strne	r2, [r3, #4]
 8009040:	e7ec      	b.n	800901c <_malloc_r+0xa0>
 8009042:	4623      	mov	r3, r4
 8009044:	6864      	ldr	r4, [r4, #4]
 8009046:	e7b2      	b.n	8008fae <_malloc_r+0x32>
 8009048:	4634      	mov	r4, r6
 800904a:	6876      	ldr	r6, [r6, #4]
 800904c:	e7b9      	b.n	8008fc2 <_malloc_r+0x46>
 800904e:	230c      	movs	r3, #12
 8009050:	603b      	str	r3, [r7, #0]
 8009052:	4638      	mov	r0, r7
 8009054:	f000 f84c 	bl	80090f0 <__malloc_unlock>
 8009058:	e7a1      	b.n	8008f9e <_malloc_r+0x22>
 800905a:	6025      	str	r5, [r4, #0]
 800905c:	e7de      	b.n	800901c <_malloc_r+0xa0>
 800905e:	bf00      	nop
 8009060:	20004390 	.word	0x20004390

08009064 <_realloc_r>:
 8009064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009068:	4680      	mov	r8, r0
 800906a:	4614      	mov	r4, r2
 800906c:	460e      	mov	r6, r1
 800906e:	b921      	cbnz	r1, 800907a <_realloc_r+0x16>
 8009070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009074:	4611      	mov	r1, r2
 8009076:	f7ff bf81 	b.w	8008f7c <_malloc_r>
 800907a:	b92a      	cbnz	r2, 8009088 <_realloc_r+0x24>
 800907c:	f7ff ff12 	bl	8008ea4 <_free_r>
 8009080:	4625      	mov	r5, r4
 8009082:	4628      	mov	r0, r5
 8009084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009088:	f000 f838 	bl	80090fc <_malloc_usable_size_r>
 800908c:	4284      	cmp	r4, r0
 800908e:	4607      	mov	r7, r0
 8009090:	d802      	bhi.n	8009098 <_realloc_r+0x34>
 8009092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009096:	d812      	bhi.n	80090be <_realloc_r+0x5a>
 8009098:	4621      	mov	r1, r4
 800909a:	4640      	mov	r0, r8
 800909c:	f7ff ff6e 	bl	8008f7c <_malloc_r>
 80090a0:	4605      	mov	r5, r0
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d0ed      	beq.n	8009082 <_realloc_r+0x1e>
 80090a6:	42bc      	cmp	r4, r7
 80090a8:	4622      	mov	r2, r4
 80090aa:	4631      	mov	r1, r6
 80090ac:	bf28      	it	cs
 80090ae:	463a      	movcs	r2, r7
 80090b0:	f7ff fb9e 	bl	80087f0 <memcpy>
 80090b4:	4631      	mov	r1, r6
 80090b6:	4640      	mov	r0, r8
 80090b8:	f7ff fef4 	bl	8008ea4 <_free_r>
 80090bc:	e7e1      	b.n	8009082 <_realloc_r+0x1e>
 80090be:	4635      	mov	r5, r6
 80090c0:	e7df      	b.n	8009082 <_realloc_r+0x1e>
	...

080090c4 <_sbrk_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d06      	ldr	r5, [pc, #24]	; (80090e0 <_sbrk_r+0x1c>)
 80090c8:	2300      	movs	r3, #0
 80090ca:	4604      	mov	r4, r0
 80090cc:	4608      	mov	r0, r1
 80090ce:	602b      	str	r3, [r5, #0]
 80090d0:	f7f8 f91e 	bl	8001310 <_sbrk>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_sbrk_r+0x1a>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_sbrk_r+0x1a>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	20004398 	.word	0x20004398

080090e4 <__malloc_lock>:
 80090e4:	4801      	ldr	r0, [pc, #4]	; (80090ec <__malloc_lock+0x8>)
 80090e6:	f000 b811 	b.w	800910c <__retarget_lock_acquire_recursive>
 80090ea:	bf00      	nop
 80090ec:	2000439c 	.word	0x2000439c

080090f0 <__malloc_unlock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	; (80090f8 <__malloc_unlock+0x8>)
 80090f2:	f000 b80c 	b.w	800910e <__retarget_lock_release_recursive>
 80090f6:	bf00      	nop
 80090f8:	2000439c 	.word	0x2000439c

080090fc <_malloc_usable_size_r>:
 80090fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009100:	1f18      	subs	r0, r3, #4
 8009102:	2b00      	cmp	r3, #0
 8009104:	bfbc      	itt	lt
 8009106:	580b      	ldrlt	r3, [r1, r0]
 8009108:	18c0      	addlt	r0, r0, r3
 800910a:	4770      	bx	lr

0800910c <__retarget_lock_acquire_recursive>:
 800910c:	4770      	bx	lr

0800910e <__retarget_lock_release_recursive>:
 800910e:	4770      	bx	lr

08009110 <_init>:
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009112:	bf00      	nop
 8009114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009116:	bc08      	pop	{r3}
 8009118:	469e      	mov	lr, r3
 800911a:	4770      	bx	lr

0800911c <_fini>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	bf00      	nop
 8009120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009122:	bc08      	pop	{r3}
 8009124:	469e      	mov	lr, r3
 8009126:	4770      	bx	lr
