
ThrustController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c34  08003c34  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003c34  08003c34  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c34  08003c34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c34  08003c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001048  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001058  20001058  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0e9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f5b  00000000  00000000  0002d129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  0002fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fdd4  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ccd6  00000000  00000000  000502f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c07a9  00000000  00000000  0005cfca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d773  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a58  00000000  00000000  0011d7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bb4 	.word	0x08003bb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003bb4 	.word	0x08003bb4

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 f9cf 	bl	80005ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f81d 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f88d 	bl	8000330 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000216:	f000 f85b 	bl	80002d0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800021a:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <main+0x40>)
 800021c:	1d3c      	adds	r4, r7, #4
 800021e:	461d      	mov	r5, r3
 8000220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f002 fa57 	bl	80026e4 <osThreadCreate>
 8000236:	4603      	mov	r3, r0
 8000238:	4a03      	ldr	r2, [pc, #12]	; (8000248 <main+0x44>)
 800023a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800023c:	f002 fa4b 	bl	80026d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x3c>
 8000242:	bf00      	nop
 8000244:	08003bd8 	.word	0x08003bd8
 8000248:	20000304 	.word	0x20000304

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	; 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fca2 	bl	8003ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2310      	movs	r3, #16
 8000278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027e:	2300      	movs	r3, #0
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000282:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0318 	add.w	r3, r7, #24
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fc63 	bl	8000b58 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000298:	f000 f8b8 	bl	800040c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fc8c 	bl	8001bd4 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002c2:	f000 f8a3 	bl	800040c <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002d6:	4a15      	ldr	r2, [pc, #84]	; (800032c <MX_USART2_UART_Init+0x5c>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_USART2_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <MX_USART2_UART_Init+0x58>)
 8000314:	f001 fe94 	bl	8002040 <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800031e:	f000 f875 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000280 	.word	0x20000280
 800032c:	40004400 	.word	0x40004400

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	; 0x28
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a2a      	ldr	r2, [pc, #168]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800034c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800035a:	613b      	str	r3, [r7, #16]
 800035c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035e:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a24      	ldr	r2, [pc, #144]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800037c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f000 fbbb 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <MX_GPIO_Init+0xc8>)
 80003ca:	f000 fa3b 	bl	8000844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003ce:	2320      	movs	r3, #32
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2300      	movs	r3, #0
 80003dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	4619      	mov	r1, r3
 80003e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e8:	f000 fa2c 	bl	8000844 <HAL_GPIO_Init>

}
 80003ec:	bf00      	nop
 80003ee:	3728      	adds	r7, #40	; 0x28
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	48000800 	.word	0x48000800

080003fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000404:	2001      	movs	r0, #1
 8000406:	f002 f9b9 	bl	800277c <osDelay>
 800040a:	e7fb      	b.n	8000404 <StartDefaultTask+0x8>

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>
	...

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <HAL_MspInit+0x4c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a10      	ldr	r2, [pc, #64]	; (8000464 <HAL_MspInit+0x4c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <HAL_MspInit+0x4c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <HAL_MspInit+0x4c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <HAL_MspInit+0x4c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <HAL_MspInit+0x4c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	210f      	movs	r1, #15
 8000452:	f06f 0001 	mvn.w	r0, #1
 8000456:	f000 f9cc 	bl	80007f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	; 0x28
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a17      	ldr	r2, [pc, #92]	; (80004e4 <HAL_UART_MspInit+0x7c>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d128      	bne.n	80004dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <HAL_UART_MspInit+0x80>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <HAL_UART_MspInit+0x80>)
 8000490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <HAL_UART_MspInit+0x80>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <HAL_UART_MspInit+0x80>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <HAL_UART_MspInit+0x80>)
 80004a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <HAL_UART_MspInit+0x80>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004ba:	230c      	movs	r3, #12
 80004bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004be:	2302      	movs	r3, #2
 80004c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c6:	2303      	movs	r3, #3
 80004c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004ca:	2307      	movs	r3, #7
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	4619      	mov	r1, r3
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d8:	f000 f9b4 	bl	8000844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004dc:	bf00      	nop
 80004de:	3728      	adds	r7, #40	; 0x28
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40004400 	.word	0x40004400
 80004e8:	40021000 	.word	0x40021000

080004ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <NMI_Handler+0x4>

080004f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <HardFault_Handler+0x4>

080004f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <MemManage_Handler+0x4>

080004fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <BusFault_Handler+0x4>

08000504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <UsageFault_Handler+0x4>

0800050a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051c:	f000 f88c 	bl	8000638 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000520:	f002 feb2 	bl	8003288 <xTaskGetSchedulerState>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d001      	beq.n	800052e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800052a:	f003 f8ed 	bl	8003708 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <SystemInit+0x20>)
 800053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <SystemInit+0x20>)
 8000540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000590 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490e      	ldr	r1, [pc, #56]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0b      	ldr	r4, [pc, #44]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000582:	f7ff ffd7 	bl	8000534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000586:	f003 fae9 	bl	8003b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058a:	f7ff fe3b 	bl	8000204 <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000590:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800059c:	08003c3c 	.word	0x08003c3c
  ldr r2, =_sbss
 80005a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005a4:	20001058 	.word	0x20001058

080005a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_2_IRQHandler>
	...

080005ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_Init+0x28>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_Init+0x28>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f90d 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 f808 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f7ff ff26 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40022000 	.word	0x40022000

080005d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f917 	bl	800082a <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f8ed 	bl	80007f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000008 	.word	0x20000008
 800065c:	20000308 	.word	0x20000308

08000660 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;  
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000308 	.word	0x20000308

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff8e 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff47 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff5c 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff8e 	bl	8000730 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5d 	bl	80006dc <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb0 	bl	8000798 <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000844:	b480      	push	{r7}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000852:	e14e      	b.n	8000af2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	fa01 f303 	lsl.w	r3, r1, r3
 8000860:	4013      	ands	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	f000 8140 	beq.w	8000aec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	2b01      	cmp	r3, #1
 8000876:	d005      	beq.n	8000884 <HAL_GPIO_Init+0x40>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	2b02      	cmp	r3, #2
 8000882:	d130      	bne.n	80008e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ba:	2201      	movs	r2, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	091b      	lsrs	r3, r3, #4
 80008d0:	f003 0201 	and.w	r2, r3, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d017      	beq.n	8000922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	2b02      	cmp	r3, #2
 800092c:	d123      	bne.n	8000976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3208      	adds	r2, #8
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	691a      	ldr	r2, [r3, #16]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f003 0307 	and.w	r3, r3, #7
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	08da      	lsrs	r2, r3, #3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3208      	adds	r2, #8
 8000970:	6939      	ldr	r1, [r7, #16]
 8000972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0203 	and.w	r2, r3, #3
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 809a 	beq.w	8000aec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b8:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a54      	ldr	r2, [pc, #336]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b52      	ldr	r3, [pc, #328]	; (8000b10 <HAL_GPIO_Init+0x2cc>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009d0:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009fa:	d013      	beq.n	8000a24 <HAL_GPIO_Init+0x1e0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a46      	ldr	r2, [pc, #280]	; (8000b18 <HAL_GPIO_Init+0x2d4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d00d      	beq.n	8000a20 <HAL_GPIO_Init+0x1dc>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a45      	ldr	r2, [pc, #276]	; (8000b1c <HAL_GPIO_Init+0x2d8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d007      	beq.n	8000a1c <HAL_GPIO_Init+0x1d8>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a44      	ldr	r2, [pc, #272]	; (8000b20 <HAL_GPIO_Init+0x2dc>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d101      	bne.n	8000a18 <HAL_GPIO_Init+0x1d4>
 8000a14:	2303      	movs	r3, #3
 8000a16:	e006      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a18:	2305      	movs	r3, #5
 8000a1a:	e004      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	e002      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <HAL_GPIO_Init+0x1e2>
 8000a24:	2300      	movs	r3, #0
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	f002 0203 	and.w	r2, r2, #3
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	4093      	lsls	r3, r2
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a36:	4937      	ldr	r1, [pc, #220]	; (8000b14 <HAL_GPIO_Init+0x2d0>)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a44:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a68:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a92:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_GPIO_Init+0x2e0>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	3301      	adds	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	fa22 f303 	lsr.w	r3, r2, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f47f aea9 	bne.w	8000854 <HAL_GPIO_Init+0x10>
  }
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	371c      	adds	r7, #28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	48000c00 	.word	0x48000c00
 8000b24:	40010400 	.word	0x40010400

08000b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
 8000b34:	4613      	mov	r3, r2
 8000b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b38:	787b      	ldrb	r3, [r7, #1]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b68:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f001 b823 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 817d 	beq.w	8000e8e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b94:	4bbc      	ldr	r3, [pc, #752]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 030c 	and.w	r3, r3, #12
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d00c      	beq.n	8000bba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ba0:	4bb9      	ldr	r3, [pc, #740]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 030c 	and.w	r3, r3, #12
 8000ba8:	2b08      	cmp	r3, #8
 8000baa:	d15c      	bne.n	8000c66 <HAL_RCC_OscConfig+0x10e>
 8000bac:	4bb6      	ldr	r3, [pc, #728]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb8:	d155      	bne.n	8000c66 <HAL_RCC_OscConfig+0x10e>
 8000bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bbe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000bc6:	fa93 f3a3 	rbit	r3, r3
 8000bca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd2:	fab3 f383 	clz	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	095b      	lsrs	r3, r3, #5
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d102      	bne.n	8000bec <HAL_RCC_OscConfig+0x94>
 8000be6:	4ba8      	ldr	r3, [pc, #672]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	e015      	b.n	8000c18 <HAL_RCC_OscConfig+0xc0>
 8000bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c04:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c08:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c14:	4b9c      	ldr	r3, [pc, #624]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c1c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c20:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c24:	fa92 f2a2 	rbit	r2, r2
 8000c28:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c2c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	f042 0220 	orr.w	r2, r2, #32
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	f002 021f 	and.w	r2, r2, #31
 8000c40:	2101      	movs	r1, #1
 8000c42:	fa01 f202 	lsl.w	r2, r1, r2
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 811f 	beq.w	8000e8c <HAL_RCC_OscConfig+0x334>
 8000c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8116 	bne.w	8000e8c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	f000 bfaf 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c76:	d106      	bne.n	8000c86 <HAL_RCC_OscConfig+0x12e>
 8000c78:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a82      	ldr	r2, [pc, #520]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	e036      	b.n	8000cf4 <HAL_RCC_OscConfig+0x19c>
 8000c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10c      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x158>
 8000c96:	4b7c      	ldr	r3, [pc, #496]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a7b      	ldr	r2, [pc, #492]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	4b79      	ldr	r3, [pc, #484]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a78      	ldr	r2, [pc, #480]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e021      	b.n	8000cf4 <HAL_RCC_OscConfig+0x19c>
 8000cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc0:	d10c      	bne.n	8000cdc <HAL_RCC_OscConfig+0x184>
 8000cc2:	4b71      	ldr	r3, [pc, #452]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a70      	ldr	r2, [pc, #448]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a6d      	ldr	r2, [pc, #436]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e00b      	b.n	8000cf4 <HAL_RCC_OscConfig+0x19c>
 8000cdc:	4b6a      	ldr	r3, [pc, #424]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a69      	ldr	r2, [pc, #420]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b67      	ldr	r3, [pc, #412]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a66      	ldr	r2, [pc, #408]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cf4:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	f023 020f 	bic.w	r2, r3, #15
 8000cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	495f      	ldr	r1, [pc, #380]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d059      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fc9f 	bl	8000660 <HAL_GetTick>
 8000d22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d26:	e00a      	b.n	8000d3e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d28:	f7ff fc9a 	bl	8000660 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b64      	cmp	r3, #100	; 0x64
 8000d36:	d902      	bls.n	8000d3e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f000 bf43 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8000d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d42:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d46:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d4a:	fa93 f3a3 	rbit	r3, r3
 8000d4e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	fab3 f383 	clz	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	095b      	lsrs	r3, r3, #5
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d102      	bne.n	8000d70 <HAL_RCC_OscConfig+0x218>
 8000d6a:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	e015      	b.n	8000d9c <HAL_RCC_OscConfig+0x244>
 8000d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d74:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d98:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000da0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000da4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000da8:	fa92 f2a2 	rbit	r2, r2
 8000dac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000db0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	f042 0220 	orr.w	r2, r2, #32
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	f002 021f 	and.w	r2, r2, #31
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0ab      	beq.n	8000d28 <HAL_RCC_OscConfig+0x1d0>
 8000dd0:	e05d      	b.n	8000e8e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fc45 	bl	8000660 <HAL_GetTick>
 8000dd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	e00a      	b.n	8000df2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fc40 	bl	8000660 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b64      	cmp	r3, #100	; 0x64
 8000dea:	d902      	bls.n	8000df2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	f000 bee9 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8000df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	095b      	lsrs	r3, r3, #5
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d102      	bne.n	8000e24 <HAL_RCC_OscConfig+0x2cc>
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	e015      	b.n	8000e50 <HAL_RCC_OscConfig+0x2f8>
 8000e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e28:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e30:	fa93 f3a3 	rbit	r3, r3
 8000e34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e54:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e58:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e5c:	fa92 f2a2 	rbit	r2, r2
 8000e60:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e64:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e68:	fab2 f282 	clz	r2, r2
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	f042 0220 	orr.w	r2, r2, #32
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	f002 021f 	and.w	r2, r2, #31
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1ab      	bne.n	8000ddc <HAL_RCC_OscConfig+0x284>
 8000e84:	e003      	b.n	8000e8e <HAL_RCC_OscConfig+0x336>
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 817d 	beq.w	800119e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ea4:	4ba6      	ldr	r3, [pc, #664]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eb0:	4ba3      	ldr	r3, [pc, #652]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d172      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x44a>
 8000ebc:	4ba0      	ldr	r3, [pc, #640]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d16c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x44a>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000eda:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	095b      	lsrs	r3, r3, #5
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d102      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x3a0>
 8000ef2:	4b93      	ldr	r3, [pc, #588]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	e013      	b.n	8000f20 <HAL_RCC_OscConfig+0x3c8>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f14:	fa93 f3a3 	rbit	r3, r3
 8000f18:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f1c:	4b88      	ldr	r3, [pc, #544]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	2202      	movs	r2, #2
 8000f22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f2a:	fa92 f2a2 	rbit	r2, r2
 8000f2e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f32:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f36:	fab2 f282 	clz	r2, r2
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f042 0220 	orr.w	r2, r2, #32
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f002 021f 	and.w	r2, r2, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00a      	beq.n	8000f68 <HAL_RCC_OscConfig+0x410>
 8000f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d002      	beq.n	8000f68 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f000 be2e 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	4b75      	ldr	r3, [pc, #468]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	21f8      	movs	r1, #248	; 0xf8
 8000f7e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f86:	fa91 f1a1 	rbit	r1, r1
 8000f8a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f8e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f92:	fab1 f181 	clz	r1, r1
 8000f96:	b2c9      	uxtb	r1, r1
 8000f98:	408b      	lsls	r3, r1
 8000f9a:	4969      	ldr	r1, [pc, #420]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa0:	e0fd      	b.n	800119e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 8088 	beq.w	80010c4 <HAL_RCC_OscConfig+0x56c>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000fc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fca:	fab3 f383 	clz	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2301      	movs	r3, #1
 8000fde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fb3e 	bl	8000660 <HAL_GetTick>
 8000fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fea:	f7ff fb39 	bl	8000660 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d902      	bls.n	8001000 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f000 bde2 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001012:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001016:	fab3 f383 	clz	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	095b      	lsrs	r3, r3, #5
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <HAL_RCC_OscConfig+0x4d8>
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	e013      	b.n	8001058 <HAL_RCC_OscConfig+0x500>
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001048:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001054:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	2202      	movs	r2, #2
 800105a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800105e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001062:	fa92 f2a2 	rbit	r2, r2
 8001066:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800106a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800106e:	fab2 f282 	clz	r2, r2
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f002 021f 	and.w	r2, r2, #31
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	4013      	ands	r3, r2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0af      	beq.n	8000fea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	21f8      	movs	r1, #248	; 0xf8
 80010a0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010a8:	fa91 f1a1 	rbit	r1, r1
 80010ac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80010b0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010b4:	fab1 f181 	clz	r1, r1
 80010b8:	b2c9      	uxtb	r1, r1
 80010ba:	408b      	lsls	r3, r1
 80010bc:	4920      	ldr	r1, [pc, #128]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
 80010c2:	e06c      	b.n	800119e <HAL_RCC_OscConfig+0x646>
 80010c4:	2301      	movs	r3, #1
 80010c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80010d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	461a      	mov	r2, r3
 80010ec:	2300      	movs	r3, #0
 80010ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fab6 	bl	8000660 <HAL_GetTick>
 80010f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fab1 	bl	8000660 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d902      	bls.n	8001110 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	f000 bd5a 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	095b      	lsrs	r3, r3, #5
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d104      	bne.n	8001144 <HAL_RCC_OscConfig+0x5ec>
 800113a:	4b01      	ldr	r3, [pc, #4]	; (8001140 <HAL_RCC_OscConfig+0x5e8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	e015      	b.n	800116c <HAL_RCC_OscConfig+0x614>
 8001140:	40021000 	.word	0x40021000
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800115c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001168:	4bc8      	ldr	r3, [pc, #800]	; (800148c <HAL_RCC_OscConfig+0x934>)
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	2202      	movs	r2, #2
 800116e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001172:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001176:	fa92 f2a2 	rbit	r2, r2
 800117a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800117e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001182:	fab2 f282 	clz	r2, r2
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	f042 0220 	orr.w	r2, r2, #32
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	f002 021f 	and.w	r2, r2, #31
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f202 	lsl.w	r2, r1, r2
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ad      	bne.n	80010fa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8110 	beq.w	80013d4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d079      	beq.n	80012b8 <HAL_RCC_OscConfig+0x760>
 80011c4:	2301      	movs	r3, #1
 80011c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80011d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	4bab      	ldr	r3, [pc, #684]	; (8001490 <HAL_RCC_OscConfig+0x938>)
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	461a      	mov	r2, r3
 80011ea:	2301      	movs	r3, #1
 80011ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fa37 	bl	8000660 <HAL_GetTick>
 80011f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e00a      	b.n	800120e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fa32 	bl	8000660 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d902      	bls.n	800120e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	f000 bcdb 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001224:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001228:	2202      	movs	r2, #2
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001230:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	fa93 f2a3 	rbit	r2, r3
 800123a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800124c:	2202      	movs	r2, #2
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	fa93 f2a3 	rbit	r2, r3
 800125e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001262:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001266:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001268:	4b88      	ldr	r3, [pc, #544]	; (800148c <HAL_RCC_OscConfig+0x934>)
 800126a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001270:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001274:	2102      	movs	r1, #2
 8001276:	6019      	str	r1, [r3, #0]
 8001278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	fa93 f1a3 	rbit	r1, r3
 8001286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800128e:	6019      	str	r1, [r3, #0]
  return result;
 8001290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001294:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0a0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x6a0>
 80012b6:	e08d      	b.n	80013d4 <HAL_RCC_OscConfig+0x87c>
 80012b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	fa93 f2a3 	rbit	r2, r3
 80012d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012da:	601a      	str	r2, [r3, #0]
  return result;
 80012dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b68      	ldr	r3, [pc, #416]	; (8001490 <HAL_RCC_OscConfig+0x938>)
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	461a      	mov	r2, r3
 80012f6:	2300      	movs	r3, #0
 80012f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff f9b1 	bl	8000660 <HAL_GetTick>
 80012fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff f9ac 	bl	8000660 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d902      	bls.n	800131a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	f000 bc55 	b.w	8001bc4 <HAL_RCC_OscConfig+0x106c>
 800131a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001322:	2202      	movs	r2, #2
 8001324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	fa93 f2a3 	rbit	r2, r3
 8001334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001338:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001342:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001346:	2202      	movs	r2, #2
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	fa93 f2a3 	rbit	r2, r3
 8001358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800136a:	2202      	movs	r2, #2
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001380:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001384:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_OscConfig+0x934>)
 8001388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001392:	2102      	movs	r1, #2
 8001394:	6019      	str	r1, [r3, #0]
 8001396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	fa93 f1a3 	rbit	r1, r3
 80013a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013ac:	6019      	str	r1, [r3, #0]
  return result;
 80013ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d197      	bne.n	8001304 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 81a1 	beq.w	800172c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <HAL_RCC_OscConfig+0x934>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d116      	bne.n	800142a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_RCC_OscConfig+0x934>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <HAL_RCC_OscConfig+0x934>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	61d3      	str	r3, [r2, #28]
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_RCC_OscConfig+0x934>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001422:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001424:	2301      	movs	r3, #1
 8001426:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_RCC_OscConfig+0x93c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11a      	bne.n	800146c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_RCC_OscConfig+0x93c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <HAL_RCC_OscConfig+0x93c>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001442:	f7ff f90d 	bl	8000660 <HAL_GetTick>
 8001446:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	e009      	b.n	8001460 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144c:	f7ff f908 	bl	8000660 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b64      	cmp	r3, #100	; 0x64
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e3b1      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_RCC_OscConfig+0x93c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ef      	beq.n	800144c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d10d      	bne.n	8001498 <HAL_RCC_OscConfig+0x940>
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_RCC_OscConfig+0x934>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a02      	ldr	r2, [pc, #8]	; (800148c <HAL_RCC_OscConfig+0x934>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6213      	str	r3, [r2, #32]
 8001488:	e03c      	b.n	8001504 <HAL_RCC_OscConfig+0x9ac>
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	10908120 	.word	0x10908120
 8001494:	40007000 	.word	0x40007000
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10c      	bne.n	80014c2 <HAL_RCC_OscConfig+0x96a>
 80014a8:	4bc1      	ldr	r3, [pc, #772]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4ac0      	ldr	r2, [pc, #768]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	4bbe      	ldr	r3, [pc, #760]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4abd      	ldr	r2, [pc, #756]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014ba:	f023 0304 	bic.w	r3, r3, #4
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	e020      	b.n	8001504 <HAL_RCC_OscConfig+0x9ac>
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x994>
 80014d2:	4bb7      	ldr	r3, [pc, #732]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4ab6      	ldr	r2, [pc, #728]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6213      	str	r3, [r2, #32]
 80014de:	4bb4      	ldr	r3, [pc, #720]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4ab3      	ldr	r2, [pc, #716]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6213      	str	r3, [r2, #32]
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0x9ac>
 80014ec:	4bb0      	ldr	r3, [pc, #704]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4aaf      	ldr	r2, [pc, #700]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	4bad      	ldr	r3, [pc, #692]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4aac      	ldr	r2, [pc, #688]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 8081 	beq.w	8001618 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff f8a3 	bl	8000660 <HAL_GetTick>
 800151a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff f89e 	bl	8000660 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e345      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001540:	2202      	movs	r2, #2
 8001542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800157e:	601a      	str	r2, [r3, #0]
  return result;
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001588:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d102      	bne.n	80015a4 <HAL_RCC_OscConfig+0xa4c>
 800159e:	4b84      	ldr	r3, [pc, #528]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	e013      	b.n	80015cc <HAL_RCC_OscConfig+0xa74>
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f2a3 	rbit	r2, r3
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	4b79      	ldr	r3, [pc, #484]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80015d4:	2102      	movs	r1, #2
 80015d6:	6011      	str	r1, [r2, #0]
 80015d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	fa92 f1a2 	rbit	r1, r2
 80015e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015ee:	6011      	str	r1, [r2, #0]
  return result;
 80015f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015f4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	fab2 f282 	clz	r2, r2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	f002 021f 	and.w	r2, r2, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d084      	beq.n	8001520 <HAL_RCC_OscConfig+0x9c8>
 8001616:	e07f      	b.n	8001718 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff f822 	bl	8000660 <HAL_GetTick>
 800161c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	e00b      	b.n	800163a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff f81d 	bl	8000660 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e2c4      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001642:	2202      	movs	r2, #2
 8001644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fa93 f2a3 	rbit	r2, r3
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001666:	2202      	movs	r2, #2
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001680:	601a      	str	r2, [r3, #0]
  return result;
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800168a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d102      	bne.n	80016a6 <HAL_RCC_OscConfig+0xb4e>
 80016a0:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	e013      	b.n	80016ce <HAL_RCC_OscConfig+0xb76>
 80016a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016ae:	2202      	movs	r2, #2
 80016b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fa93 f2a3 	rbit	r2, r3
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80016d6:	2102      	movs	r1, #2
 80016d8:	6011      	str	r1, [r2, #0]
 80016da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	fa92 f1a2 	rbit	r1, r2
 80016e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016f0:	6011      	str	r1, [r2, #0]
  return result;
 80016f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d184      	bne.n	8001622 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001718:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8242 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_RCC_OscConfig+0xc58>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b08      	cmp	r3, #8
 8001748:	f000 8213 	beq.w	8001b72 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b02      	cmp	r3, #2
 800175a:	f040 8162 	bne.w	8001a22 <HAL_RCC_OscConfig+0xeca>
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001766:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800176a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001782:	601a      	str	r2, [r3, #0]
  return result;
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800178c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001798:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	461a      	mov	r2, r3
 80017a0:	2300      	movs	r3, #0
 80017a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7fe ff5c 	bl	8000660 <HAL_GetTick>
 80017a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ac:	e00c      	b.n	80017c8 <HAL_RCC_OscConfig+0xc70>
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7fe ff54 	bl	8000660 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e1fd      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017ec:	601a      	str	r2, [r3, #0]
  return result;
 80017ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80017f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d102      	bne.n	8001812 <HAL_RCC_OscConfig+0xcba>
 800180c:	4bb0      	ldr	r3, [pc, #704]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e027      	b.n	8001862 <HAL_RCC_OscConfig+0xd0a>
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800181a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800181e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f2a3 	rbit	r2, r3
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	4b9c      	ldr	r3, [pc, #624]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001866:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800186a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800186e:	6011      	str	r1, [r2, #0]
 8001870:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001874:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	fa92 f1a2 	rbit	r1, r2
 800187e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001882:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001886:	6011      	str	r1, [r2, #0]
  return result;
 8001888:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800188c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	fab2 f282 	clz	r2, r2
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f042 0220 	orr.w	r2, r2, #32
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f002 021f 	and.w	r2, r2, #31
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d182      	bne.n	80017b4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ae:	4b88      	ldr	r3, [pc, #544]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	430b      	orrs	r3, r1
 80018d0:	497f      	ldr	r1, [pc, #508]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80018de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001904:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001910:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	461a      	mov	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7fe fea0 	bl	8000660 <HAL_GetTick>
 8001920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001924:	e009      	b.n	800193a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001926:	f7fe fe9b 	bl	8000660 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e144      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800195e:	601a      	str	r2, [r3, #0]
  return result;
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001968:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0xe2c>
 800197e:	4b54      	ldr	r3, [pc, #336]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	e027      	b.n	80019d4 <HAL_RCC_OscConfig+0xe7c>
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800198c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80019dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019e0:	6011      	str	r1, [r2, #0]
 80019e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	fa92 f1a2 	rbit	r1, r2
 80019f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80019f8:	6011      	str	r1, [r2, #0]
  return result;
 80019fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019fe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	fab2 f282 	clz	r2, r2
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f042 0220 	orr.w	r2, r2, #32
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f002 021f 	and.w	r2, r2, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d082      	beq.n	8001926 <HAL_RCC_OscConfig+0xdce>
 8001a20:	e0cf      	b.n	8001bc2 <HAL_RCC_OscConfig+0x106a>
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fa93 f2a3 	rbit	r2, r3
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a46:	601a      	str	r2, [r3, #0]
  return result;
 8001a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a50:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	461a      	mov	r2, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7fe fdfa 	bl	8000660 <HAL_GetTick>
 8001a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a70:	e009      	b.n	8001a86 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a72:	f7fe fdf5 	bl	8000660 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e09e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001aaa:	601a      	str	r2, [r3, #0]
  return result;
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ab4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d104      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xf7c>
 8001aca:	4b01      	ldr	r3, [pc, #4]	; (8001ad0 <HAL_RCC_OscConfig+0xf78>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	e029      	b.n	8001b24 <HAL_RCC_OscConfig+0xfcc>
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_OscConfig+0x1078>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b28:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b30:	6011      	str	r1, [r2, #0]
 8001b32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b36:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	fa92 f1a2 	rbit	r1, r2
 8001b40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b44:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b48:	6011      	str	r1, [r2, #0]
  return result;
 8001b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	fab2 f282 	clz	r2, r2
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f002 021f 	and.w	r2, r2, #31
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d180      	bne.n	8001a72 <HAL_RCC_OscConfig+0xf1a>
 8001b70:	e027      	b.n	8001bc2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e01e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_OscConfig+0x1078>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b92:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001baa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b09e      	sub	sp, #120	; 0x78
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e162      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b90      	ldr	r3, [pc, #576]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b8d      	ldr	r3, [pc, #564]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	498b      	ldr	r1, [pc, #556]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b89      	ldr	r3, [pc, #548]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e14a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b82      	ldr	r3, [pc, #520]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	497f      	ldr	r1, [pc, #508]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80dc 	beq.w	8001e00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d13c      	bne.n	8001cca <HAL_RCC_ClockConfig+0xf6>
 8001c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xa6>
 8001c74:	4b6f      	ldr	r3, [pc, #444]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e00f      	b.n	8001c9a <HAL_RCC_ClockConfig+0xc6>
 8001c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	667b      	str	r3, [r7, #100]	; 0x64
 8001c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ca8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001caa:	fab2 f282 	clz	r2, r2
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f042 0220 	orr.w	r2, r2, #32
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f002 021f 	and.w	r2, r2, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d17b      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0f3      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d13c      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x178>
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x128>
 8001cf6:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	e00f      	b.n	8001d1c <HAL_RCC_ClockConfig+0x148>
 8001cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	647b      	str	r3, [r7, #68]	; 0x44
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d20:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d24:	fa92 f2a2 	rbit	r2, r2
 8001d28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f002 021f 	and.w	r2, r2, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d13a      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b2      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1a0>
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e00d      	b.n	8001d90 <HAL_RCC_ClockConfig+0x1bc>
 8001d74:	2302      	movs	r3, #2
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	2302      	movs	r3, #2
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2202      	movs	r2, #2
 8001d92:	61ba      	str	r2, [r7, #24]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	fa92 f2a2 	rbit	r2, r2
 8001d9a:	617a      	str	r2, [r7, #20]
  return result;
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e079      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	491a      	ldr	r1, [pc, #104]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7fe fc46 	bl	8000660 <HAL_GetTick>
 8001dd4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7fe fc42 	bl	8000660 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e061      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d214      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4906      	ldr	r1, [pc, #24]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e040      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x2de>
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	491a      	ldr	r1, [pc, #104]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4912      	ldr	r1, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e76:	f000 f829 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_RCC_ClockConfig+0x2e8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	22f0      	movs	r2, #240	; 0xf0
 8001e86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	40d3      	lsrs	r3, r2
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x2ec>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_RCC_ClockConfig+0x2f0>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_RCC_ClockConfig+0x2f4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb94 	bl	80005d8 <HAL_InitTick>
  
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3778      	adds	r7, #120	; 0x78
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08003bfc 	.word	0x08003bfc
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x30>
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x36>
 8001efa:	e03c      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001efe:	623b      	str	r3, [r7, #32]
      break;
 8001f00:	e03c      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	607a      	str	r2, [r7, #4]
  return result;
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	40d3      	lsrs	r3, r2
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	220f      	movs	r2, #15
 8001f30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	fa92 f2a2 	rbit	r2, r2
 8001f38:	60fa      	str	r2, [r7, #12]
  return result;
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	fab2 f282 	clz	r2, r2
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	40d3      	lsrs	r3, r2
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f54:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	e004      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	623b      	str	r3, [r7, #32]
      break;
 8001f74:	e002      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f78:	623b      	str	r3, [r7, #32]
      break;
 8001f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	372c      	adds	r7, #44	; 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	08003c14 	.word	0x08003c14
 8001f98:	08003c24 	.word	0x08003c24
 8001f9c:	003d0900 	.word	0x003d0900

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001fbe:	f7ff ffef 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fcc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	fa92 f2a2 	rbit	r2, r2
 8001fd8:	603a      	str	r2, [r7, #0]
  return result;
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	fab2 f282 	clz	r2, r2
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	40d3      	lsrs	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08003c0c 	.word	0x08003c0c

08001ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002002:	f7ff ffcd 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8002006:	4601      	mov	r1, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002010:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002014:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	fa92 f2a2 	rbit	r2, r2
 800201c:	603a      	str	r2, [r7, #0]
  return result;
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	40d3      	lsrs	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_RCC_GetPCLK2Freq+0x40>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08003c0c 	.word	0x08003c0c

08002040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e040      	b.n	80020d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fa00 	bl	8000468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f82c 	bl	80020dc <UART_SetConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e022      	b.n	80020d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f956 	bl	8002348 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f9dd 	bl	800248c <UART_CheckIdleState>
 80020d2:	4603      	mov	r3, r0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <UART_SetConfig+0x254>)
 8002108:	4013      	ands	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	6979      	ldr	r1, [r7, #20]
 8002110:	430b      	orrs	r3, r1
 8002112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a78      	ldr	r2, [pc, #480]	; (8002334 <UART_SetConfig+0x258>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d120      	bne.n	800219a <UART_SetConfig+0xbe>
 8002158:	4b77      	ldr	r3, [pc, #476]	; (8002338 <UART_SetConfig+0x25c>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d817      	bhi.n	8002194 <UART_SetConfig+0xb8>
 8002164:	a201      	add	r2, pc, #4	; (adr r2, 800216c <UART_SetConfig+0x90>)
 8002166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216a:	bf00      	nop
 800216c:	0800217d 	.word	0x0800217d
 8002170:	08002189 	.word	0x08002189
 8002174:	0800218f 	.word	0x0800218f
 8002178:	08002183 	.word	0x08002183
 800217c:	2300      	movs	r3, #0
 800217e:	77fb      	strb	r3, [r7, #31]
 8002180:	e01d      	b.n	80021be <UART_SetConfig+0xe2>
 8002182:	2302      	movs	r3, #2
 8002184:	77fb      	strb	r3, [r7, #31]
 8002186:	e01a      	b.n	80021be <UART_SetConfig+0xe2>
 8002188:	2304      	movs	r3, #4
 800218a:	77fb      	strb	r3, [r7, #31]
 800218c:	e017      	b.n	80021be <UART_SetConfig+0xe2>
 800218e:	2308      	movs	r3, #8
 8002190:	77fb      	strb	r3, [r7, #31]
 8002192:	e014      	b.n	80021be <UART_SetConfig+0xe2>
 8002194:	2310      	movs	r3, #16
 8002196:	77fb      	strb	r3, [r7, #31]
 8002198:	e011      	b.n	80021be <UART_SetConfig+0xe2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a67      	ldr	r2, [pc, #412]	; (800233c <UART_SetConfig+0x260>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d102      	bne.n	80021aa <UART_SetConfig+0xce>
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
 80021a8:	e009      	b.n	80021be <UART_SetConfig+0xe2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a64      	ldr	r2, [pc, #400]	; (8002340 <UART_SetConfig+0x264>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d102      	bne.n	80021ba <UART_SetConfig+0xde>
 80021b4:	2300      	movs	r3, #0
 80021b6:	77fb      	strb	r3, [r7, #31]
 80021b8:	e001      	b.n	80021be <UART_SetConfig+0xe2>
 80021ba:	2310      	movs	r3, #16
 80021bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c6:	d15b      	bne.n	8002280 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80021c8:	7ffb      	ldrb	r3, [r7, #31]
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d827      	bhi.n	800221e <UART_SetConfig+0x142>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <UART_SetConfig+0xf8>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021f9 	.word	0x080021f9
 80021d8:	08002201 	.word	0x08002201
 80021dc:	08002209 	.word	0x08002209
 80021e0:	0800221f 	.word	0x0800221f
 80021e4:	0800220f 	.word	0x0800220f
 80021e8:	0800221f 	.word	0x0800221f
 80021ec:	0800221f 	.word	0x0800221f
 80021f0:	0800221f 	.word	0x0800221f
 80021f4:	08002217 	.word	0x08002217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021f8:	f7ff fede 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 80021fc:	61b8      	str	r0, [r7, #24]
        break;
 80021fe:	e013      	b.n	8002228 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002200:	f7ff fefc 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 8002204:	61b8      	str	r0, [r7, #24]
        break;
 8002206:	e00f      	b.n	8002228 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002208:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <UART_SetConfig+0x268>)
 800220a:	61bb      	str	r3, [r7, #24]
        break;
 800220c:	e00c      	b.n	8002228 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800220e:	f7ff fe5d 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8002212:	61b8      	str	r0, [r7, #24]
        break;
 8002214:	e008      	b.n	8002228 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221a:	61bb      	str	r3, [r7, #24]
        break;
 800221c:	e004      	b.n	8002228 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	77bb      	strb	r3, [r7, #30]
        break;
 8002226:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d074      	beq.n	8002318 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	005a      	lsls	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	441a      	add	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	b29b      	uxth	r3, r3
 8002244:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d916      	bls.n	800227a <UART_SetConfig+0x19e>
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002252:	d212      	bcs.n	800227a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	b29b      	uxth	r3, r3
 8002258:	f023 030f 	bic.w	r3, r3, #15
 800225c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	b29b      	uxth	r3, r3
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	b29a      	uxth	r2, r3
 800226a:	89fb      	ldrh	r3, [r7, #14]
 800226c:	4313      	orrs	r3, r2
 800226e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	89fa      	ldrh	r2, [r7, #14]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	e04e      	b.n	8002318 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	77bb      	strb	r3, [r7, #30]
 800227e:	e04b      	b.n	8002318 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002280:	7ffb      	ldrb	r3, [r7, #31]
 8002282:	2b08      	cmp	r3, #8
 8002284:	d827      	bhi.n	80022d6 <UART_SetConfig+0x1fa>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <UART_SetConfig+0x1b0>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	080022b1 	.word	0x080022b1
 8002290:	080022b9 	.word	0x080022b9
 8002294:	080022c1 	.word	0x080022c1
 8002298:	080022d7 	.word	0x080022d7
 800229c:	080022c7 	.word	0x080022c7
 80022a0:	080022d7 	.word	0x080022d7
 80022a4:	080022d7 	.word	0x080022d7
 80022a8:	080022d7 	.word	0x080022d7
 80022ac:	080022cf 	.word	0x080022cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022b0:	f7ff fe82 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 80022b4:	61b8      	str	r0, [r7, #24]
        break;
 80022b6:	e013      	b.n	80022e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022b8:	f7ff fea0 	bl	8001ffc <HAL_RCC_GetPCLK2Freq>
 80022bc:	61b8      	str	r0, [r7, #24]
        break;
 80022be:	e00f      	b.n	80022e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <UART_SetConfig+0x268>)
 80022c2:	61bb      	str	r3, [r7, #24]
        break;
 80022c4:	e00c      	b.n	80022e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022c6:	f7ff fe01 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 80022ca:	61b8      	str	r0, [r7, #24]
        break;
 80022cc:	e008      	b.n	80022e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d2:	61bb      	str	r3, [r7, #24]
        break;
 80022d4:	e004      	b.n	80022e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	77bb      	strb	r3, [r7, #30]
        break;
 80022de:	bf00      	nop
    }

    if (pclk != 0U)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d018      	beq.n	8002318 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	085a      	lsrs	r2, r3, #1
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	441a      	add	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2b0f      	cmp	r3, #15
 8002300:	d908      	bls.n	8002314 <UART_SetConfig+0x238>
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d204      	bcs.n	8002314 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	e001      	b.n	8002318 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002324:	7fbb      	ldrb	r3, [r7, #30]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	efff69f3 	.word	0xefff69f3
 8002334:	40013800 	.word	0x40013800
 8002338:	40021000 	.word	0x40021000
 800233c:	40004400 	.word	0x40004400
 8002340:	40004800 	.word	0x40004800
 8002344:	007a1200 	.word	0x007a1200

08002348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01a      	beq.n	800245e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002446:	d10a      	bne.n	800245e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
  }
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af02      	add	r7, sp, #8
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800249c:	f7fe f8e0 	bl	8000660 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d10e      	bne.n	80024ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f82d 	bl	800251e <UART_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e023      	b.n	8002516 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d10e      	bne.n	80024fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f817 	bl	800251e <UART_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e00d      	b.n	8002516 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b09c      	sub	sp, #112	; 0x70
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252e:	e0a5      	b.n	800267c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	f000 80a1 	beq.w	800267c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253a:	f7fe f891 	bl	8000660 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002546:	429a      	cmp	r2, r3
 8002548:	d302      	bcc.n	8002550 <UART_WaitOnFlagUntilTimeout+0x32>
 800254a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254c:	2b00      	cmp	r3, #0
 800254e:	d13e      	bne.n	80025ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002558:	e853 3f00 	ldrex	r3, [r3]
 800255c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800255e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002564:	667b      	str	r3, [r7, #100]	; 0x64
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800256e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002570:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002572:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002576:	e841 2300 	strex	r3, r2, [r1]
 800257a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e6      	bne.n	8002550 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3308      	adds	r3, #8
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258c:	e853 3f00 	ldrex	r3, [r3]
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	663b      	str	r3, [r7, #96]	; 0x60
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3308      	adds	r3, #8
 80025a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80025a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80025a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025aa:	e841 2300 	strex	r3, r2, [r1]
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80025b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1e5      	bne.n	8002582 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e067      	b.n	800269e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d04f      	beq.n	800267c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ea:	d147      	bne.n	800267c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	e853 3f00 	ldrex	r3, [r3]
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800260a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
 8002616:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800261a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800261c:	e841 2300 	strex	r3, r2, [r1]
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e6      	bne.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3308      	adds	r3, #8
 800262e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	e853 3f00 	ldrex	r3, [r3]
 8002636:	613b      	str	r3, [r7, #16]
   return(result);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3308      	adds	r3, #8
 8002646:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002648:	623a      	str	r2, [r7, #32]
 800264a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264c:	69f9      	ldr	r1, [r7, #28]
 800264e:	6a3a      	ldr	r2, [r7, #32]
 8002650:	e841 2300 	strex	r3, r2, [r1]
 8002654:	61bb      	str	r3, [r7, #24]
   return(result);
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e5      	bne.n	8002628 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e010      	b.n	800269e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69da      	ldr	r2, [r3, #28]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4013      	ands	r3, r2
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	429a      	cmp	r2, r3
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	429a      	cmp	r2, r3
 8002698:	f43f af4a 	beq.w	8002530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3770      	adds	r7, #112	; 0x70
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b8:	2b84      	cmp	r3, #132	; 0x84
 80026ba:	d005      	beq.n	80026c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	3303      	adds	r3, #3
 80026c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026c8:	68fb      	ldr	r3, [r7, #12]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026da:	f000 fad5 	bl	8002c88 <vTaskStartScheduler>
  
  return osOK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af04      	add	r7, sp, #16
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d020      	beq.n	8002738 <osThreadCreate+0x54>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d01c      	beq.n	8002738 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685c      	ldr	r4, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681d      	ldr	r5, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691e      	ldr	r6, [r3, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ffc8 	bl	80026a6 <makeFreeRtosPriority>
 8002716:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002720:	9202      	str	r2, [sp, #8]
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	9100      	str	r1, [sp, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	4632      	mov	r2, r6
 800272a:	4629      	mov	r1, r5
 800272c:	4620      	mov	r0, r4
 800272e:	f000 f8ed 	bl	800290c <xTaskCreateStatic>
 8002732:	4603      	mov	r3, r0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e01c      	b.n	8002772 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685c      	ldr	r4, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002744:	b29e      	uxth	r6, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ffaa 	bl	80026a6 <makeFreeRtosPriority>
 8002752:	4602      	mov	r2, r0
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	9200      	str	r2, [sp, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4632      	mov	r2, r6
 8002760:	4629      	mov	r1, r5
 8002762:	4620      	mov	r0, r4
 8002764:	f000 f92e 	bl	80029c4 <xTaskCreate>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800277c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <osDelay+0x16>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	e000      	b.n	8002794 <osDelay+0x18>
 8002792:	2301      	movs	r3, #1
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fa43 	bl	8002c20 <vTaskDelay>
  
  return osOK;
 800279a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f103 0208 	add.w	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f103 0208 	add.w	r2, r3, #8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0208 	add.w	r2, r3, #8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	601a      	str	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d103      	bne.n	8002866 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e00c      	b.n	8002880 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3308      	adds	r3, #8
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e002      	b.n	8002874 <vListInsert+0x2e>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	429a      	cmp	r2, r3
 800287e:	d2f6      	bcs.n	800286e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	601a      	str	r2, [r3, #0]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6892      	ldr	r2, [r2, #8]
 80028ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6852      	ldr	r2, [r2, #4]
 80028d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d103      	bne.n	80028ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	1e5a      	subs	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08e      	sub	sp, #56	; 0x38
 8002910:	af04      	add	r7, sp, #16
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002932:	bf00      	nop
 8002934:	e7fe      	b.n	8002934 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xTaskCreateStatic+0x46>
	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	61fb      	str	r3, [r7, #28]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002952:	2354      	movs	r3, #84	; 0x54
 8002954:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b54      	cmp	r3, #84	; 0x54
 800295a:	d00a      	beq.n	8002972 <xTaskCreateStatic+0x66>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	61bb      	str	r3, [r7, #24]
}
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01e      	beq.n	80029b6 <xTaskCreateStatic+0xaa>
 8002978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01b      	beq.n	80029b6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002986:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002990:	2300      	movs	r3, #0
 8002992:	9303      	str	r3, [sp, #12]
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	9302      	str	r3, [sp, #8]
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f850 	bl	8002a4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029b0:	f000 f8cc 	bl	8002b4c <prvAddNewTaskToReadyList>
 80029b4:	e001      	b.n	80029ba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029ba:	697b      	ldr	r3, [r7, #20]
	}
 80029bc:	4618      	mov	r0, r3
 80029be:	3728      	adds	r7, #40	; 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	; 0x30
 80029c8:	af04      	add	r7, sp, #16
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fee5 	bl	80037a8 <pvPortMalloc>
 80029de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00e      	beq.n	8002a04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80029e6:	2054      	movs	r0, #84	; 0x54
 80029e8:	f000 fede 	bl	80037a8 <pvPortMalloc>
 80029ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
 80029fa:	e005      	b.n	8002a08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029fc:	6978      	ldr	r0, [r7, #20]
 80029fe:	f000 ff97 	bl	8003930 <vPortFree>
 8002a02:	e001      	b.n	8002a08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d017      	beq.n	8002a3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9303      	str	r3, [sp, #12]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	9302      	str	r3, [sp, #8]
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f80e 	bl	8002a4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a32:	69f8      	ldr	r0, [r7, #28]
 8002a34:	f000 f88a 	bl	8002b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	e002      	b.n	8002a44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a44:	69bb      	ldr	r3, [r7, #24]
	}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b088      	sub	sp, #32
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a66:	3b01      	subs	r3, #1
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f023 0307 	bic.w	r3, r3, #7
 8002a74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	617b      	str	r3, [r7, #20]
}
 8002a92:	bf00      	nop
 8002a94:	e7fe      	b.n	8002a94 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e012      	b.n	8002ac2 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	7819      	ldrb	r1, [r3, #0]
 8002aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3334      	adds	r3, #52	; 0x34
 8002aac:	460a      	mov	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d9e9      	bls.n	8002a9c <prvInitialiseNewTask+0x4e>
 8002ac8:	e000      	b.n	8002acc <prvInitialiseNewTask+0x7e>
		{
			break;
 8002aca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d901      	bls.n	8002ade <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ada:	2306      	movs	r3, #6
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	2200      	movs	r2, #0
 8002aee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	3304      	adds	r3, #4
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fe75 	bl	80027e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	3318      	adds	r3, #24
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fe70 	bl	80027e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	f1c3 0207 	rsb	r2, r3, #7
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	69b8      	ldr	r0, [r7, #24]
 8002b2e:	f000 fc2f 	bl	8003390 <pxPortInitialiseStack>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b44:	bf00      	nop
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b54:	f000 fd46 	bl	80035e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <prvAddNewTaskToReadyList+0xb8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <prvAddNewTaskToReadyList+0xb8>)
 8002b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <prvAddNewTaskToReadyList+0xbc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b6a:	4a27      	ldr	r2, [pc, #156]	; (8002c08 <prvAddNewTaskToReadyList+0xbc>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <prvAddNewTaskToReadyList+0xb8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d110      	bne.n	8002b9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b78:	f000 fac2 	bl	8003100 <prvInitialiseTaskLists>
 8002b7c:	e00d      	b.n	8002b9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b7e:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <prvAddNewTaskToReadyList+0xc0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <prvAddNewTaskToReadyList+0xbc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d802      	bhi.n	8002b9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b94:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <prvAddNewTaskToReadyList+0xbc>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <prvAddNewTaskToReadyList+0xc4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <prvAddNewTaskToReadyList+0xc4>)
 8002ba2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	2201      	movs	r2, #1
 8002baa:	409a      	lsls	r2, r3
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <prvAddNewTaskToReadyList+0xc8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <prvAddNewTaskToReadyList+0xc8>)
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <prvAddNewTaskToReadyList+0xcc>)
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f7ff fe16 	bl	80027fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bd2:	f000 fd37 	bl	8003644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <prvAddNewTaskToReadyList+0xc0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <prvAddNewTaskToReadyList+0xbc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d207      	bcs.n	8002bfc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <prvAddNewTaskToReadyList+0xd0>)
 8002bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	2000040c 	.word	0x2000040c
 8002c08:	2000030c 	.word	0x2000030c
 8002c0c:	20000418 	.word	0x20000418
 8002c10:	20000428 	.word	0x20000428
 8002c14:	20000414 	.word	0x20000414
 8002c18:	20000310 	.word	0x20000310
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d017      	beq.n	8002c62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <vTaskDelay+0x60>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <vTaskDelay+0x30>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	60bb      	str	r3, [r7, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c50:	f000 f87a 	bl	8002d48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c54:	2100      	movs	r1, #0
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fb34 	bl	80032c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c5c:	f000 f882 	bl	8002d64 <xTaskResumeAll>
 8002c60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <vTaskDelay+0x64>)
 8002c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000434 	.word	0x20000434
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	; 0x28
 8002c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c96:	463a      	mov	r2, r7
 8002c98:	1d39      	adds	r1, r7, #4
 8002c9a:	f107 0308 	add.w	r3, r7, #8
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fa96 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	9202      	str	r2, [sp, #8]
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	491e      	ldr	r1, [pc, #120]	; (8002d30 <vTaskStartScheduler+0xa8>)
 8002cb8:	481e      	ldr	r0, [pc, #120]	; (8002d34 <vTaskStartScheduler+0xac>)
 8002cba:	f7ff fe27 	bl	800290c <xTaskCreateStatic>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <vTaskStartScheduler+0xb0>)
 8002cc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <vTaskStartScheduler+0xb0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e001      	b.n	8002cd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d116      	bne.n	8002d0a <vTaskStartScheduler+0x82>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	613b      	str	r3, [r7, #16]
}
 8002cee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <vTaskStartScheduler+0xb4>)
 8002cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <vTaskStartScheduler+0xb8>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <vTaskStartScheduler+0xbc>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d04:	f000 fbcc 	bl	80034a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d08:	e00e      	b.n	8002d28 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d10a      	bne.n	8002d28 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	60fb      	str	r3, [r7, #12]
}
 8002d24:	bf00      	nop
 8002d26:	e7fe      	b.n	8002d26 <vTaskStartScheduler+0x9e>
}
 8002d28:	bf00      	nop
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	08003bf4 	.word	0x08003bf4
 8002d34:	080030d1 	.word	0x080030d1
 8002d38:	20000430 	.word	0x20000430
 8002d3c:	2000042c 	.word	0x2000042c
 8002d40:	20000418 	.word	0x20000418
 8002d44:	20000410 	.word	0x20000410

08002d48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <vTaskSuspendAll+0x18>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	4a03      	ldr	r2, [pc, #12]	; (8002d60 <vTaskSuspendAll+0x18>)
 8002d54:	6013      	str	r3, [r2, #0]
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	20000434 	.word	0x20000434

08002d64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <xTaskResumeAll+0x114>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10a      	bne.n	8002d90 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	603b      	str	r3, [r7, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	e7fe      	b.n	8002d8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d90:	f000 fc28 	bl	80035e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d94:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <xTaskResumeAll+0x114>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	4a37      	ldr	r2, [pc, #220]	; (8002e78 <xTaskResumeAll+0x114>)
 8002d9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d9e:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <xTaskResumeAll+0x114>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d161      	bne.n	8002e6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002da6:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <xTaskResumeAll+0x118>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d05d      	beq.n	8002e6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dae:	e02e      	b.n	8002e0e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002db0:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <xTaskResumeAll+0x11c>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3318      	adds	r3, #24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fd7b 	bl	80028b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fd76 	bl	80028b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <xTaskResumeAll+0x120>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	4a2a      	ldr	r2, [pc, #168]	; (8002e84 <xTaskResumeAll+0x120>)
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <xTaskResumeAll+0x124>)
 8002dec:	441a      	add	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3304      	adds	r3, #4
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	f7ff fd02 	bl	80027fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <xTaskResumeAll+0x128>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <xTaskResumeAll+0x12c>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <xTaskResumeAll+0x11c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1cc      	bne.n	8002db0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e1c:	f000 fa0e 	bl	800323c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <xTaskResumeAll+0x130>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d010      	beq.n	8002e4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e2c:	f000 f836 	bl	8002e9c <xTaskIncrementTick>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <xTaskResumeAll+0x12c>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f1      	bne.n	8002e2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <xTaskResumeAll+0x130>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <xTaskResumeAll+0x12c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e56:	2301      	movs	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <xTaskResumeAll+0x134>)
 8002e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e6a:	f000 fbeb 	bl	8003644 <vPortExitCritical>

	return xAlreadyYielded;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000434 	.word	0x20000434
 8002e7c:	2000040c 	.word	0x2000040c
 8002e80:	200003cc 	.word	0x200003cc
 8002e84:	20000414 	.word	0x20000414
 8002e88:	20000310 	.word	0x20000310
 8002e8c:	2000030c 	.word	0x2000030c
 8002e90:	20000420 	.word	0x20000420
 8002e94:	2000041c 	.word	0x2000041c
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ea6:	4b51      	ldr	r3, [pc, #324]	; (8002fec <xTaskIncrementTick+0x150>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 808d 	bne.w	8002fca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002eb0:	4b4f      	ldr	r3, [pc, #316]	; (8002ff0 <xTaskIncrementTick+0x154>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002eb8:	4a4d      	ldr	r2, [pc, #308]	; (8002ff0 <xTaskIncrementTick+0x154>)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d120      	bne.n	8002f06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ec4:	4b4b      	ldr	r3, [pc, #300]	; (8002ff4 <xTaskIncrementTick+0x158>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <xTaskIncrementTick+0x48>
	__asm volatile
 8002ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	603b      	str	r3, [r7, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	e7fe      	b.n	8002ee2 <xTaskIncrementTick+0x46>
 8002ee4:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <xTaskIncrementTick+0x158>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <xTaskIncrementTick+0x15c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a41      	ldr	r2, [pc, #260]	; (8002ff4 <xTaskIncrementTick+0x158>)
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4a41      	ldr	r2, [pc, #260]	; (8002ff8 <xTaskIncrementTick+0x15c>)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <xTaskIncrementTick+0x160>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	4a3f      	ldr	r2, [pc, #252]	; (8002ffc <xTaskIncrementTick+0x160>)
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	f000 f99b 	bl	800323c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f06:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <xTaskIncrementTick+0x164>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d34d      	bcc.n	8002fac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f10:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <xTaskIncrementTick+0x158>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <xTaskIncrementTick+0x82>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <xTaskIncrementTick+0x84>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f24:	4b36      	ldr	r3, [pc, #216]	; (8003000 <xTaskIncrementTick+0x164>)
 8002f26:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2a:	601a      	str	r2, [r3, #0]
					break;
 8002f2c:	e03e      	b.n	8002fac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f2e:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <xTaskIncrementTick+0x158>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d203      	bcs.n	8002f4e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f46:	4a2e      	ldr	r2, [pc, #184]	; (8003000 <xTaskIncrementTick+0x164>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6013      	str	r3, [r2, #0]
						break;
 8002f4c:	e02e      	b.n	8002fac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3304      	adds	r3, #4
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fcb0 	bl	80028b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3318      	adds	r3, #24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fca7 	bl	80028b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	2201      	movs	r2, #1
 8002f70:	409a      	lsls	r2, r3
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <xTaskIncrementTick+0x168>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <xTaskIncrementTick+0x168>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <xTaskIncrementTick+0x16c>)
 8002f8a:	441a      	add	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7ff fc33 	bl	80027fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <xTaskIncrementTick+0x170>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d3b4      	bcc.n	8002f10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002faa:	e7b1      	b.n	8002f10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <xTaskIncrementTick+0x170>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	4915      	ldr	r1, [pc, #84]	; (8003008 <xTaskIncrementTick+0x16c>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d907      	bls.n	8002fd4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e004      	b.n	8002fd4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <xTaskIncrementTick+0x174>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	4a0f      	ldr	r2, [pc, #60]	; (8003010 <xTaskIncrementTick+0x174>)
 8002fd2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <xTaskIncrementTick+0x178>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002fe0:	697b      	ldr	r3, [r7, #20]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000434 	.word	0x20000434
 8002ff0:	20000410 	.word	0x20000410
 8002ff4:	200003c4 	.word	0x200003c4
 8002ff8:	200003c8 	.word	0x200003c8
 8002ffc:	20000424 	.word	0x20000424
 8003000:	2000042c 	.word	0x2000042c
 8003004:	20000414 	.word	0x20000414
 8003008:	20000310 	.word	0x20000310
 800300c:	2000030c 	.word	0x2000030c
 8003010:	2000041c 	.word	0x2000041c
 8003014:	20000420 	.word	0x20000420

08003018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800301e:	4b27      	ldr	r3, [pc, #156]	; (80030bc <vTaskSwitchContext+0xa4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003026:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <vTaskSwitchContext+0xa8>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800302c:	e03f      	b.n	80030ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <vTaskSwitchContext+0xa8>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <vTaskSwitchContext+0xac>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003042:	7afb      	ldrb	r3, [r7, #11]
 8003044:	f1c3 031f 	rsb	r3, r3, #31
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	491f      	ldr	r1, [pc, #124]	; (80030c8 <vTaskSwitchContext+0xb0>)
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <vTaskSwitchContext+0x5c>
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	607b      	str	r3, [r7, #4]
}
 8003070:	bf00      	nop
 8003072:	e7fe      	b.n	8003072 <vTaskSwitchContext+0x5a>
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <vTaskSwitchContext+0xb0>)
 8003080:	4413      	add	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	3308      	adds	r3, #8
 8003096:	429a      	cmp	r2, r3
 8003098:	d104      	bne.n	80030a4 <vTaskSwitchContext+0x8c>
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <vTaskSwitchContext+0xb4>)
 80030ac:	6013      	str	r3, [r2, #0]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000434 	.word	0x20000434
 80030c0:	20000420 	.word	0x20000420
 80030c4:	20000414 	.word	0x20000414
 80030c8:	20000310 	.word	0x20000310
 80030cc:	2000030c 	.word	0x2000030c

080030d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030d8:	f000 f852 	bl	8003180 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <prvIdleTask+0x28>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d9f9      	bls.n	80030d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <prvIdleTask+0x2c>)
 80030e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030f4:	e7f0      	b.n	80030d8 <prvIdleTask+0x8>
 80030f6:	bf00      	nop
 80030f8:	20000310 	.word	0x20000310
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	e00c      	b.n	8003126 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <prvInitialiseTaskLists+0x60>)
 8003118:	4413      	add	r3, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fb42 	bl	80027a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3301      	adds	r3, #1
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b06      	cmp	r3, #6
 800312a:	d9ef      	bls.n	800310c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800312c:	480d      	ldr	r0, [pc, #52]	; (8003164 <prvInitialiseTaskLists+0x64>)
 800312e:	f7ff fb39 	bl	80027a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003132:	480d      	ldr	r0, [pc, #52]	; (8003168 <prvInitialiseTaskLists+0x68>)
 8003134:	f7ff fb36 	bl	80027a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003138:	480c      	ldr	r0, [pc, #48]	; (800316c <prvInitialiseTaskLists+0x6c>)
 800313a:	f7ff fb33 	bl	80027a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800313e:	480c      	ldr	r0, [pc, #48]	; (8003170 <prvInitialiseTaskLists+0x70>)
 8003140:	f7ff fb30 	bl	80027a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003144:	480b      	ldr	r0, [pc, #44]	; (8003174 <prvInitialiseTaskLists+0x74>)
 8003146:	f7ff fb2d 	bl	80027a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <prvInitialiseTaskLists+0x78>)
 800314c:	4a05      	ldr	r2, [pc, #20]	; (8003164 <prvInitialiseTaskLists+0x64>)
 800314e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <prvInitialiseTaskLists+0x7c>)
 8003152:	4a05      	ldr	r2, [pc, #20]	; (8003168 <prvInitialiseTaskLists+0x68>)
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000310 	.word	0x20000310
 8003164:	2000039c 	.word	0x2000039c
 8003168:	200003b0 	.word	0x200003b0
 800316c:	200003cc 	.word	0x200003cc
 8003170:	200003e0 	.word	0x200003e0
 8003174:	200003f8 	.word	0x200003f8
 8003178:	200003c4 	.word	0x200003c4
 800317c:	200003c8 	.word	0x200003c8

08003180 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003186:	e019      	b.n	80031bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003188:	f000 fa2c 	bl	80035e4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <prvCheckTasksWaitingTermination+0x50>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fb8d 	bl	80028b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <prvCheckTasksWaitingTermination+0x54>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <prvCheckTasksWaitingTermination+0x54>)
 80031a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <prvCheckTasksWaitingTermination+0x58>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <prvCheckTasksWaitingTermination+0x58>)
 80031b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031b2:	f000 fa47 	bl	8003644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f810 	bl	80031dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <prvCheckTasksWaitingTermination+0x58>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e1      	bne.n	8003188 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200003e0 	.word	0x200003e0
 80031d4:	2000040c 	.word	0x2000040c
 80031d8:	200003f4 	.word	0x200003f4

080031dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fb9c 	bl	8003930 <vPortFree>
				vPortFree( pxTCB );
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fb99 	bl	8003930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031fe:	e018      	b.n	8003232 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003206:	2b01      	cmp	r3, #1
 8003208:	d103      	bne.n	8003212 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fb90 	bl	8003930 <vPortFree>
	}
 8003210:	e00f      	b.n	8003232 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003218:	2b02      	cmp	r3, #2
 800321a:	d00a      	beq.n	8003232 <prvDeleteTCB+0x56>
	__asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	60fb      	str	r3, [r7, #12]
}
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <prvDeleteTCB+0x54>
	}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <prvResetNextTaskUnblockTime+0x44>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <prvResetNextTaskUnblockTime+0x14>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <prvResetNextTaskUnblockTime+0x16>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <prvResetNextTaskUnblockTime+0x48>)
 8003258:	f04f 32ff 	mov.w	r2, #4294967295
 800325c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800325e:	e008      	b.n	8003272 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <prvResetNextTaskUnblockTime+0x44>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <prvResetNextTaskUnblockTime+0x48>)
 8003270:	6013      	str	r3, [r2, #0]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	200003c4 	.word	0x200003c4
 8003284:	2000042c 	.word	0x2000042c

08003288 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <xTaskGetSchedulerState+0x34>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003296:	2301      	movs	r3, #1
 8003298:	607b      	str	r3, [r7, #4]
 800329a:	e008      	b.n	80032ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <xTaskGetSchedulerState+0x38>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032a4:	2302      	movs	r3, #2
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	e001      	b.n	80032ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032ae:	687b      	ldr	r3, [r7, #4]
	}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	20000418 	.word	0x20000418
 80032c0:	20000434 	.word	0x20000434

080032c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <prvAddCurrentTaskToDelayedList+0xb0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3304      	adds	r3, #4
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff faec 	bl	80028b8 <uxListRemove>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10b      	bne.n	80032fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80032e6:	4b24      	ldr	r3, [pc, #144]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2201      	movs	r2, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	4b21      	ldr	r3, [pc, #132]	; (800337c <prvAddCurrentTaskToDelayedList+0xb8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4013      	ands	r3, r2
 80032fa:	4a20      	ldr	r2, [pc, #128]	; (800337c <prvAddCurrentTaskToDelayedList+0xb8>)
 80032fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d10a      	bne.n	800331c <prvAddCurrentTaskToDelayedList+0x58>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	481a      	ldr	r0, [pc, #104]	; (8003380 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003316:	f7ff fa72 	bl	80027fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800331a:	e026      	b.n	800336a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d209      	bcs.n	8003348 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3304      	adds	r3, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7ff fa80 	bl	8002846 <vListInsert>
}
 8003346:	e010      	b.n	800336a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003348:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <prvAddCurrentTaskToDelayedList+0xc4>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <prvAddCurrentTaskToDelayedList+0xb4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3304      	adds	r3, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f7ff fa76 	bl	8002846 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <prvAddCurrentTaskToDelayedList+0xc8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	d202      	bcs.n	800336a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003364:	4a09      	ldr	r2, [pc, #36]	; (800338c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6013      	str	r3, [r2, #0]
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000410 	.word	0x20000410
 8003378:	2000030c 	.word	0x2000030c
 800337c:	20000414 	.word	0x20000414
 8003380:	200003f8 	.word	0x200003f8
 8003384:	200003c8 	.word	0x200003c8
 8003388:	200003c4 	.word	0x200003c4
 800338c:	2000042c 	.word	0x2000042c

08003390 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3b04      	subs	r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3b04      	subs	r3, #4
 80033ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f023 0201 	bic.w	r2, r3, #1
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3b04      	subs	r3, #4
 80033be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033c0:	4a0c      	ldr	r2, [pc, #48]	; (80033f4 <pxPortInitialiseStack+0x64>)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3b14      	subs	r3, #20
 80033ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3b04      	subs	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f06f 0202 	mvn.w	r2, #2
 80033de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b20      	subs	r3, #32
 80033e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80033e6:	68fb      	ldr	r3, [r7, #12]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	080033f9 	.word	0x080033f9

080033f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <prvTaskExitError+0x54>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d00a      	beq.n	8003422 <prvTaskExitError+0x2a>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	60fb      	str	r3, [r7, #12]
}
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <prvTaskExitError+0x28>
	__asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	60bb      	str	r3, [r7, #8]
}
 8003434:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003436:	bf00      	nop
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0fc      	beq.n	8003438 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	2000000c 	.word	0x2000000c

08003450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <pxCurrentTCBConst2>)
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	6808      	ldr	r0, [r1, #0]
 8003456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345a:	f380 8809 	msr	PSP, r0
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f380 8811 	msr	BASEPRI, r0
 800346a:	4770      	bx	lr
 800346c:	f3af 8000 	nop.w

08003470 <pxCurrentTCBConst2>:
 8003470:	2000030c 	.word	0x2000030c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop

08003478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003478:	4808      	ldr	r0, [pc, #32]	; (800349c <prvPortStartFirstTask+0x24>)
 800347a:	6800      	ldr	r0, [r0, #0]
 800347c:	6800      	ldr	r0, [r0, #0]
 800347e:	f380 8808 	msr	MSP, r0
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f380 8814 	msr	CONTROL, r0
 800348a:	b662      	cpsie	i
 800348c:	b661      	cpsie	f
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	df00      	svc	0
 8003498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800349a:	bf00      	nop
 800349c:	e000ed08 	.word	0xe000ed08

080034a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034a6:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <xPortStartScheduler+0x120>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a46      	ldr	r2, [pc, #280]	; (80035c4 <xPortStartScheduler+0x124>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10a      	bne.n	80034c6 <xPortStartScheduler+0x26>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	613b      	str	r3, [r7, #16]
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034c6:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <xPortStartScheduler+0x120>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3f      	ldr	r2, [pc, #252]	; (80035c8 <xPortStartScheduler+0x128>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10a      	bne.n	80034e6 <xPortStartScheduler+0x46>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034e6:	4b39      	ldr	r3, [pc, #228]	; (80035cc <xPortStartScheduler+0x12c>)
 80034e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	22ff      	movs	r2, #255	; 0xff
 80034f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <xPortStartScheduler+0x130>)
 800350c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <xPortStartScheduler+0x134>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003514:	e009      	b.n	800352a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003516:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <xPortStartScheduler+0x134>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3b01      	subs	r3, #1
 800351c:	4a2d      	ldr	r2, [pc, #180]	; (80035d4 <xPortStartScheduler+0x134>)
 800351e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d0ef      	beq.n	8003516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <xPortStartScheduler+0x134>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f1c3 0307 	rsb	r3, r3, #7
 800353e:	2b04      	cmp	r3, #4
 8003540:	d00a      	beq.n	8003558 <xPortStartScheduler+0xb8>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	60bb      	str	r3, [r7, #8]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <xPortStartScheduler+0x134>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <xPortStartScheduler+0x134>)
 8003560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <xPortStartScheduler+0x134>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800356a:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <xPortStartScheduler+0x134>)
 800356c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <xPortStartScheduler+0x138>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <xPortStartScheduler+0x138>)
 800357c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <xPortStartScheduler+0x138>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <xPortStartScheduler+0x138>)
 8003588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800358c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800358e:	f000 f8dd 	bl	800374c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <xPortStartScheduler+0x13c>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003598:	f000 f8fc 	bl	8003794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <xPortStartScheduler+0x140>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <xPortStartScheduler+0x140>)
 80035a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035a8:	f7ff ff66 	bl	8003478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035ac:	f7ff fd34 	bl	8003018 <vTaskSwitchContext>
	prvTaskExitError();
 80035b0:	f7ff ff22 	bl	80033f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00
 80035c4:	410fc271 	.word	0x410fc271
 80035c8:	410fc270 	.word	0x410fc270
 80035cc:	e000e400 	.word	0xe000e400
 80035d0:	20000438 	.word	0x20000438
 80035d4:	2000043c 	.word	0x2000043c
 80035d8:	e000ed20 	.word	0xe000ed20
 80035dc:	2000000c 	.word	0x2000000c
 80035e0:	e000ef34 	.word	0xe000ef34

080035e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	607b      	str	r3, [r7, #4]
}
 80035fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <vPortEnterCritical+0x58>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	4a0d      	ldr	r2, [pc, #52]	; (800363c <vPortEnterCritical+0x58>)
 8003606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <vPortEnterCritical+0x58>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10f      	bne.n	8003630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <vPortEnterCritical+0x5c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <vPortEnterCritical+0x4c>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	603b      	str	r3, [r7, #0]
}
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <vPortEnterCritical+0x4a>
	}
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	2000000c 	.word	0x2000000c
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <vPortExitCritical+0x50>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <vPortExitCritical+0x24>
	__asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	607b      	str	r3, [r7, #4]
}
 8003664:	bf00      	nop
 8003666:	e7fe      	b.n	8003666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <vPortExitCritical+0x50>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3b01      	subs	r3, #1
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <vPortExitCritical+0x50>)
 8003670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <vPortExitCritical+0x50>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <vPortExitCritical+0x42>
 800367a:	2300      	movs	r3, #0
 800367c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c
	...

080036a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036a0:	f3ef 8009 	mrs	r0, PSP
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	4b15      	ldr	r3, [pc, #84]	; (8003700 <pxCurrentTCBConst>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	f01e 0f10 	tst.w	lr, #16
 80036b0:	bf08      	it	eq
 80036b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ba:	6010      	str	r0, [r2, #0]
 80036bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036c4:	f380 8811 	msr	BASEPRI, r0
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f7ff fca2 	bl	8003018 <vTaskSwitchContext>
 80036d4:	f04f 0000 	mov.w	r0, #0
 80036d8:	f380 8811 	msr	BASEPRI, r0
 80036dc:	bc09      	pop	{r0, r3}
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	6808      	ldr	r0, [r1, #0]
 80036e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e6:	f01e 0f10 	tst.w	lr, #16
 80036ea:	bf08      	it	eq
 80036ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036f0:	f380 8809 	msr	PSP, r0
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	f3af 8000 	nop.w

08003700 <pxCurrentTCBConst>:
 8003700:	2000030c 	.word	0x2000030c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	607b      	str	r3, [r7, #4]
}
 8003720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003722:	f7ff fbbb 	bl	8002e9c <xTaskIncrementTick>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <xPortSysTickHandler+0x40>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f383 8811 	msr	BASEPRI, r3
}
 800373e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <vPortSetupTimerInterrupt+0x34>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <vPortSetupTimerInterrupt+0x38>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <vPortSetupTimerInterrupt+0x3c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <vPortSetupTimerInterrupt+0x40>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	4a09      	ldr	r2, [pc, #36]	; (8003790 <vPortSetupTimerInterrupt+0x44>)
 800376a:	3b01      	subs	r3, #1
 800376c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800376e:	4b04      	ldr	r3, [pc, #16]	; (8003780 <vPortSetupTimerInterrupt+0x34>)
 8003770:	2207      	movs	r2, #7
 8003772:	601a      	str	r2, [r3, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	e000e010 	.word	0xe000e010
 8003784:	e000e018 	.word	0xe000e018
 8003788:	20000000 	.word	0x20000000
 800378c:	10624dd3 	.word	0x10624dd3
 8003790:	e000e014 	.word	0xe000e014

08003794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037a4 <vPortEnableVFP+0x10>
 8003798:	6801      	ldr	r1, [r0, #0]
 800379a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800379e:	6001      	str	r1, [r0, #0]
 80037a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037a2:	bf00      	nop
 80037a4:	e000ed88 	.word	0xe000ed88

080037a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80037b4:	f7ff fac8 	bl	8002d48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80037b8:	4b58      	ldr	r3, [pc, #352]	; (800391c <pvPortMalloc+0x174>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80037c0:	f000 f910 	bl	80039e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037c4:	4b56      	ldr	r3, [pc, #344]	; (8003920 <pvPortMalloc+0x178>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 808e 	bne.w	80038ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01d      	beq.n	8003814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80037d8:	2208      	movs	r2, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d014      	beq.n	8003814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f023 0307 	bic.w	r3, r3, #7
 80037f0:	3308      	adds	r3, #8
 80037f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <pvPortMalloc+0x6c>
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	617b      	str	r3, [r7, #20]
}
 8003810:	bf00      	nop
 8003812:	e7fe      	b.n	8003812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d069      	beq.n	80038ee <pvPortMalloc+0x146>
 800381a:	4b42      	ldr	r3, [pc, #264]	; (8003924 <pvPortMalloc+0x17c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d864      	bhi.n	80038ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <pvPortMalloc+0x180>)
 8003826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003828:	4b3f      	ldr	r3, [pc, #252]	; (8003928 <pvPortMalloc+0x180>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800382e:	e004      	b.n	800383a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d903      	bls.n	800384c <pvPortMalloc+0xa4>
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f1      	bne.n	8003830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800384c:	4b33      	ldr	r3, [pc, #204]	; (800391c <pvPortMalloc+0x174>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	429a      	cmp	r2, r3
 8003854:	d04b      	beq.n	80038ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2208      	movs	r2, #8
 800385c:	4413      	add	r3, r2
 800385e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	1ad2      	subs	r2, r2, r3
 8003870:	2308      	movs	r3, #8
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	429a      	cmp	r2, r3
 8003876:	d91f      	bls.n	80038b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <pvPortMalloc+0xf8>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	613b      	str	r3, [r7, #16]
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	1ad2      	subs	r2, r2, r3
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038b2:	69b8      	ldr	r0, [r7, #24]
 80038b4:	f000 f8f8 	bl	8003aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038b8:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <pvPortMalloc+0x17c>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	4a18      	ldr	r2, [pc, #96]	; (8003924 <pvPortMalloc+0x17c>)
 80038c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <pvPortMalloc+0x17c>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b18      	ldr	r3, [pc, #96]	; (800392c <pvPortMalloc+0x184>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d203      	bcs.n	80038da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <pvPortMalloc+0x17c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a15      	ldr	r2, [pc, #84]	; (800392c <pvPortMalloc+0x184>)
 80038d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <pvPortMalloc+0x178>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80038ee:	f7ff fa39 	bl	8002d64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <pvPortMalloc+0x16a>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60fb      	str	r3, [r7, #12]
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <pvPortMalloc+0x168>
	return pvReturn;
 8003912:	69fb      	ldr	r3, [r7, #28]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20001048 	.word	0x20001048
 8003920:	20001054 	.word	0x20001054
 8003924:	2000104c 	.word	0x2000104c
 8003928:	20001040 	.word	0x20001040
 800392c:	20001050 	.word	0x20001050

08003930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d048      	beq.n	80039d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003942:	2308      	movs	r3, #8
 8003944:	425b      	negs	r3, r3
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4413      	add	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <vPortFree+0xac>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <vPortFree+0x44>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	60fb      	str	r3, [r7, #12]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <vPortFree+0x62>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	60bb      	str	r3, [r7, #8]
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <vPortFree+0xac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d019      	beq.n	80039d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d115      	bne.n	80039d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <vPortFree+0xac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80039b8:	f7ff f9c6 	bl	8002d48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <vPortFree+0xb0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4413      	add	r3, r2
 80039c6:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <vPortFree+0xb0>)
 80039c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039ca:	6938      	ldr	r0, [r7, #16]
 80039cc:	f000 f86c 	bl	8003aa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80039d0:	f7ff f9c8 	bl	8002d64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20001054 	.word	0x20001054
 80039e0:	2000104c 	.word	0x2000104c

080039e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039f0:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <prvHeapInit+0xac>)
 80039f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3307      	adds	r3, #7
 8003a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0307 	bic.w	r3, r3, #7
 8003a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <prvHeapInit+0xac>)
 8003a14:	4413      	add	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a1c:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <prvHeapInit+0xb0>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a22:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <prvHeapInit+0xb0>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a30:	2208      	movs	r2, #8
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0307 	bic.w	r3, r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <prvHeapInit+0xb4>)
 8003a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <prvHeapInit+0xb4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <prvHeapInit+0xb4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	1ad2      	subs	r2, r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <prvHeapInit+0xb4>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <prvHeapInit+0xb8>)
 8003a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <prvHeapInit+0xbc>)
 8003a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <prvHeapInit+0xc0>)
 8003a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a82:	601a      	str	r2, [r3, #0]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20000440 	.word	0x20000440
 8003a94:	20001040 	.word	0x20001040
 8003a98:	20001048 	.word	0x20001048
 8003a9c:	20001050 	.word	0x20001050
 8003aa0:	2000104c 	.word	0x2000104c
 8003aa4:	20001054 	.word	0x20001054

08003aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ab0:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <prvInsertBlockIntoFreeList+0xac>)
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e002      	b.n	8003abc <prvInsertBlockIntoFreeList+0x14>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d8f7      	bhi.n	8003ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d108      	bne.n	8003aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	441a      	add	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d118      	bne.n	8003b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <prvInsertBlockIntoFreeList+0xb0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d00d      	beq.n	8003b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e008      	b.n	8003b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <prvInsertBlockIntoFreeList+0xb0>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e003      	b.n	8003b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d002      	beq.n	8003b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20001040 	.word	0x20001040
 8003b58:	20001048 	.word	0x20001048

08003b5c <__libc_init_array>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	4d0d      	ldr	r5, [pc, #52]	; (8003b94 <__libc_init_array+0x38>)
 8003b60:	4c0d      	ldr	r4, [pc, #52]	; (8003b98 <__libc_init_array+0x3c>)
 8003b62:	1b64      	subs	r4, r4, r5
 8003b64:	10a4      	asrs	r4, r4, #2
 8003b66:	2600      	movs	r6, #0
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d109      	bne.n	8003b80 <__libc_init_array+0x24>
 8003b6c:	4d0b      	ldr	r5, [pc, #44]	; (8003b9c <__libc_init_array+0x40>)
 8003b6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ba0 <__libc_init_array+0x44>)
 8003b70:	f000 f820 	bl	8003bb4 <_init>
 8003b74:	1b64      	subs	r4, r4, r5
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	2600      	movs	r6, #0
 8003b7a:	42a6      	cmp	r6, r4
 8003b7c:	d105      	bne.n	8003b8a <__libc_init_array+0x2e>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b84:	4798      	blx	r3
 8003b86:	3601      	adds	r6, #1
 8003b88:	e7ee      	b.n	8003b68 <__libc_init_array+0xc>
 8003b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8e:	4798      	blx	r3
 8003b90:	3601      	adds	r6, #1
 8003b92:	e7f2      	b.n	8003b7a <__libc_init_array+0x1e>
 8003b94:	08003c34 	.word	0x08003c34
 8003b98:	08003c34 	.word	0x08003c34
 8003b9c:	08003c34 	.word	0x08003c34
 8003ba0:	08003c38 	.word	0x08003c38

08003ba4 <memset>:
 8003ba4:	4402      	add	r2, r0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d100      	bne.n	8003bae <memset+0xa>
 8003bac:	4770      	bx	lr
 8003bae:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb2:	e7f9      	b.n	8003ba8 <memset+0x4>

08003bb4 <_init>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr

08003bc0 <_fini>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	bf00      	nop
 8003bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc6:	bc08      	pop	{r3}
 8003bc8:	469e      	mov	lr, r3
 8003bca:	4770      	bx	lr
